
quadrar-loraone-devboard-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d98  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08008ed8  08008ed8  00018ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009360  08009360  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009360  08009360  00019360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009368  08009368  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000020c  0800957c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800957c  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee5d  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000295a  00000000  00000000  0002f092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  00032578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001803e  00000000  00000000  00032f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6a1  00000000  00000000  0004afd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c061  00000000  00000000  00057677  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e36d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  000e3754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000020c 	.word	0x2000020c
 800015c:	00000000 	.word	0x00000000
 8000160:	08008ec0 	.word	0x08008ec0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000210 	.word	0x20000210
 800017c:	08008ec0 	.word	0x08008ec0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	d1ed      	bne.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpun>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001148:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800114c:	d102      	bne.n	8001154 <__aeabi_fcmpun+0x14>
 800114e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001152:	d108      	bne.n	8001166 <__aeabi_fcmpun+0x26>
 8001154:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001158:	d102      	bne.n	8001160 <__aeabi_fcmpun+0x20>
 800115a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115e:	d102      	bne.n	8001166 <__aeabi_fcmpun+0x26>
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	f04f 0001 	mov.w	r0, #1
 800116a:	4770      	bx	lr

0800116c <__aeabi_uldivmod>:
 800116c:	b953      	cbnz	r3, 8001184 <__aeabi_uldivmod+0x18>
 800116e:	b94a      	cbnz	r2, 8001184 <__aeabi_uldivmod+0x18>
 8001170:	2900      	cmp	r1, #0
 8001172:	bf08      	it	eq
 8001174:	2800      	cmpeq	r0, #0
 8001176:	bf1c      	itt	ne
 8001178:	f04f 31ff 	movne.w	r1, #4294967295
 800117c:	f04f 30ff 	movne.w	r0, #4294967295
 8001180:	f000 b974 	b.w	800146c <__aeabi_idiv0>
 8001184:	f1ad 0c08 	sub.w	ip, sp, #8
 8001188:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800118c:	f000 f806 	bl	800119c <__udivmoddi4>
 8001190:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr

0800119c <__udivmoddi4>:
 800119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a0:	468c      	mov	ip, r1
 80011a2:	4604      	mov	r4, r0
 80011a4:	9e08      	ldr	r6, [sp, #32]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d14b      	bne.n	8001242 <__udivmoddi4+0xa6>
 80011aa:	428a      	cmp	r2, r1
 80011ac:	4615      	mov	r5, r2
 80011ae:	d967      	bls.n	8001280 <__udivmoddi4+0xe4>
 80011b0:	fab2 f282 	clz	r2, r2
 80011b4:	b14a      	cbz	r2, 80011ca <__udivmoddi4+0x2e>
 80011b6:	f1c2 0720 	rsb	r7, r2, #32
 80011ba:	fa01 f302 	lsl.w	r3, r1, r2
 80011be:	fa20 f707 	lsr.w	r7, r0, r7
 80011c2:	4095      	lsls	r5, r2
 80011c4:	ea47 0c03 	orr.w	ip, r7, r3
 80011c8:	4094      	lsls	r4, r2
 80011ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ce:	fbbc f7fe 	udiv	r7, ip, lr
 80011d2:	fa1f f885 	uxth.w	r8, r5
 80011d6:	fb0e c317 	mls	r3, lr, r7, ip
 80011da:	fb07 f908 	mul.w	r9, r7, r8
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011e4:	4599      	cmp	r9, r3
 80011e6:	d909      	bls.n	80011fc <__udivmoddi4+0x60>
 80011e8:	18eb      	adds	r3, r5, r3
 80011ea:	f107 31ff 	add.w	r1, r7, #4294967295
 80011ee:	f080 811c 	bcs.w	800142a <__udivmoddi4+0x28e>
 80011f2:	4599      	cmp	r9, r3
 80011f4:	f240 8119 	bls.w	800142a <__udivmoddi4+0x28e>
 80011f8:	3f02      	subs	r7, #2
 80011fa:	442b      	add	r3, r5
 80011fc:	eba3 0309 	sub.w	r3, r3, r9
 8001200:	fbb3 f0fe 	udiv	r0, r3, lr
 8001204:	fb0e 3310 	mls	r3, lr, r0, r3
 8001208:	fb00 f108 	mul.w	r1, r0, r8
 800120c:	b2a4      	uxth	r4, r4
 800120e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001212:	42a1      	cmp	r1, r4
 8001214:	d909      	bls.n	800122a <__udivmoddi4+0x8e>
 8001216:	192c      	adds	r4, r5, r4
 8001218:	f100 33ff 	add.w	r3, r0, #4294967295
 800121c:	f080 8107 	bcs.w	800142e <__udivmoddi4+0x292>
 8001220:	42a1      	cmp	r1, r4
 8001222:	f240 8104 	bls.w	800142e <__udivmoddi4+0x292>
 8001226:	3802      	subs	r0, #2
 8001228:	442c      	add	r4, r5
 800122a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800122e:	2700      	movs	r7, #0
 8001230:	1a64      	subs	r4, r4, r1
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa0>
 8001234:	2300      	movs	r3, #0
 8001236:	40d4      	lsrs	r4, r2
 8001238:	e9c6 4300 	strd	r4, r3, [r6]
 800123c:	4639      	mov	r1, r7
 800123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001242:	428b      	cmp	r3, r1
 8001244:	d909      	bls.n	800125a <__udivmoddi4+0xbe>
 8001246:	2e00      	cmp	r6, #0
 8001248:	f000 80ec 	beq.w	8001424 <__udivmoddi4+0x288>
 800124c:	2700      	movs	r7, #0
 800124e:	e9c6 0100 	strd	r0, r1, [r6]
 8001252:	4638      	mov	r0, r7
 8001254:	4639      	mov	r1, r7
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125a:	fab3 f783 	clz	r7, r3
 800125e:	2f00      	cmp	r7, #0
 8001260:	d148      	bne.n	80012f4 <__udivmoddi4+0x158>
 8001262:	428b      	cmp	r3, r1
 8001264:	d302      	bcc.n	800126c <__udivmoddi4+0xd0>
 8001266:	4282      	cmp	r2, r0
 8001268:	f200 80fb 	bhi.w	8001462 <__udivmoddi4+0x2c6>
 800126c:	1a84      	subs	r4, r0, r2
 800126e:	eb61 0303 	sbc.w	r3, r1, r3
 8001272:	2001      	movs	r0, #1
 8001274:	469c      	mov	ip, r3
 8001276:	2e00      	cmp	r6, #0
 8001278:	d0e0      	beq.n	800123c <__udivmoddi4+0xa0>
 800127a:	e9c6 4c00 	strd	r4, ip, [r6]
 800127e:	e7dd      	b.n	800123c <__udivmoddi4+0xa0>
 8001280:	b902      	cbnz	r2, 8001284 <__udivmoddi4+0xe8>
 8001282:	deff      	udf	#255	; 0xff
 8001284:	fab2 f282 	clz	r2, r2
 8001288:	2a00      	cmp	r2, #0
 800128a:	f040 808f 	bne.w	80013ac <__udivmoddi4+0x210>
 800128e:	2701      	movs	r7, #1
 8001290:	1b49      	subs	r1, r1, r5
 8001292:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001296:	fa1f f985 	uxth.w	r9, r5
 800129a:	fbb1 fef8 	udiv	lr, r1, r8
 800129e:	fb08 111e 	mls	r1, r8, lr, r1
 80012a2:	fb09 f00e 	mul.w	r0, r9, lr
 80012a6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012aa:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ae:	4298      	cmp	r0, r3
 80012b0:	d907      	bls.n	80012c2 <__udivmoddi4+0x126>
 80012b2:	18eb      	adds	r3, r5, r3
 80012b4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012b8:	d202      	bcs.n	80012c0 <__udivmoddi4+0x124>
 80012ba:	4298      	cmp	r0, r3
 80012bc:	f200 80cd 	bhi.w	800145a <__udivmoddi4+0x2be>
 80012c0:	468e      	mov	lr, r1
 80012c2:	1a1b      	subs	r3, r3, r0
 80012c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012c8:	fb08 3310 	mls	r3, r8, r0, r3
 80012cc:	fb09 f900 	mul.w	r9, r9, r0
 80012d0:	b2a4      	uxth	r4, r4
 80012d2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012d6:	45a1      	cmp	r9, r4
 80012d8:	d907      	bls.n	80012ea <__udivmoddi4+0x14e>
 80012da:	192c      	adds	r4, r5, r4
 80012dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80012e0:	d202      	bcs.n	80012e8 <__udivmoddi4+0x14c>
 80012e2:	45a1      	cmp	r9, r4
 80012e4:	f200 80b6 	bhi.w	8001454 <__udivmoddi4+0x2b8>
 80012e8:	4618      	mov	r0, r3
 80012ea:	eba4 0409 	sub.w	r4, r4, r9
 80012ee:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012f2:	e79e      	b.n	8001232 <__udivmoddi4+0x96>
 80012f4:	f1c7 0520 	rsb	r5, r7, #32
 80012f8:	40bb      	lsls	r3, r7
 80012fa:	fa22 fc05 	lsr.w	ip, r2, r5
 80012fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001302:	fa21 f405 	lsr.w	r4, r1, r5
 8001306:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800130a:	fbb4 f9fe 	udiv	r9, r4, lr
 800130e:	fa1f f88c 	uxth.w	r8, ip
 8001312:	fb0e 4419 	mls	r4, lr, r9, r4
 8001316:	fa20 f305 	lsr.w	r3, r0, r5
 800131a:	40b9      	lsls	r1, r7
 800131c:	fb09 fa08 	mul.w	sl, r9, r8
 8001320:	4319      	orrs	r1, r3
 8001322:	0c0b      	lsrs	r3, r1, #16
 8001324:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001328:	45a2      	cmp	sl, r4
 800132a:	fa02 f207 	lsl.w	r2, r2, r7
 800132e:	fa00 f307 	lsl.w	r3, r0, r7
 8001332:	d90b      	bls.n	800134c <__udivmoddi4+0x1b0>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f109 30ff 	add.w	r0, r9, #4294967295
 800133c:	f080 8088 	bcs.w	8001450 <__udivmoddi4+0x2b4>
 8001340:	45a2      	cmp	sl, r4
 8001342:	f240 8085 	bls.w	8001450 <__udivmoddi4+0x2b4>
 8001346:	f1a9 0902 	sub.w	r9, r9, #2
 800134a:	4464      	add	r4, ip
 800134c:	eba4 040a 	sub.w	r4, r4, sl
 8001350:	fbb4 f0fe 	udiv	r0, r4, lr
 8001354:	fb0e 4410 	mls	r4, lr, r0, r4
 8001358:	fb00 fa08 	mul.w	sl, r0, r8
 800135c:	b289      	uxth	r1, r1
 800135e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001362:	45a2      	cmp	sl, r4
 8001364:	d908      	bls.n	8001378 <__udivmoddi4+0x1dc>
 8001366:	eb1c 0404 	adds.w	r4, ip, r4
 800136a:	f100 31ff 	add.w	r1, r0, #4294967295
 800136e:	d26b      	bcs.n	8001448 <__udivmoddi4+0x2ac>
 8001370:	45a2      	cmp	sl, r4
 8001372:	d969      	bls.n	8001448 <__udivmoddi4+0x2ac>
 8001374:	3802      	subs	r0, #2
 8001376:	4464      	add	r4, ip
 8001378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800137c:	fba0 8902 	umull	r8, r9, r0, r2
 8001380:	eba4 040a 	sub.w	r4, r4, sl
 8001384:	454c      	cmp	r4, r9
 8001386:	4641      	mov	r1, r8
 8001388:	46ce      	mov	lr, r9
 800138a:	d354      	bcc.n	8001436 <__udivmoddi4+0x29a>
 800138c:	d051      	beq.n	8001432 <__udivmoddi4+0x296>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d069      	beq.n	8001466 <__udivmoddi4+0x2ca>
 8001392:	1a5a      	subs	r2, r3, r1
 8001394:	eb64 040e 	sbc.w	r4, r4, lr
 8001398:	fa04 f505 	lsl.w	r5, r4, r5
 800139c:	fa22 f307 	lsr.w	r3, r2, r7
 80013a0:	40fc      	lsrs	r4, r7
 80013a2:	431d      	orrs	r5, r3
 80013a4:	e9c6 5400 	strd	r5, r4, [r6]
 80013a8:	2700      	movs	r7, #0
 80013aa:	e747      	b.n	800123c <__udivmoddi4+0xa0>
 80013ac:	4095      	lsls	r5, r2
 80013ae:	f1c2 0320 	rsb	r3, r2, #32
 80013b2:	fa21 f003 	lsr.w	r0, r1, r3
 80013b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013ba:	fbb0 f7f8 	udiv	r7, r0, r8
 80013be:	fa1f f985 	uxth.w	r9, r5
 80013c2:	fb08 0017 	mls	r0, r8, r7, r0
 80013c6:	fa24 f303 	lsr.w	r3, r4, r3
 80013ca:	4091      	lsls	r1, r2
 80013cc:	fb07 fc09 	mul.w	ip, r7, r9
 80013d0:	430b      	orrs	r3, r1
 80013d2:	0c19      	lsrs	r1, r3, #16
 80013d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013d8:	458c      	cmp	ip, r1
 80013da:	fa04 f402 	lsl.w	r4, r4, r2
 80013de:	d907      	bls.n	80013f0 <__udivmoddi4+0x254>
 80013e0:	1869      	adds	r1, r5, r1
 80013e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80013e6:	d231      	bcs.n	800144c <__udivmoddi4+0x2b0>
 80013e8:	458c      	cmp	ip, r1
 80013ea:	d92f      	bls.n	800144c <__udivmoddi4+0x2b0>
 80013ec:	3f02      	subs	r7, #2
 80013ee:	4429      	add	r1, r5
 80013f0:	eba1 010c 	sub.w	r1, r1, ip
 80013f4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013f8:	fb08 1c10 	mls	ip, r8, r0, r1
 80013fc:	fb00 fe09 	mul.w	lr, r0, r9
 8001400:	b299      	uxth	r1, r3
 8001402:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001406:	458e      	cmp	lr, r1
 8001408:	d907      	bls.n	800141a <__udivmoddi4+0x27e>
 800140a:	1869      	adds	r1, r5, r1
 800140c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001410:	d218      	bcs.n	8001444 <__udivmoddi4+0x2a8>
 8001412:	458e      	cmp	lr, r1
 8001414:	d916      	bls.n	8001444 <__udivmoddi4+0x2a8>
 8001416:	3802      	subs	r0, #2
 8001418:	4429      	add	r1, r5
 800141a:	eba1 010e 	sub.w	r1, r1, lr
 800141e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001422:	e73a      	b.n	800129a <__udivmoddi4+0xfe>
 8001424:	4637      	mov	r7, r6
 8001426:	4630      	mov	r0, r6
 8001428:	e708      	b.n	800123c <__udivmoddi4+0xa0>
 800142a:	460f      	mov	r7, r1
 800142c:	e6e6      	b.n	80011fc <__udivmoddi4+0x60>
 800142e:	4618      	mov	r0, r3
 8001430:	e6fb      	b.n	800122a <__udivmoddi4+0x8e>
 8001432:	4543      	cmp	r3, r8
 8001434:	d2ab      	bcs.n	800138e <__udivmoddi4+0x1f2>
 8001436:	ebb8 0102 	subs.w	r1, r8, r2
 800143a:	eb69 020c 	sbc.w	r2, r9, ip
 800143e:	3801      	subs	r0, #1
 8001440:	4696      	mov	lr, r2
 8001442:	e7a4      	b.n	800138e <__udivmoddi4+0x1f2>
 8001444:	4618      	mov	r0, r3
 8001446:	e7e8      	b.n	800141a <__udivmoddi4+0x27e>
 8001448:	4608      	mov	r0, r1
 800144a:	e795      	b.n	8001378 <__udivmoddi4+0x1dc>
 800144c:	4607      	mov	r7, r0
 800144e:	e7cf      	b.n	80013f0 <__udivmoddi4+0x254>
 8001450:	4681      	mov	r9, r0
 8001452:	e77b      	b.n	800134c <__udivmoddi4+0x1b0>
 8001454:	3802      	subs	r0, #2
 8001456:	442c      	add	r4, r5
 8001458:	e747      	b.n	80012ea <__udivmoddi4+0x14e>
 800145a:	f1ae 0e02 	sub.w	lr, lr, #2
 800145e:	442b      	add	r3, r5
 8001460:	e72f      	b.n	80012c2 <__udivmoddi4+0x126>
 8001462:	4638      	mov	r0, r7
 8001464:	e707      	b.n	8001276 <__udivmoddi4+0xda>
 8001466:	4637      	mov	r7, r6
 8001468:	e6e8      	b.n	800123c <__udivmoddi4+0xa0>
 800146a:	bf00      	nop

0800146c <__aeabi_idiv0>:
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <MX_GPIO_Init+0x13c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a48      	ldr	r2, [pc, #288]	; (80015ac <MX_GPIO_Init+0x13c>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b46      	ldr	r3, [pc, #280]	; (80015ac <MX_GPIO_Init+0x13c>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	4b43      	ldr	r3, [pc, #268]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a42      	ldr	r2, [pc, #264]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a36      	ldr	r2, [pc, #216]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	482b      	ldr	r0, [pc, #172]	; (80015b0 <MX_GPIO_Init+0x140>)
 8001504:	f002 fa91 	bl	8003a2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_GPIO_Init+0x144>)
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4826      	ldr	r0, [pc, #152]	; (80015b8 <MX_GPIO_Init+0x148>)
 800151e:	f002 f8df 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001522:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8001526:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001528:	2303      	movs	r3, #3
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4820      	ldr	r0, [pc, #128]	; (80015b8 <MX_GPIO_Init+0x148>)
 8001538:	f002 f8d2 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800153c:	f649 13d3 	movw	r3, #39379	; 0x99d3
 8001540:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4817      	ldr	r0, [pc, #92]	; (80015b0 <MX_GPIO_Init+0x140>)
 8001552:	f002 f8c5 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001556:	2320      	movs	r3, #32
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4810      	ldr	r0, [pc, #64]	; (80015b0 <MX_GPIO_Init+0x140>)
 800156e:	f002 f8b7 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001572:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8001576:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001578:	2303      	movs	r3, #3
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_GPIO_Init+0x14c>)
 8001588:	f002 f8aa 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800158c:	2304      	movs	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001590:	2303      	movs	r3, #3
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <MX_GPIO_Init+0x150>)
 80015a0:	f002 f89e 	bl	80036e0 <HAL_GPIO_Init>

}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	10110000 	.word	0x10110000
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b095      	sub	sp, #84	; 0x54
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	quadrar_gps_data_t GPSData;
	bool retc = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int32_t res = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
	float temp = 0;
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015da:	f001 fea3 	bl	8003324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f887 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f7ff ff45 	bl	8001470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015e6:	f000 faab 	bl	8001b40 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80015ea:	f000 f8eb 	bl	80017c4 <MX_RTC_Init>
  MX_UART4_Init();
 80015ee:	f000 fa23 	bl	8001a38 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80015f2:	f000 fa63 	bl	8001abc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  quadrar_gps_init();
 80015f6:	f001 fa6d 	bl	8002ad4 <quadrar_gps_init>

  DWT_Delay_Init();
 80015fa:	f000 ff97 	bl	800252c <DWT_Delay_Init>

  retc = Ds18b20_Init();
 80015fe:	f000 fc95 	bl	8001f2c <Ds18b20_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (!retc) {
 8001608:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d000      	beq.n	8001618 <main+0x54>
	while(1);
 8001616:	e7fe      	b.n	8001616 <main+0x52>
  }

  for(;;)
  {
	  res = quadrar_loraone_init();
 8001618:	f001 fbdc 	bl	8002dd4 <quadrar_loraone_init>
 800161c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(!res)
 800161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f9      	bne.n	8001618 <main+0x54>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  quadrar_gps_get_data(&GPSData);
 8001624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001628:	4618      	mov	r0, r3
 800162a:	f001 fa6f 	bl	8002b0c <quadrar_gps_get_data>
	  if(GPSData.fix == 'A')
 800162e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001632:	2b41      	cmp	r3, #65	; 0x41
 8001634:	d135      	bne.n	80016a2 <main+0xde>
	  {

		  memset(buf, 0x00, sizeof(buf));
 8001636:	463b      	mov	r3, r7
 8001638:	2232      	movs	r2, #50	; 0x32
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f8a2 	bl	8005786 <memset>
		  sprintf(buf, "0%.6f", GPSData.latitude);
 8001642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff07 	bl	8000458 <__aeabi_f2d>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	4638      	mov	r0, r7
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	4923      	ldr	r1, [pc, #140]	; (80016e4 <main+0x120>)
 8001656:	f004 fced 	bl	8006034 <siprintf>
		  quadrar_loraone_send_data(1, buf);
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	2001      	movs	r0, #1
 8001660:	f001 fc92 	bl	8002f88 <quadrar_loraone_send_data>
		  HAL_Delay(10000);
 8001664:	f242 7010 	movw	r0, #10000	; 0x2710
 8001668:	f001 feca 	bl	8003400 <HAL_Delay>

		  memset(buf, 0x00, sizeof(buf));
 800166c:	463b      	mov	r3, r7
 800166e:	2232      	movs	r2, #50	; 0x32
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f887 	bl	8005786 <memset>
		  sprintf(buf, "1%.6f", GPSData.longitude);
 8001678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe feec 	bl	8000458 <__aeabi_f2d>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4638      	mov	r0, r7
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	4917      	ldr	r1, [pc, #92]	; (80016e8 <main+0x124>)
 800168c:	f004 fcd2 	bl	8006034 <siprintf>
		  quadrar_loraone_send_data(1, buf);
 8001690:	463b      	mov	r3, r7
 8001692:	4619      	mov	r1, r3
 8001694:	2001      	movs	r0, #1
 8001696:	f001 fc77 	bl	8002f88 <quadrar_loraone_send_data>
		  HAL_Delay(10000);
 800169a:	f242 7010 	movw	r0, #10000	; 0x2710
 800169e:	f001 feaf 	bl	8003400 <HAL_Delay>
	  }

	  Ds18b20_ManualConvert(&temp);
 80016a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fcc0 	bl	800202c <Ds18b20_ManualConvert>
	  memset(buf, 0x00, sizeof(buf));
 80016ac:	463b      	mov	r3, r7
 80016ae:	2232      	movs	r2, #50	; 0x32
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 f867 	bl	8005786 <memset>
	  sprintf(buf, "2%.2f", temp);
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fecc 	bl	8000458 <__aeabi_f2d>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4638      	mov	r0, r7
 80016c6:	461a      	mov	r2, r3
 80016c8:	4623      	mov	r3, r4
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <main+0x128>)
 80016cc:	f004 fcb2 	bl	8006034 <siprintf>
	  quadrar_loraone_send_data(1, buf);
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	2001      	movs	r0, #1
 80016d6:	f001 fc57 	bl	8002f88 <quadrar_loraone_send_data>

	  HAL_Delay(10000);
 80016da:	f242 7010 	movw	r0, #10000	; 0x2710
 80016de:	f001 fe8f 	bl	8003400 <HAL_Delay>
	  quadrar_gps_get_data(&GPSData);
 80016e2:	e79f      	b.n	8001624 <main+0x60>
 80016e4:	08008ed8 	.word	0x08008ed8
 80016e8:	08008ee0 	.word	0x08008ee0
 80016ec:	08008ee8 	.word	0x08008ee8

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b096      	sub	sp, #88	; 0x58
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2234      	movs	r2, #52	; 0x34
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 f841 	bl	8005786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <SystemClock_Config+0xc4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001726:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <SystemClock_Config+0xc4>)
 8001728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800172c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800172e:	2306      	movs	r3, #6
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001732:	2301      	movs	r3, #1
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001736:	2301      	movs	r3, #1
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173a:	2310      	movs	r3, #16
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001742:	2300      	movs	r3, #0
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001746:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800174a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800174c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001750:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4618      	mov	r0, r3
 8001758:	f002 f980 	bl	8003a5c <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001762:	f000 f829 	bl	80017b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001766:	230f      	movs	r3, #15
 8001768:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2303      	movs	r3, #3
 800176c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fc9b 	bl	80040bc <HAL_RCC_ClockConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800178c:	f000 f814 	bl	80017b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001790:	2301      	movs	r3, #1
 8001792:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f002 ff1d 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80017a8:	f000 f806 	bl	80017b8 <Error_Handler>
  }
}
 80017ac:	bf00      	nop
 80017ae:	3758      	adds	r7, #88	; 0x58
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40007000 	.word	0x40007000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_RTC_Init+0xc0>)
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <MX_RTC_Init+0xc4>)
 80017e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_RTC_Init+0xc0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_RTC_Init+0xc0>)
 80017ea:	227f      	movs	r2, #127	; 0x7f
 80017ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_RTC_Init+0xc0>)
 80017f0:	22ff      	movs	r2, #255	; 0xff
 80017f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_RTC_Init+0xc0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_RTC_Init+0xc0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_RTC_Init+0xc0>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001806:	481f      	ldr	r0, [pc, #124]	; (8001884 <MX_RTC_Init+0xc0>)
 8001808:	f002 ffca 	bl	80047a0 <HAL_RTC_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001812:	f7ff ffd1 	bl	80017b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001816:	2300      	movs	r3, #0
 8001818:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800181a:	2300      	movs	r3, #0
 800181c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800181e:	2300      	movs	r3, #0
 8001820:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2201      	movs	r2, #1
 800182e:	4619      	mov	r1, r3
 8001830:	4814      	ldr	r0, [pc, #80]	; (8001884 <MX_RTC_Init+0xc0>)
 8001832:	f003 f830 	bl	8004896 <HAL_RTC_SetTime>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800183c:	f7ff ffbc 	bl	80017b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001840:	2301      	movs	r3, #1
 8001842:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001844:	2301      	movs	r3, #1
 8001846:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001848:	2301      	movs	r3, #1
 800184a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800184c:	2300      	movs	r3, #0
 800184e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	2201      	movs	r2, #1
 8001854:	4619      	mov	r1, r3
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <MX_RTC_Init+0xc0>)
 8001858:	f003 f8d1 	bl	80049fe <HAL_RTC_SetDate>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001862:	f7ff ffa9 	bl	80017b8 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001866:	2206      	movs	r2, #6
 8001868:	2100      	movs	r1, #0
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_RTC_Init+0xc0>)
 800186c:	f003 f9dc 	bl	8004c28 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001876:	f7ff ff9f 	bl	80017b8 <Error_Handler>
  }

}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002c4 	.word	0x200002c4
 8001888:	40002800 	.word	0x40002800

0800188c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_RTC_MspInit+0x30>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10a      	bne.n	80018b4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_RTC_MspInit+0x34>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2003      	movs	r0, #3
 80018aa:	f001 fea2 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f001 febb 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40002800 	.word	0x40002800
 80018c0:	424706d8 	.word	0x424706d8

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_MspInit+0x5c>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_MspInit+0x5c>)
 80018d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018d4:	6253      	str	r3, [r2, #36]	; 0x24
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_MspInit+0x5c>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_MspInit+0x5c>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_MspInit+0x5c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_MspInit+0x5c>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x5c>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x5c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6253      	str	r3, [r2, #36]	; 0x24
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x5c>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001912:	2007      	movs	r0, #7
 8001914:	f001 fe62 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <HardFault_Handler+0x4>

08001936 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <BusFault_Handler+0x4>

08001942 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <UsageFault_Handler+0x4>

08001948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f001 fd2a 	bl	80033c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <RTC_WKUP_IRQHandler+0x10>)
 800197e:	f003 fa05 	bl	8004d8c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002c4 	.word	0x200002c4

0800198c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <USART1_IRQHandler+0x10>)
 8001992:	f003 fb63 	bl	800505c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200003b4 	.word	0x200003b4

080019a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <UART4_IRQHandler+0x10>)
 80019a6:	f003 fb59 	bl	800505c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200004c4 	.word	0x200004c4

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f003 fe9a 	bl	800571c <__errno>
 80019e8:	4602      	mov	r2, r0
 80019ea:	230c      	movs	r3, #12
 80019ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20014000 	.word	0x20014000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000228 	.word	0x20000228
 8001a1c:	20000578 	.word	0x20000578

08001a20 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <SystemInit+0x14>)
 8001a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  static uint8_t rx_byte;

  huart4.Instance = UART4;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_UART4_Init+0x74>)
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <MX_UART4_Init+0x78>)
 8001a42:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_UART4_Init+0x74>)
 8001a46:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a4a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_UART4_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_UART4_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_UART4_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_UART4_Init+0x74>)
 8001a60:	220c      	movs	r2, #12
 8001a62:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_UART4_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_UART4_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]

  __HAL_RCC_UART4_CLK_ENABLE();
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_UART4_Init+0x7c>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <MX_UART4_Init+0x7c>)
 8001a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a7a:	6253      	str	r3, [r2, #36]	; 0x24
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_UART4_Init+0x7c>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <MX_UART4_Init+0x74>)
 8001a8a:	f003 f9ac 	bl	8004de6 <HAL_UART_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001a94:	f7ff fe90 	bl	80017b8 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart4, &rx_byte, sizeof(uint8_t));
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <MX_UART4_Init+0x80>)
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_UART4_Init+0x74>)
 8001a9e:	f003 fa88 	bl	8004fb2 <HAL_UART_Receive_IT>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200004c4 	.word	0x200004c4
 8001ab0:	40004c00 	.word	0x40004c00
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	2000022c 	.word	0x2000022c

08001abc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  static uint8_t rx_byte;

  huart1.Instance = USART1;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <MX_USART1_UART_Init+0x78>)
 8001ac6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001aca:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ace:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]

  __HAL_RCC_USART1_CLK_ENABLE();
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <MX_USART1_UART_Init+0x7c>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <MX_USART1_UART_Init+0x7c>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <MX_USART1_UART_Init+0x7c>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001b0e:	f003 f96a 	bl	8004de6 <HAL_UART_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8001b18:	f7ff fe4e 	bl	80017b8 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1, &rx_byte, sizeof(uint8_t));
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4907      	ldr	r1, [pc, #28]	; (8001b3c <MX_USART1_UART_Init+0x80>)
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <MX_USART1_UART_Init+0x74>)
 8001b22:	f003 fa46 	bl	8004fb2 <HAL_UART_Receive_IT>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200003b4 	.word	0x200003b4
 8001b34:	40013800 	.word	0x40013800
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	2000022d 	.word	0x2000022d

08001b40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b78:	f003 f935 	bl	8004de6 <HAL_UART_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b82:	f7ff fe19 	bl	80017b8 <Error_Handler>
  }

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000504 	.word	0x20000504
 8001b90:	40004400 	.word	0x40004400

08001b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_UART_MspInit+0x188>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d139      	bne.n	8001c2a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bb6:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	4a59      	ldr	r2, [pc, #356]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bc0:	6253      	str	r3, [r2, #36]	; 0x24
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a53      	ldr	r2, [pc, #332]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001be6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4848      	ldr	r0, [pc, #288]	; (8001d24 <HAL_UART_MspInit+0x190>)
 8001c04:	f001 fd6c 	bl	80036e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2030      	movs	r0, #48	; 0x30
 8001c0e:	f001 fcf0 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c12:	2030      	movs	r0, #48	; 0x30
 8001c14:	f001 fd09 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

    // Enable the interrupt
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	60da      	str	r2, [r3, #12]

    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c28:	e073      	b.n	8001d12 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_UART_MspInit+0x194>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d139      	bne.n	8001ca8 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c34:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a39      	ldr	r2, [pc, #228]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	61d3      	str	r3, [r2, #28]
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LoRa_TX_Pin|LoRa_RX_Pin;
 8001c64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c76:	2307      	movs	r3, #7
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	482a      	ldr	r0, [pc, #168]	; (8001d2c <HAL_UART_MspInit+0x198>)
 8001c82:	f001 fd2d 	bl	80036e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2025      	movs	r0, #37	; 0x25
 8001c8c:	f001 fcb1 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c90:	2025      	movs	r0, #37	; 0x25
 8001c92:	f001 fcca 	bl	800362a <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0220 	orr.w	r2, r2, #32
 8001ca4:	60da      	str	r2, [r3, #12]
}
 8001ca6:	e034      	b.n	8001d12 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_UART_MspInit+0x19c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12f      	bne.n	8001d12 <HAL_UART_MspInit+0x17e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6253      	str	r3, [r2, #36]	; 0x24
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_UART_MspInit+0x18c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_UART_MspInit+0x198>)
 8001cfe:	f001 fcef 	bl	80036e0 <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	60da      	str	r2, [r3, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3738      	adds	r7, #56	; 0x38
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40004c00 	.word	0x40004c00
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40004400 	.word	0x40004400

08001d34 <uart_send_data>:
}

/* USER CODE BEGIN 1 */

int8_t uart_send_data(uint8_t* buf, uint8_t size)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart1, buf, size,1000);
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4804      	ldr	r0, [pc, #16]	; (8001d5c <uart_send_data+0x28>)
 8001d4c:	f003 f898 	bl	8004e80 <HAL_UART_Transmit>
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003b4 	.word	0x200003b4

08001d60 <HAL_UART_RxCpltCallback>:
* @brief   : Callback for the Uart reception interrupt
* @param   : uart pointer structure
* @retval  : none
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	static uint8_t byte = 0;

	if(huart == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(huart, &byte, 1);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4953      	ldr	r1, [pc, #332]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f003 f91d 	bl	8004fb2 <HAL_UART_Receive_IT>
				}
			}
		}
		HAL_UART_Receive_IT(huart, &byte, 1);
	}
}
 8001d78:	e09e      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x158>
	else if (huart->Instance==USART1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_UART_RxCpltCallback+0x164>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d146      	bne.n	8001e12 <HAL_UART_RxCpltCallback+0xb2>
		if(byte)
 8001d84:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d03c      	beq.n	8001e06 <HAL_UART_RxCpltCallback+0xa6>
			if (lora.pos >= sizeof(lora.bufferRx))
 8001d8c:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001d8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d92:	2b63      	cmp	r3, #99	; 0x63
 8001d94:	d903      	bls.n	8001d9e <HAL_UART_RxCpltCallback+0x3e>
				lora.pos = 0;
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			if(byte != 0x0d && byte != 0x0a)
 8001d9e:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b0d      	cmp	r3, #13
 8001da4:	d00f      	beq.n	8001dc6 <HAL_UART_RxCpltCallback+0x66>
 8001da6:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d00b      	beq.n	8001dc6 <HAL_UART_RxCpltCallback+0x66>
				lora.bufferRx[lora.pos++] = byte;
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001db0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	4944      	ldr	r1, [pc, #272]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001db8:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001dbe:	7811      	ldrb	r1, [r2, #0]
 8001dc0:	4a41      	ldr	r2, [pc, #260]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001dc2:	54d1      	strb	r1, [r2, r3]
 8001dc4:	e01f      	b.n	8001e06 <HAL_UART_RxCpltCallback+0xa6>
			else if(lora.pos > 1)
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001dc8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	dd1a      	ble.n	8001e06 <HAL_UART_RxCpltCallback+0xa6>
				lora.bufferRx[lora.pos++] = 0;
 8001dd0:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001dd2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	493b      	ldr	r1, [pc, #236]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001dda:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8001dde:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001de0:	2100      	movs	r1, #0
 8001de2:	54d1      	strb	r1, [r2, r3]
				memset((char*)lora.bufferData, 0x00, sizeof(lora.bufferData));
 8001de4:	2264      	movs	r2, #100	; 0x64
 8001de6:	2100      	movs	r1, #0
 8001de8:	4838      	ldr	r0, [pc, #224]	; (8001ecc <HAL_UART_RxCpltCallback+0x16c>)
 8001dea:	f003 fccc 	bl	8005786 <memset>
				strcpy((char*)lora.bufferData,(char*)lora.bufferRx);
 8001dee:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001df0:	4836      	ldr	r0, [pc, #216]	; (8001ecc <HAL_UART_RxCpltCallback+0x16c>)
 8001df2:	f004 f94e 	bl	8006092 <strcpy>
				lora.pos = 0;
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				lora.dataComplete = 1;
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_UART_RxCpltCallback+0x168>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		HAL_UART_Receive_IT(huart, &byte, 1);
 8001e06:	2201      	movs	r2, #1
 8001e08:	492d      	ldr	r1, [pc, #180]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f003 f8d1 	bl	8004fb2 <HAL_UART_Receive_IT>
}
 8001e10:	e052      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x158>
	else if (huart->Instance==UART4)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <HAL_UART_RxCpltCallback+0x170>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d14d      	bne.n	8001eb8 <HAL_UART_RxCpltCallback+0x158>
		if(byte)
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d044      	beq.n	8001eae <HAL_UART_RxCpltCallback+0x14e>
			if (gps.pos >= sizeof(gps.bufferRx))
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e2a:	2b63      	cmp	r3, #99	; 0x63
 8001e2c:	d903      	bls.n	8001e36 <HAL_UART_RxCpltCallback+0xd6>
				gps.pos = 0;
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			if(byte != 0x0d && byte != 0x0a)
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b0d      	cmp	r3, #13
 8001e3c:	d00f      	beq.n	8001e5e <HAL_UART_RxCpltCallback+0xfe>
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d00b      	beq.n	8001e5e <HAL_UART_RxCpltCallback+0xfe>
				gps.bufferRx[gps.pos++] = byte;
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	4921      	ldr	r1, [pc, #132]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e50:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001e56:	7811      	ldrb	r1, [r2, #0]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e5a:	54d1      	strb	r1, [r2, r3]
 8001e5c:	e027      	b.n	8001eae <HAL_UART_RxCpltCallback+0x14e>
			else if(gps.pos > 1)
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	dd22      	ble.n	8001eae <HAL_UART_RxCpltCallback+0x14e>
				gps.bufferRx[gps.pos++] = 0;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e72:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	54d1      	strb	r1, [r2, r3]
				gps.pos = 0;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				if(strncmp(gps.bufferRx, "$GPRMC", strlen ("$GPRMC")) == 0)
 8001e84:	2206      	movs	r2, #6
 8001e86:	4914      	ldr	r1, [pc, #80]	; (8001ed8 <HAL_UART_RxCpltCallback+0x178>)
 8001e88:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001e8a:	f004 f90a 	bl	80060a2 <strncmp>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10c      	bne.n	8001eae <HAL_UART_RxCpltCallback+0x14e>
					memset((char*)gps.bufferData, 0x00, sizeof(gps.bufferData));
 8001e94:	2264      	movs	r2, #100	; 0x64
 8001e96:	2100      	movs	r1, #0
 8001e98:	4810      	ldr	r0, [pc, #64]	; (8001edc <HAL_UART_RxCpltCallback+0x17c>)
 8001e9a:	f003 fc74 	bl	8005786 <memset>
					strcpy((char*)gps.bufferData,(char*)gps.bufferRx);
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001ea0:	480e      	ldr	r0, [pc, #56]	; (8001edc <HAL_UART_RxCpltCallback+0x17c>)
 8001ea2:	f004 f8f6 	bl	8006092 <strcpy>
					gps.dataComplete = 1;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_UART_RxCpltCallback+0x174>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		HAL_UART_Receive_IT(huart, &byte, 1);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_UART_RxCpltCallback+0x160>)
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f003 f87d 	bl	8004fb2 <HAL_UART_Receive_IT>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000022e 	.word	0x2000022e
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	200003f4 	.word	0x200003f4
 8001ecc:	20000458 	.word	0x20000458
 8001ed0:	40004c00 	.word	0x40004c00
 8001ed4:	200002e4 	.word	0x200002e4
 8001ed8:	08008ef0 	.word	0x08008ef0
 8001edc:	20000348 	.word	0x20000348

08001ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ee0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ee2:	e003      	b.n	8001eec <LoopCopyDataInit>

08001ee4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ee6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ee8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001eea:	3104      	adds	r1, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001eec:	480a      	ldr	r0, [pc, #40]	; (8001f18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ef0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ef2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ef4:	d3f6      	bcc.n	8001ee4 <CopyDataInit>
  ldr r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ef8:	e002      	b.n	8001f00 <LoopFillZerobss>

08001efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001efc:	f842 3b04 	str.w	r3, [r2], #4

08001f00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f04:	d3f9      	bcc.n	8001efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f06:	f7ff fd8b 	bl	8001a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f003 fc0d 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f0e:	f7ff fb59 	bl	80015c4 <main>
  bx lr
 8001f12:	4770      	bx	lr
  ldr r3, =_sidata
 8001f14:	08009370 	.word	0x08009370
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f1c:	2000020c 	.word	0x2000020c
  ldr r2, =_sbss
 8001f20:	2000020c 	.word	0x2000020c
  ldr r3, = _ebss
 8001f24:	20000574 	.word	0x20000574

08001f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC1_IRQHandler>
	...

08001f2c <Ds18b20_Init>:
    osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
    Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
    uint8_t	Ds18b20TryToFind=5;
 8001f32:	2305      	movs	r3, #5
 8001f34:	71fb      	strb	r3, [r7, #7]
    do
    {
	OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8001f36:	2201      	movs	r2, #1
 8001f38:	4937      	ldr	r1, [pc, #220]	; (8002018 <Ds18b20_Init+0xec>)
 8001f3a:	4838      	ldr	r0, [pc, #224]	; (800201c <Ds18b20_Init+0xf0>)
 8001f3c:	f000 fb8f 	bl	800265e <OneWire_Init>
	TempSensorCount = 0;
 8001f40:	4b37      	ldr	r3, [pc, #220]	; (8002020 <Ds18b20_Init+0xf4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() < 3000)
 8001f46:	e002      	b.n	8001f4e <Ds18b20_Init+0x22>
	    Ds18b20Delay(100);
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f001 fa59 	bl	8003400 <HAL_Delay>
	while(HAL_GetTick() < 3000)
 8001f4e:	f001 fa4d 	bl	80033ec <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d9f5      	bls.n	8001f48 <Ds18b20_Init+0x1c>
	OneWireDevices = OneWire_First(&OneWire);
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <Ds18b20_Init+0xf0>)
 8001f5e:	f000 fc53 	bl	8002808 <OneWire_First>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <Ds18b20_Init+0xf8>)
 8001f68:	701a      	strb	r2, [r3, #0]
	while (OneWireDevices)
 8001f6a:	e019      	b.n	8001fa0 <Ds18b20_Init+0x74>
	{
	    Ds18b20Delay(100);
 8001f6c:	2064      	movs	r0, #100	; 0x64
 8001f6e:	f001 fa47 	bl	8003400 <HAL_Delay>
	    TempSensorCount++;
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <Ds18b20_Init+0xf4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <Ds18b20_Init+0xf4>)
 8001f7c:	701a      	strb	r2, [r3, #0]
	    OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <Ds18b20_Init+0xf4>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4a28      	ldr	r2, [pc, #160]	; (8002028 <Ds18b20_Init+0xfc>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4823      	ldr	r0, [pc, #140]	; (800201c <Ds18b20_Init+0xf0>)
 8001f8e:	f000 fd4e 	bl	8002a2e <OneWire_GetFullROM>
	    OneWireDevices = OneWire_Next(&OneWire);
 8001f92:	4822      	ldr	r0, [pc, #136]	; (800201c <Ds18b20_Init+0xf0>)
 8001f94:	f000 fc48 	bl	8002828 <OneWire_Next>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <Ds18b20_Init+0xf8>)
 8001f9e:	701a      	strb	r2, [r3, #0]
	while (OneWireDevices)
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <Ds18b20_Init+0xf8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e1      	bne.n	8001f6c <Ds18b20_Init+0x40>
	}
	if(TempSensorCount>0)
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <Ds18b20_Init+0xf4>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <Ds18b20_Init+0x92>
	    break;
	Ds18b20TryToFind--;
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
    } while(Ds18b20TryToFind>0);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1bc      	bne.n	8001f36 <Ds18b20_Init+0xa>
 8001fbc:	e000      	b.n	8001fc0 <Ds18b20_Init+0x94>
	    break;
 8001fbe:	bf00      	nop

    if(Ds18b20TryToFind==0)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <Ds18b20_Init+0x9e>
	return false;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e022      	b.n	8002010 <Ds18b20_Init+0xe4>

    for (uint8_t i = 0; i < TempSensorCount; i++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71bb      	strb	r3, [r7, #6]
 8001fce:	e019      	b.n	8002004 <Ds18b20_Init+0xd8>
	Ds18b20Delay(50);
 8001fd0:	2032      	movs	r0, #50	; 0x32
 8001fd2:	f001 fa15 	bl	8003400 <HAL_Delay>
	DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <Ds18b20_Init+0xfc>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	220c      	movs	r2, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480e      	ldr	r0, [pc, #56]	; (800201c <Ds18b20_Init+0xf0>)
 8001fe4:	f000 f9a2 	bl	800232c <DS18B20_SetResolution>
	Ds18b20Delay(50);
 8001fe8:	2032      	movs	r0, #50	; 0x32
 8001fea:	f001 fa09 	bl	8003400 <HAL_Delay>
	DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8001fee:	79bb      	ldrb	r3, [r7, #6]
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <Ds18b20_Init+0xfc>)
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <Ds18b20_Init+0xf0>)
 8001ffa:	f000 fa2f 	bl	800245c <DS18B20_DisableAlarmTemperature>
    for (uint8_t i = 0; i < TempSensorCount; i++) {
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	3301      	adds	r3, #1
 8002002:	71bb      	strb	r3, [r7, #6]
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <Ds18b20_Init+0xf4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	79ba      	ldrb	r2, [r7, #6]
 800200a:	429a      	cmp	r2, r3
 800200c:	d3e0      	bcc.n	8001fd0 <Ds18b20_Init+0xa4>
    }
    return true;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40020000 	.word	0x40020000
 800201c:	20000558 	.word	0x20000558
 8002020:	2000022f 	.word	0x2000022f
 8002024:	20000544 	.word	0x20000544
 8002028:	20000548 	.word	0x20000548

0800202c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool	Ds18b20_ManualConvert(float* temperature)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
    if(Ds18b20Timeout==0)
	return false;
    else
	return true;
#else
    Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <Ds18b20_ManualConvert+0xe4>)
 8002036:	f44f 7248 	mov.w	r2, #800	; 0x320
 800203a:	801a      	strh	r2, [r3, #0]
    DS18B20_StartAll(&OneWire);
 800203c:	4835      	ldr	r0, [pc, #212]	; (8002114 <Ds18b20_ManualConvert+0xe8>)
 800203e:	f000 f86f 	bl	8002120 <DS18B20_StartAll>
    Ds18b20Delay(100);
 8002042:	2064      	movs	r0, #100	; 0x64
 8002044:	f001 f9dc 	bl	8003400 <HAL_Delay>
    while (!DS18B20_AllDone(&OneWire))
 8002048:	e00c      	b.n	8002064 <Ds18b20_ManualConvert+0x38>
    {
	Ds18b20Delay(10);
 800204a:	200a      	movs	r0, #10
 800204c:	f001 f9d8 	bl	8003400 <HAL_Delay>
	Ds18b20Timeout-=1;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <Ds18b20_ManualConvert+0xe4>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <Ds18b20_ManualConvert+0xe4>)
 800205a:	801a      	strh	r2, [r3, #0]
	if(Ds18b20Timeout==0)
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <Ds18b20_ManualConvert+0xe4>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <Ds18b20_ManualConvert+0x46>
    while (!DS18B20_AllDone(&OneWire))
 8002064:	482b      	ldr	r0, [pc, #172]	; (8002114 <Ds18b20_ManualConvert+0xe8>)
 8002066:	f000 fa54 	bl	8002512 <DS18B20_AllDone>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ec      	beq.n	800204a <Ds18b20_ManualConvert+0x1e>
 8002070:	e000      	b.n	8002074 <Ds18b20_ManualConvert+0x48>
	    break;
 8002072:	bf00      	nop
    }
    if(Ds18b20Timeout>0)
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <Ds18b20_ManualConvert+0xe4>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02c      	beq.n	80020d6 <Ds18b20_ManualConvert+0xaa>
    {
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e023      	b.n	80020ca <Ds18b20_ManualConvert+0x9e>
	{
	    Ds18b20Delay(100);
 8002082:	2064      	movs	r0, #100	; 0x64
 8002084:	f001 f9bc 	bl	8003400 <HAL_Delay>
	    ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4a22      	ldr	r2, [pc, #136]	; (8002118 <Ds18b20_ManualConvert+0xec>)
 800208e:	1899      	adds	r1, r3, r2
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	3308      	adds	r3, #8
 8002096:	4a20      	ldr	r2, [pc, #128]	; (8002118 <Ds18b20_ManualConvert+0xec>)
 8002098:	4413      	add	r3, r2
 800209a:	7bfc      	ldrb	r4, [r7, #15]
 800209c:	461a      	mov	r2, r3
 800209e:	481d      	ldr	r0, [pc, #116]	; (8002114 <Ds18b20_ManualConvert+0xe8>)
 80020a0:	f000 f852 	bl	8002148 <DS18B20_Read>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4619      	mov	r1, r3
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <Ds18b20_ManualConvert+0xec>)
 80020aa:	0123      	lsls	r3, r4, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	330c      	adds	r3, #12
 80020b0:	460a      	mov	r2, r1
 80020b2:	701a      	strb	r2, [r3, #0]
	    *temperature = ds18b20[i].Temperature;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	4a18      	ldr	r2, [pc, #96]	; (8002118 <Ds18b20_ManualConvert+0xec>)
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	3308      	adds	r3, #8
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	3301      	adds	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <Ds18b20_ManualConvert+0xf0>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3d6      	bcc.n	8002082 <Ds18b20_ManualConvert+0x56>
 80020d4:	e011      	b.n	80020fa <Ds18b20_ManualConvert+0xce>
	}
    }
    else
    {
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	73bb      	strb	r3, [r7, #14]
 80020da:	e009      	b.n	80020f0 <Ds18b20_ManualConvert+0xc4>
	    ds18b20[i].DataIsValid = false;
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <Ds18b20_ManualConvert+0xec>)
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	330c      	adds	r3, #12
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73bb      	strb	r3, [r7, #14]
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <Ds18b20_ManualConvert+0xf0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	7bba      	ldrb	r2, [r7, #14]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3f0      	bcc.n	80020dc <Ds18b20_ManualConvert+0xb0>
    }
    if(Ds18b20Timeout==0)
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <Ds18b20_ManualConvert+0xe4>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <Ds18b20_ManualConvert+0xda>
	return false;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <Ds18b20_ManualConvert+0xdc>
    else
	return true;
 8002106:	2301      	movs	r3, #1
#endif
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}
 8002110:	20000230 	.word	0x20000230
 8002114:	20000558 	.word	0x20000558
 8002118:	20000548 	.word	0x20000548
 800211c:	2000022f 	.word	0x2000022f

08002120 <DS18B20_StartAll>:

    return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /* Reset pulse */
    OneWire_Reset(OneWire);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 faaf 	bl	800268c <OneWire_Reset>
    /* Skip rom */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800212e:	21cc      	movs	r1, #204	; 0xcc
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fb27 	bl	8002784 <OneWire_WriteByte>
    /* Start conversion on all connected devices */
    OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002136:	2144      	movs	r1, #68	; 0x44
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fb23 	bl	8002784 <OneWire_WriteByte>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
    uint16_t temperature;
    uint8_t resolution;
    int8_t digit, minus = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    float decimal;
    uint8_t i = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	77fb      	strb	r3, [r7, #31]
    uint8_t data[9];
    uint8_t crc;

    /* Check if device is DS18B20 */
    if (!DS18B20_Is(ROM)) {
 800215e:	68b8      	ldr	r0, [r7, #8]
 8002160:	f000 f96c 	bl	800243c <DS18B20_Is>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <DS18B20_Read+0x26>
	return false;
 800216a:	2300      	movs	r3, #0
 800216c:	e0d8      	b.n	8002320 <DS18B20_Read+0x1d8>
    }

    /* Check if line is released, if it is, then conversion is complete */
    if (!OneWire_ReadBit(OneWire))
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fae4 	bl	800273c <OneWire_ReadBit>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <DS18B20_Read+0x36>
    {
	/* Conversion is not finished yet */
	return false;
 800217a:	2300      	movs	r3, #0
 800217c:	e0d0      	b.n	8002320 <DS18B20_Read+0x1d8>
    }

    /* Reset line */
    OneWire_Reset(OneWire);
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa84 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fc33 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800218c:	21be      	movs	r1, #190	; 0xbe
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 faf8 	bl	8002784 <OneWire_WriteByte>

    /* Get data */
    for (i = 0; i < 9; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e00d      	b.n	80021b6 <DS18B20_Read+0x6e>
    {
	/* Read byte by byte */
	data[i] = OneWire_ReadByte(OneWire);
 800219a:	7ffc      	ldrb	r4, [r7, #31]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fb10 	bl	80027c2 <OneWire_ReadByte>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	4423      	add	r3, r4
 80021ac:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < 9; i++)
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	3301      	adds	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d9ee      	bls.n	800219a <DS18B20_Read+0x52>
    }

    /* Calculate CRC */
    crc = OneWire_CRC8(data, 8);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2108      	movs	r1, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fc4e 	bl	8002a64 <OneWire_CRC8>
 80021c8:	4603      	mov	r3, r0
 80021ca:	77bb      	strb	r3, [r7, #30]

    /* Check if CRC is ok */
    if (crc != data[8])
 80021cc:	7f3b      	ldrb	r3, [r7, #28]
 80021ce:	7fba      	ldrb	r2, [r7, #30]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <DS18B20_Read+0x90>
	/* CRC invalid */
	return 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e0a3      	b.n	8002320 <DS18B20_Read+0x1d8>


    /* First two bytes of scratchpad are temperature values */
    temperature = data[0] | (data[1] << 8);
 80021d8:	7d3b      	ldrb	r3, [r7, #20]
 80021da:	b21a      	sxth	r2, r3
 80021dc:	7d7b      	ldrb	r3, [r7, #21]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    /* Reset line */
    OneWire_Reset(OneWire);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fa4f 	bl	800268c <OneWire_Reset>

    /* Check if temperature is negative */
    if (temperature & 0x8000)
 80021ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da05      	bge.n	8002202 <DS18B20_Read+0xba>
    {
	/* Two's complement, temperature is negative */
	temperature = ~temperature + 1;
 80021f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021f8:	425b      	negs	r3, r3
 80021fa:	84fb      	strh	r3, [r7, #38]	; 0x26
	minus = 1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    }


    /* Get sensor resolution */
    resolution = ((data[4] & 0x60) >> 5) + 9;
 8002202:	7e3b      	ldrb	r3, [r7, #24]
 8002204:	115b      	asrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3309      	adds	r3, #9
 8002210:	777b      	strb	r3, [r7, #29]


    /* Store temperature integer digits and decimal digits */
    digit = temperature >> 4;
 8002212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	b29b      	uxth	r3, r3
 8002218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    digit |= ((temperature >> 8) & 0x7) << 4;
 800221c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	b25b      	sxtb	r3, r3
 8002226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800222a:	b25a      	sxtb	r2, r3
 800222c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002230:	4313      	orrs	r3, r2
 8002232:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    /* Store decimal digits */
    switch (resolution)
 8002236:	7f7b      	ldrb	r3, [r7, #29]
 8002238:	3b09      	subs	r3, #9
 800223a:	2b03      	cmp	r3, #3
 800223c:	d850      	bhi.n	80022e0 <DS18B20_Read+0x198>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <DS18B20_Read+0xfc>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	08002279 	.word	0x08002279
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080022c1 	.word	0x080022c1
    {
	case 9:
	decimal = (temperature >> 3) & 0x01;
 8002254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	b29b      	uxth	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd54 	bl	8000d0c <__aeabi_i2f>
 8002264:	4603      	mov	r3, r0
 8002266:	623b      	str	r3, [r7, #32]
	decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002268:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800226c:	6a38      	ldr	r0, [r7, #32]
 800226e:	f7fe fda1 	bl	8000db4 <__aeabi_fmul>
 8002272:	4603      	mov	r3, r0
 8002274:	623b      	str	r3, [r7, #32]
	break;
 8002276:	e038      	b.n	80022ea <DS18B20_Read+0x1a2>
	case 10:
	decimal = (temperature >> 2) & 0x03;
 8002278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	b29b      	uxth	r3, r3
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd42 	bl	8000d0c <__aeabi_i2f>
 8002288:	4603      	mov	r3, r0
 800228a:	623b      	str	r3, [r7, #32]
	decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800228c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002290:	6a38      	ldr	r0, [r7, #32]
 8002292:	f7fe fd8f 	bl	8000db4 <__aeabi_fmul>
 8002296:	4603      	mov	r3, r0
 8002298:	623b      	str	r3, [r7, #32]
	break;
 800229a:	e026      	b.n	80022ea <DS18B20_Read+0x1a2>
	case 11:
	decimal = (temperature >> 1) & 0x07;
 800229c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fd30 	bl	8000d0c <__aeabi_i2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	623b      	str	r3, [r7, #32]
	decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80022b0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80022b4:	6a38      	ldr	r0, [r7, #32]
 80022b6:	f7fe fd7d 	bl	8000db4 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	623b      	str	r3, [r7, #32]
	break;
 80022be:	e014      	b.n	80022ea <DS18B20_Read+0x1a2>
	case 12:
	decimal = temperature & 0x0F;
 80022c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fd20 	bl	8000d0c <__aeabi_i2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	623b      	str	r3, [r7, #32]
	decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80022d0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80022d4:	6a38      	ldr	r0, [r7, #32]
 80022d6:	f7fe fd6d 	bl	8000db4 <__aeabi_fmul>
 80022da:	4603      	mov	r3, r0
 80022dc:	623b      	str	r3, [r7, #32]
	break;
 80022de:	e004      	b.n	80022ea <DS18B20_Read+0x1a2>
	default:
	decimal = 0xFF;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <DS18B20_Read+0x1e0>)
 80022e2:	623b      	str	r3, [r7, #32]
	digit = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    }

    /* Check for negative part */
    decimal = digit + decimal;
 80022ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fd0c 	bl	8000d0c <__aeabi_i2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4619      	mov	r1, r3
 80022f8:	6a38      	ldr	r0, [r7, #32]
 80022fa:	f7fe fc53 	bl	8000ba4 <__addsf3>
 80022fe:	4603      	mov	r3, r0
 8002300:	623b      	str	r3, [r7, #32]
    if (minus)
 8002302:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <DS18B20_Read+0x1d0>
	decimal = 0 - decimal;
 800230a:	6a39      	ldr	r1, [r7, #32]
 800230c:	f04f 0000 	mov.w	r0, #0
 8002310:	f7fe fc46 	bl	8000ba0 <__aeabi_fsub>
 8002314:	4603      	mov	r3, r0
 8002316:	623b      	str	r3, [r7, #32]


    /* Set to pointer */
    *destination = decimal;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a3a      	ldr	r2, [r7, #32]
 800231c:	601a      	str	r2, [r3, #0]

    /* Print temperature */
    //printf("\r\nTemperature:[%0.1f]", decimal);

    /* Return 1, temperature valid */
    return true;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	372c      	adds	r7, #44	; 0x2c
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}
 8002328:	437f0000 	.word	0x437f0000

0800232c <DS18B20_SetResolution>:
    /* Return 9 - 12 value according to number of bits */
    return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	71fb      	strb	r3, [r7, #7]
    uint8_t th, tl, conf;
    if (!DS18B20_Is(ROM))
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f000 f87e 	bl	800243c <DS18B20_Is>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <DS18B20_SetResolution+0x1e>
	return 0;
 8002346:	2300      	movs	r3, #0
 8002348:	e074      	b.n	8002434 <DS18B20_SetResolution+0x108>


    /* Reset line */
    OneWire_Reset(OneWire);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f99e 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fb4d 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002358:	21be      	movs	r1, #190	; 0xbe
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fa12 	bl	8002784 <OneWire_WriteByte>

    /* Ignore first 2 bytes */
    OneWire_ReadByte(OneWire);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fa2e 	bl	80027c2 <OneWire_ReadByte>
    OneWire_ReadByte(OneWire);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fa2b 	bl	80027c2 <OneWire_ReadByte>

    th = OneWire_ReadByte(OneWire);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fa28 	bl	80027c2 <OneWire_ReadByte>
 8002372:	4603      	mov	r3, r0
 8002374:	75bb      	strb	r3, [r7, #22]
    tl = OneWire_ReadByte(OneWire);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa23 	bl	80027c2 <OneWire_ReadByte>
 800237c:	4603      	mov	r3, r0
 800237e:	757b      	strb	r3, [r7, #21]
    conf = OneWire_ReadByte(OneWire);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fa1e 	bl	80027c2 <OneWire_ReadByte>
 8002386:	4603      	mov	r3, r0
 8002388:	75fb      	strb	r3, [r7, #23]

    if (resolution == DS18B20_Resolution_9bits)
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d108      	bne.n	80023a2 <DS18B20_SetResolution+0x76>
    {
	conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002396:	75fb      	strb	r3, [r7, #23]
	conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	f023 0320 	bic.w	r3, r3, #32
 800239e:	75fb      	strb	r3, [r7, #23]
 80023a0:	e022      	b.n	80023e8 <DS18B20_SetResolution+0xbc>
    }
    else if (resolution == DS18B20_Resolution_10bits)
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b0a      	cmp	r3, #10
 80023a6:	d108      	bne.n	80023ba <DS18B20_SetResolution+0x8e>
    {
	conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ae:	75fb      	strb	r3, [r7, #23]
	conf |= 1 << DS18B20_RESOLUTION_R0;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	f043 0320 	orr.w	r3, r3, #32
 80023b6:	75fb      	strb	r3, [r7, #23]
 80023b8:	e016      	b.n	80023e8 <DS18B20_SetResolution+0xbc>
    }
    else if (resolution == DS18B20_Resolution_11bits)
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b0b      	cmp	r3, #11
 80023be:	d108      	bne.n	80023d2 <DS18B20_SetResolution+0xa6>
    {
	conf |= 1 << DS18B20_RESOLUTION_R1;
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c6:	75fb      	strb	r3, [r7, #23]
	conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	f023 0320 	bic.w	r3, r3, #32
 80023ce:	75fb      	strb	r3, [r7, #23]
 80023d0:	e00a      	b.n	80023e8 <DS18B20_SetResolution+0xbc>
    }
    else if (resolution == DS18B20_Resolution_12bits)
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d107      	bne.n	80023e8 <DS18B20_SetResolution+0xbc>
    {
	conf |= 1 << DS18B20_RESOLUTION_R1;
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023de:	75fb      	strb	r3, [r7, #23]
	conf |= 1 << DS18B20_RESOLUTION_R0;
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	75fb      	strb	r3, [r7, #23]
    }

    /* Reset line */
    OneWire_Reset(OneWire);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f94f 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fafe 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80023f6:	214e      	movs	r1, #78	; 0x4e
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f9c3 	bl	8002784 <OneWire_WriteByte>

    /* Write bytes */
    OneWire_WriteByte(OneWire, th);
 80023fe:	7dbb      	ldrb	r3, [r7, #22]
 8002400:	4619      	mov	r1, r3
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f9be 	bl	8002784 <OneWire_WriteByte>
    OneWire_WriteByte(OneWire, tl);
 8002408:	7d7b      	ldrb	r3, [r7, #21]
 800240a:	4619      	mov	r1, r3
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f9b9 	bl	8002784 <OneWire_WriteByte>
    OneWire_WriteByte(OneWire, conf);
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	4619      	mov	r1, r3
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f9b4 	bl	8002784 <OneWire_WriteByte>

    /* Reset line */
    OneWire_Reset(OneWire);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f935 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fae4 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Copy scratchpad to EEPROM of DS18B20 */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800242a:	2148      	movs	r1, #72	; 0x48
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f9a9 	bl	8002784 <OneWire_WriteByte>

    return 1;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    /* Checks if first byte is equal to DS18B20's family code */
    if (*ROM == DS18B20_FAMILY_CODE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b28      	cmp	r3, #40	; 0x28
 800244a:	d101      	bne.n	8002450 <DS18B20_Is+0x14>
	return 1;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <DS18B20_Is+0x16>

    return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <DS18B20_DisableAlarmTemperature>:

    return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
    uint8_t tl, th, conf;
    if (!DS18B20_Is(ROM))
 8002466:	6838      	ldr	r0, [r7, #0]
 8002468:	f7ff ffe8 	bl	800243c <DS18B20_Is>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <DS18B20_DisableAlarmTemperature+0x1a>
	return 0;
 8002472:	2300      	movs	r3, #0
 8002474:	e049      	b.n	800250a <DS18B20_DisableAlarmTemperature+0xae>

    /* Reset line */
    OneWire_Reset(OneWire);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f908 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fab7 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002484:	21be      	movs	r1, #190	; 0xbe
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f97c 	bl	8002784 <OneWire_WriteByte>

    /* Ignore first 2 bytes */
    OneWire_ReadByte(OneWire);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f998 	bl	80027c2 <OneWire_ReadByte>
    OneWire_ReadByte(OneWire);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f995 	bl	80027c2 <OneWire_ReadByte>

    th = OneWire_ReadByte(OneWire);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f992 	bl	80027c2 <OneWire_ReadByte>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
    tl = OneWire_ReadByte(OneWire);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f98d 	bl	80027c2 <OneWire_ReadByte>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73bb      	strb	r3, [r7, #14]
    conf = OneWire_ReadByte(OneWire);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f988 	bl	80027c2 <OneWire_ReadByte>
 80024b2:	4603      	mov	r3, r0
 80024b4:	737b      	strb	r3, [r7, #13]

    th = 125;
 80024b6:	237d      	movs	r3, #125	; 0x7d
 80024b8:	73fb      	strb	r3, [r7, #15]
    tl = (uint8_t)-55;
 80024ba:	23c9      	movs	r3, #201	; 0xc9
 80024bc:	73bb      	strb	r3, [r7, #14]

    /* Reset line */
    OneWire_Reset(OneWire);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8e4 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa93 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80024cc:	214e      	movs	r1, #78	; 0x4e
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f958 	bl	8002784 <OneWire_WriteByte>

    /* Write bytes */
    OneWire_WriteByte(OneWire, th);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	4619      	mov	r1, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f953 	bl	8002784 <OneWire_WriteByte>
    OneWire_WriteByte(OneWire, tl);
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f94e 	bl	8002784 <OneWire_WriteByte>
    OneWire_WriteByte(OneWire, conf);
 80024e8:	7b7b      	ldrb	r3, [r7, #13]
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f949 	bl	8002784 <OneWire_WriteByte>

    /* Reset line */
    OneWire_Reset(OneWire);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8ca 	bl	800268c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa79 	bl	80029f2 <OneWire_SelectWithPointer>
    /* Copy scratchpad to EEPROM of DS18B20 */
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002500:	2148      	movs	r1, #72	; 0x48
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f93e 	bl	8002784 <OneWire_WriteByte>

    return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <DS18B20_AllDone>:
    /* Start alarm search */
    return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
    /* If read bit is low, then device is not finished yet with calculation temperature */
    return OneWire_ReadBit(OneWire);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f90e 	bl	800273c <OneWire_ReadBit>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <DWT_Delay_Init+0x58>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <DWT_Delay_Init+0x58>)
 8002536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800253a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <DWT_Delay_Init+0x58>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <DWT_Delay_Init+0x58>)
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002546:	60d3      	str	r3, [r2, #12]
     
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <DWT_Delay_Init+0x5c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <DWT_Delay_Init+0x5c>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <DWT_Delay_Init+0x5c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <DWT_Delay_Init+0x5c>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6013      	str	r3, [r2, #0]
     
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <DWT_Delay_Init+0x5c>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
     
     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8002566:	bf00      	nop
     __ASM volatile ("NOP");
 8002568:	bf00      	nop
  __ASM volatile ("NOP");
 800256a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <DWT_Delay_Init+0x5c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8002578:	2301      	movs	r3, #1
  }
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000edf0 	.word	0xe000edf0
 8002588:	e0001000 	.word	0xe0001000

0800258c <dwt_delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void dwt_delay_us(volatile uint32_t microseconds)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <dwt_delay_us+0x3c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800259a:	f001 ff8d 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 800259e:	4602      	mov	r2, r0
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <dwt_delay_us+0x40>)
 80025a2:	fba3 2302 	umull	r2, r3, r3, r2
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80025b0:	bf00      	nop
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <dwt_delay_us+0x3c>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad2      	subs	r2, r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3f8      	bcc.n	80025b2 <dwt_delay_us+0x26>
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e0001000 	.word	0xe0001000
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <ONEWIRE_LOW>:
*/
#include "onewire.h"
#include "dwt_stm32_delay.h"

inline void ONEWIRE_LOW(OneWire_t *gp)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
    gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	889b      	ldrh	r3, [r3, #4]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	619a      	str	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <ONEWIRE_HIGH>:
inline void ONEWIRE_HIGH(OneWire_t *gp)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
    gp->GPIOx->BSRR = gp->GPIO_Pin;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	889a      	ldrh	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	619a      	str	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b088      	sub	sp, #32
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef	gpinit;
    gpinit.Mode = GPIO_MODE_INPUT;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
    gpinit.Pin = gp->GPIO_Pin;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	889b      	ldrh	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f001 f85a 	bl	80036e0 <HAL_GPIO_Init>
}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef	gpinit;
    gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800263c:	2311      	movs	r3, #17
 800263e:	613b      	str	r3, [r7, #16]
    gpinit.Pin = gp->GPIO_Pin;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	889b      	ldrh	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f107 020c 	add.w	r2, r7, #12
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f845 	bl	80036e0 <HAL_GPIO_Init>

}
 8002656:	bf00      	nop
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
//    HAL_TIM_Base_Start(&_DS18B20_TIMER);

    OneWireStruct->GPIOx = GPIOx;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	601a      	str	r2, [r3, #0]
    OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	809a      	strh	r2, [r3, #4]
    ONEWIRE_OUTPUT(OneWireStruct);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff ffdb 	bl	8002634 <ONEWIRE_OUTPUT>
    ONEWIRE_HIGH(OneWireStruct);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff ffb5 	bl	80025ee <ONEWIRE_HIGH>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
    uint8_t i;

    __disable_irq();
    /* Line low, and wait 480us */
    ONEWIRE_LOW(OneWireStruct);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff9a 	bl	80025d0 <ONEWIRE_LOW>
    ONEWIRE_OUTPUT(OneWireStruct);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ffc9 	bl	8002634 <ONEWIRE_OUTPUT>
    dwt_delay_us(500);
 80026a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a6:	f7ff ff71 	bl	800258c <dwt_delay_us>

    /* Release line and wait for 70us */
    ONEWIRE_INPUT(OneWireStruct);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffad 	bl	800260a <ONEWIRE_INPUT>
    dwt_delay_us(70);
 80026b0:	2046      	movs	r0, #70	; 0x46
 80026b2:	f7ff ff6b 	bl	800258c <dwt_delay_us>

    /* Check bit value */
    i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	889b      	ldrh	r3, [r3, #4]
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f001 f99b 	bl	80039fc <HAL_GPIO_ReadPin>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]

    /* Delay for 410 us */
    dwt_delay_us(410);
 80026ca:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80026ce:	f7ff ff5d 	bl	800258c <dwt_delay_us>
  __ASM volatile ("cpsie i" : : : "memory");
 80026d2:	b662      	cpsie	i
    /* Return value of presence pulse, 0 = OK, 1 = ERROR */
    __enable_irq();
    return i;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
    if (bit)
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00f      	beq.n	8002710 <OneWire_WriteBit+0x32>
    {
	/* Set line low */
	ONEWIRE_LOW(OneWireStruct);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff6d 	bl	80025d0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff9c 	bl	8002634 <ONEWIRE_OUTPUT>

	/* Bit high */
	ONEWIRE_INPUT(OneWireStruct);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff84 	bl	800260a <ONEWIRE_INPUT>

	/* Wait for 55 us and release the line */
	dwt_delay_us(55);
 8002702:	2037      	movs	r0, #55	; 0x37
 8002704:	f7ff ff42 	bl	800258c <dwt_delay_us>
	ONEWIRE_INPUT(OneWireStruct);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff7e 	bl	800260a <ONEWIRE_INPUT>
	/* Wait for 5 us and release the line */
	dwt_delay_us(5);
	ONEWIRE_INPUT(OneWireStruct);
    }

}
 800270e:	e011      	b.n	8002734 <OneWire_WriteBit+0x56>
	ONEWIRE_LOW(OneWireStruct);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff5d 	bl	80025d0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff8c 	bl	8002634 <ONEWIRE_OUTPUT>
	dwt_delay_us(65);
 800271c:	2041      	movs	r0, #65	; 0x41
 800271e:	f7ff ff35 	bl	800258c <dwt_delay_us>
	ONEWIRE_INPUT(OneWireStruct);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ff71 	bl	800260a <ONEWIRE_INPUT>
	dwt_delay_us(5);
 8002728:	2005      	movs	r0, #5
 800272a:	f7ff ff2f 	bl	800258c <dwt_delay_us>
	ONEWIRE_INPUT(OneWireStruct);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff6b 	bl	800260a <ONEWIRE_INPUT>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    uint8_t bit = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]

    /* Line low */
    ONEWIRE_LOW(OneWireStruct);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff41 	bl	80025d0 <ONEWIRE_LOW>
    ONEWIRE_OUTPUT(OneWireStruct);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff70 	bl	8002634 <ONEWIRE_OUTPUT>

    /* Release line */
    ONEWIRE_INPUT(OneWireStruct);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff58 	bl	800260a <ONEWIRE_INPUT>

    /* Read line value */
    if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	889b      	ldrh	r3, [r3, #4]
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f001 f949 	bl	80039fc <HAL_GPIO_ReadPin>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <OneWire_ReadBit+0x38>
	/* Bit is HIGH */
	bit = 1;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
    }

    /* Wait 50us to complete 60us period */
    dwt_delay_us(50);
 8002774:	2032      	movs	r0, #50	; 0x32
 8002776:	f7ff ff09 	bl	800258c <dwt_delay_us>

    /* Return bit value */
    return bit;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 8;
 8002790:	2308      	movs	r3, #8
 8002792:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
    __disable_irq();
    /* Write 8 bits */
    while (i--) {
 8002796:	e00a      	b.n	80027ae <OneWire_WriteByte+0x2a>
	/* LSB bit is first */
	OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff9b 	bl	80026de <OneWire_WriteBit>
	byte >>= 1;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	70fb      	strb	r3, [r7, #3]
    while (i--) {
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	73fa      	strb	r2, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ef      	bne.n	8002798 <OneWire_WriteByte+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
 80027b8:	b662      	cpsie	i
    }
    __enable_irq();
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
    uint8_t i = 8, byte = 0;
 80027ca:	2308      	movs	r3, #8
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	2300      	movs	r3, #0
 80027d0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d2:	b672      	cpsid	i
    __disable_irq();
    while (i--) {
 80027d4:	e00d      	b.n	80027f2 <OneWire_ReadByte+0x30>
	byte >>= 1;
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	73bb      	strb	r3, [r7, #14]
	byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ffad 	bl	800273c <OneWire_ReadBit>
 80027e2:	4603      	mov	r3, r0
 80027e4:	01db      	lsls	r3, r3, #7
 80027e6:	b25a      	sxtb	r2, r3
 80027e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	73bb      	strb	r3, [r7, #14]
    while (i--) {
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	73fa      	strb	r2, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ec      	bne.n	80027d6 <OneWire_ReadByte+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
 80027fc:	b662      	cpsie	i
    }
    __enable_irq();

    return byte;
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    /* Reset search values */
    OneWire_ResetSearch(OneWireStruct);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f816 	bl	8002842 <OneWire_ResetSearch>

    /* Start with searching */
    return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002816:	21f0      	movs	r1, #240	; 0xf0
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f824 	bl	8002866 <OneWire_Search>
 800281e:	4603      	mov	r3, r0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    /* Leave the search state alone */
    return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002830:	21f0      	movs	r1, #240	; 0xf0
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f817 	bl	8002866 <OneWire_Search>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    /* Reset the search state */
    OneWireStruct->LastDiscrepancy = 0;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	719a      	strb	r2, [r3, #6]
    OneWireStruct->LastDeviceFlag = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	721a      	strb	r2, [r3, #8]
    OneWireStruct->LastFamilyDiscrepancy = 0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	71da      	strb	r2, [r3, #7]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
    uint8_t last_zero, rom_byte_number, search_result;
    uint8_t id_bit, cmp_id_bit;
    uint8_t rom_byte_mask, search_direction;

    /* Initialize for search */
    id_bit_number = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
    last_zero = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	73bb      	strb	r3, [r7, #14]
    rom_byte_number = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	737b      	strb	r3, [r7, #13]
    rom_byte_mask = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	72fb      	strb	r3, [r7, #11]
    search_result = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	733b      	strb	r3, [r7, #12]

    // if the last call was not the last one
    if (!OneWireStruct->LastDeviceFlag)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7a1b      	ldrb	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 809a 	bne.w	80029c4 <OneWire_Search+0x15e>
    {
	// 1-Wire reset
	if (OneWire_Reset(OneWireStruct))
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fefb 	bl	800268c <OneWire_Reset>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <OneWire_Search+0x4c>
	{
	    /* Reset the search */
	    OneWireStruct->LastDiscrepancy = 0;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	719a      	strb	r2, [r3, #6]
	    OneWireStruct->LastDeviceFlag = 0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	721a      	strb	r2, [r3, #8]
	    OneWireStruct->LastFamilyDiscrepancy = 0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	71da      	strb	r2, [r3, #7]
	    return 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e09b      	b.n	80029ea <OneWire_Search+0x184>
	}

	// issue the search command
	OneWire_WriteByte(OneWireStruct, command);
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff64 	bl	8002784 <OneWire_WriteByte>

	// loop to do the search
	do {
	    // read a bit and its complement
	    id_bit = OneWire_ReadBit(OneWireStruct);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff3d 	bl	800273c <OneWire_ReadBit>
 80028c2:	4603      	mov	r3, r0
 80028c4:	727b      	strb	r3, [r7, #9]
	    cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff38 	bl	800273c <OneWire_ReadBit>
 80028cc:	4603      	mov	r3, r0
 80028ce:	723b      	strb	r3, [r7, #8]

	    // check for no devices on 1-wire
	    if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80028d0:	7a7b      	ldrb	r3, [r7, #9]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <OneWire_Search+0x76>
 80028d6:	7a3b      	ldrb	r3, [r7, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d064      	beq.n	80029a6 <OneWire_Search+0x140>
		break;
	    } else {
		// all devices coupled have 0 or 1
		if (id_bit != cmp_id_bit) {
 80028dc:	7a7a      	ldrb	r2, [r7, #9]
 80028de:	7a3b      	ldrb	r3, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d002      	beq.n	80028ea <OneWire_Search+0x84>
		    search_direction = id_bit;  // bit write value for search
 80028e4:	7a7b      	ldrb	r3, [r7, #9]
 80028e6:	72bb      	strb	r3, [r7, #10]
 80028e8:	e026      	b.n	8002938 <OneWire_Search+0xd2>
		} else {
		    // if this discrepancy if before the Last Discrepancy
		    // on a previous next then pick the same as last time
		    if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	799b      	ldrb	r3, [r3, #6]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d20d      	bcs.n	8002910 <OneWire_Search+0xaa>
			search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80028f4:	7b7b      	ldrb	r3, [r7, #13]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	7a5a      	ldrb	r2, [r3, #9]
 80028fc:	7afb      	ldrb	r3, [r7, #11]
 80028fe:	4013      	ands	r3, r2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	72bb      	strb	r3, [r7, #10]
 800290e:	e008      	b.n	8002922 <OneWire_Search+0xbc>
		    } else {
			// if equal to last pick 1, if not then pick 0
			search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	799b      	ldrb	r3, [r3, #6]
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	429a      	cmp	r2, r3
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	72bb      	strb	r3, [r7, #10]
		    }

		    // if 0 was picked then record its position in LastZero
		    if (search_direction == 0) {
 8002922:	7abb      	ldrb	r3, [r7, #10]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <OneWire_Search+0xd2>
			last_zero = id_bit_number;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	73bb      	strb	r3, [r7, #14]

			// check for Last discrepancy in family
			if (last_zero < 9) {
 800292c:	7bbb      	ldrb	r3, [r7, #14]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d802      	bhi.n	8002938 <OneWire_Search+0xd2>
			    OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7bba      	ldrb	r2, [r7, #14]
 8002936:	71da      	strb	r2, [r3, #7]
		    }
		}

		// set or clear the bit in the ROM byte rom_byte_number
		// with mask rom_byte_mask
		if (search_direction == 1) {
 8002938:	7abb      	ldrb	r3, [r7, #10]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10c      	bne.n	8002958 <OneWire_Search+0xf2>
		    OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800293e:	7b7b      	ldrb	r3, [r7, #13]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	7a59      	ldrb	r1, [r3, #9]
 8002946:	7b7b      	ldrb	r3, [r7, #13]
 8002948:	7afa      	ldrb	r2, [r7, #11]
 800294a:	430a      	orrs	r2, r1
 800294c:	b2d1      	uxtb	r1, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	460a      	mov	r2, r1
 8002954:	725a      	strb	r2, [r3, #9]
 8002956:	e010      	b.n	800297a <OneWire_Search+0x114>
		} else {
		    OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002958:	7b7b      	ldrb	r3, [r7, #13]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	7a5b      	ldrb	r3, [r3, #9]
 8002960:	b25a      	sxtb	r2, r3
 8002962:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002966:	43db      	mvns	r3, r3
 8002968:	b25b      	sxtb	r3, r3
 800296a:	4013      	ands	r3, r2
 800296c:	b25a      	sxtb	r2, r3
 800296e:	7b7b      	ldrb	r3, [r7, #13]
 8002970:	b2d1      	uxtb	r1, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	460a      	mov	r2, r1
 8002978:	725a      	strb	r2, [r3, #9]
		}

		// serial number search direction write bit
		OneWire_WriteBit(OneWireStruct, search_direction);
 800297a:	7abb      	ldrb	r3, [r7, #10]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fead 	bl	80026de <OneWire_WriteBit>

		// increment the byte counter id_bit_number
		// and shift the mask rom_byte_mask
		id_bit_number++;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	3301      	adds	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
		rom_byte_mask <<= 1;
 800298a:	7afb      	ldrb	r3, [r7, #11]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	72fb      	strb	r3, [r7, #11]

		// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
		if (rom_byte_mask == 0) {
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <OneWire_Search+0x13a>
		    //docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
		    rom_byte_number++;
 8002996:	7b7b      	ldrb	r3, [r7, #13]
 8002998:	3301      	adds	r3, #1
 800299a:	737b      	strb	r3, [r7, #13]
		    rom_byte_mask = 1;
 800299c:	2301      	movs	r3, #1
 800299e:	72fb      	strb	r3, [r7, #11]
		}
	    }
	} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	2b07      	cmp	r3, #7
 80029a4:	d98a      	bls.n	80028bc <OneWire_Search+0x56>

	// if the search was successful then
	if (!(id_bit_number < 65)) {
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d90b      	bls.n	80029c4 <OneWire_Search+0x15e>
	    // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
	    OneWireStruct->LastDiscrepancy = last_zero;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7bba      	ldrb	r2, [r7, #14]
 80029b0:	719a      	strb	r2, [r3, #6]

	    // check for last device
	    if (OneWireStruct->LastDiscrepancy == 0) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799b      	ldrb	r3, [r3, #6]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <OneWire_Search+0x15a>
		OneWireStruct->LastDeviceFlag = 1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	721a      	strb	r2, [r3, #8]
	    }

	    search_result = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	733b      	strb	r3, [r7, #12]
	}
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80029c4:	7b3b      	ldrb	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <OneWire_Search+0x16c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7a5b      	ldrb	r3, [r3, #9]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <OneWire_Search+0x182>
	OneWireStruct->LastDiscrepancy = 0;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	71da      	strb	r2, [r3, #7]
	search_result = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	733b      	strb	r3, [r7, #12]
    }

    return search_result;
 80029e8:	7b3b      	ldrb	r3, [r7, #12]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <OneWire_SelectWithPointer>:
    for (i = 0; i < 8; i++) {
	OneWire_WriteByte(OneWireStruct, *(addr + i));
    }
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
    uint8_t i;
    OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80029fc:	2155      	movs	r1, #85	; 0x55
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fec0 	bl	8002784 <OneWire_WriteByte>

    for (i = 0; i < 8; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	e00a      	b.n	8002a20 <OneWire_SelectWithPointer+0x2e>
	OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff feb5 	bl	8002784 <OneWire_WriteByte>
    for (i = 0; i < 8; i++) {
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b07      	cmp	r3, #7
 8002a24:	d9f1      	bls.n	8002a0a <OneWire_SelectWithPointer+0x18>
    }
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
    uint8_t i;
    for (i = 0; i < 8; i++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e00a      	b.n	8002a54 <OneWire_GetFullROM+0x26>
	*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	440b      	add	r3, r1
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	440a      	add	r2, r1
 8002a4a:	7a52      	ldrb	r2, [r2, #9]
 8002a4c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	3301      	adds	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b07      	cmp	r3, #7
 8002a58:	d9f1      	bls.n	8002a3e <OneWire_GetFullROM+0x10>
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0, inbyte, i, mix;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

    while (len--) {
 8002a74:	e022      	b.n	8002abc <OneWire_CRC8+0x58>
	inbyte = *addr++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	73bb      	strb	r3, [r7, #14]
	for (i = 8; i; i--) {
 8002a80:	2308      	movs	r3, #8
 8002a82:	737b      	strb	r3, [r7, #13]
 8002a84:	e017      	b.n	8002ab6 <OneWire_CRC8+0x52>
	    mix = (crc ^ inbyte) & 0x01;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	4053      	eors	r3, r2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	733b      	strb	r3, [r7, #12]
	    crc >>= 1;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
	    if (mix) {
 8002a9a:	7b3b      	ldrb	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <OneWire_CRC8+0x46>
		crc ^= 0x8C;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	73fb      	strb	r3, [r7, #15]
	    }
	    inbyte >>= 1;
 8002aaa:	7bbb      	ldrb	r3, [r7, #14]
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	73bb      	strb	r3, [r7, #14]
	for (i = 8; i; i--) {
 8002ab0:	7b7b      	ldrb	r3, [r7, #13]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	737b      	strb	r3, [r7, #13]
 8002ab6:	7b7b      	ldrb	r3, [r7, #13]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e4      	bne.n	8002a86 <OneWire_CRC8+0x22>
    while (len--) {
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	70fa      	strb	r2, [r7, #3]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1d7      	bne.n	8002a76 <OneWire_CRC8+0x12>
	}
    }

    /* Return calculated CRC */
    return crc;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <quadrar_gps_init>:
* @brief   : Init the GPS control
* @param   : none
* @retval  : OK or value < 0 for ERROR
*/
int8_t quadrar_gps_init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	gps.dataComplete = 0;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <quadrar_gps_init+0x30>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	gps.pos = 0;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <quadrar_gps_init+0x30>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	memset(gps.bufferRx, 0x00, sizeof(gps.bufferRx));
 8002ae8:	2264      	movs	r2, #100	; 0x64
 8002aea:	2100      	movs	r1, #0
 8002aec:	4805      	ldr	r0, [pc, #20]	; (8002b04 <quadrar_gps_init+0x30>)
 8002aee:	f002 fe4a 	bl	8005786 <memset>
	memset(gps.bufferData, 0x00, sizeof(gps.bufferData));
 8002af2:	2264      	movs	r2, #100	; 0x64
 8002af4:	2100      	movs	r1, #0
 8002af6:	4804      	ldr	r0, [pc, #16]	; (8002b08 <quadrar_gps_init+0x34>)
 8002af8:	f002 fe45 	bl	8005786 <memset>

	return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200002e4 	.word	0x200002e4
 8002b08:	20000348 	.word	0x20000348

08002b0c <quadrar_gps_get_data>:
* @brief   : Gets the GPS Data
* @param   : none
* @retval  : OK or value < 0 for ERROR
*/
int8_t quadrar_gps_get_data(quadrar_gps_data_t* p)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	int8_t ret = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]

	ret = quadrar_gps_get_nmea();
 8002b18:	f000 f814 	bl	8002b44 <quadrar_gps_get_nmea>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
	if(!ret)
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <quadrar_gps_get_data+0x26>
	{
		memcpy(p,&GPS,sizeof(GPS));
 8002b28:	2210      	movs	r2, #16
 8002b2a:	4905      	ldr	r1, [pc, #20]	; (8002b40 <quadrar_gps_get_data+0x34>)
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f002 fe1f 	bl	8005770 <memcpy>
	}
	return ret;
 8002b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000298 	.word	0x20000298

08002b44 <quadrar_gps_get_nmea>:
* @brief   : Gets the NMEA Data from Buffer
* @param   : none
* @retval  : OK or value < 0 for ERROR
*/
int8_t quadrar_gps_get_nmea(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71fb      	strb	r3, [r7, #7]

	if(gps.dataComplete)
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <quadrar_gps_get_nmea+0x50>)
 8002b50:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <quadrar_gps_get_nmea+0x40>
	{
		// Check if the sentence is the GPRMC
		if(strncmp(gps.bufferData, "$GPRMC", strlen ("$GPRMC")) == 0)
 8002b58:	2206      	movs	r2, #6
 8002b5a:	490f      	ldr	r1, [pc, #60]	; (8002b98 <quadrar_gps_get_nmea+0x54>)
 8002b5c:	480f      	ldr	r0, [pc, #60]	; (8002b9c <quadrar_gps_get_nmea+0x58>)
 8002b5e:	f003 faa0 	bl	80060a2 <strncmp>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <quadrar_gps_get_nmea+0x36>
		{
			strcpy((char*)NMEA.gprmc,(char*)gps.bufferData);
 8002b68:	490c      	ldr	r1, [pc, #48]	; (8002b9c <quadrar_gps_get_nmea+0x58>)
 8002b6a:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <quadrar_gps_get_nmea+0x5c>)
 8002b6c:	f003 fa91 	bl	8006092 <strcpy>
		    ret = quadrar_gps_parse_gprmc((char*)&NMEA.gprmc);
 8002b70:	480b      	ldr	r0, [pc, #44]	; (8002ba0 <quadrar_gps_get_nmea+0x5c>)
 8002b72:	f000 f819 	bl	8002ba8 <quadrar_gps_parse_gprmc>
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
		}
		gps.dataComplete = 0;
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <quadrar_gps_get_nmea+0x50>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002b82:	e001      	b.n	8002b88 <quadrar_gps_get_nmea+0x44>
	}
	else
	{
		ret = -1;
 8002b84:	23ff      	movs	r3, #255	; 0xff
 8002b86:	71fb      	strb	r3, [r7, #7]
	}
	return ret;
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200002e4 	.word	0x200002e4
 8002b98:	08008ef8 	.word	0x08008ef8
 8002b9c:	20000348 	.word	0x20000348
 8002ba0:	20000234 	.word	0x20000234
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <quadrar_gps_parse_gprmc>:
* @brief  : Parsing $GPRMC sentence.
* @param  : line_rsp: Pointer to data.
* @retval : OK or value < 0 for ERROR
*/
int8_t quadrar_gps_parse_gprmc(char* line_rsp)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b0a1      	sub	sp, #132	; 0x84
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	char bkLine[100];
    char* token;
    int32_t pos = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	67bb      	str	r3, [r7, #120]	; 0x78
    float degrees, minutes;

    strcpy(bkLine,line_rsp);
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fa69 	bl	8006092 <strcpy>

    // Gets NMEA $GPRMC sentence
    if (strncmp(bkLine, "$GPRMC", strlen("$GPRMC")) == 0)
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	497e      	ldr	r1, [pc, #504]	; (8002dc0 <quadrar_gps_parse_gprmc+0x218>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fa6a 	bl	80060a2 <strncmp>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 80eb 	bne.w	8002dac <quadrar_gps_parse_gprmc+0x204>
    {
    	token = strtok(bkLine, ",");
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	497a      	ldr	r1, [pc, #488]	; (8002dc4 <quadrar_gps_parse_gprmc+0x21c>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 f8e1 	bl	8006da4 <strtok>
 8002be2:	67f8      	str	r0, [r7, #124]	; 0x7c
        while (token != NULL)
 8002be4:	e079      	b.n	8002cda <quadrar_gps_parse_gprmc+0x132>
        {
        	switch (pos)
 8002be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be8:	3b02      	subs	r3, #2
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d868      	bhi.n	8002cc0 <quadrar_gps_parse_gprmc+0x118>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <quadrar_gps_parse_gprmc+0x4c>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c0d 	.word	0x08002c0d
 8002bf8:	08002c17 	.word	0x08002c17
 8002bfc:	08002c27 	.word	0x08002c27
 8002c00:	08002c51 	.word	0x08002c51
 8002c04:	08002c61 	.word	0x08002c61
 8002c08:	08002c8b 	.word	0x08002c8b
        	{
        	case 2:
        		GPS.fix = *token;
 8002c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c12:	701a      	strb	r2, [r3, #0]
        		break;
 8002c14:	e059      	b.n	8002cca <quadrar_gps_parse_gprmc+0x122>
        	case 3:
        		GPS.latitude = strtof(token, NULL);
 8002c16:	2100      	movs	r1, #0
 8002c18:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002c1a:	f004 f875 	bl	8006d08 <strtof>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c22:	605a      	str	r2, [r3, #4]
        		break;
 8002c24:	e051      	b.n	8002cca <quadrar_gps_parse_gprmc+0x122>
        	case 4:
                if (*token == 'S')
 8002c26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b53      	cmp	r3, #83	; 0x53
 8002c2c:	d14a      	bne.n	8002cc4 <quadrar_gps_parse_gprmc+0x11c>
                {
                    GPS.latitude  *= -1.0;
 8002c2e:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc10 	bl	8000458 <__aeabi_f2d>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	4621      	mov	r1, r4
 8002c40:	f7fd ff5a 	bl	8000af8 <__aeabi_d2f>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c4a:	4a5f      	ldr	r2, [pc, #380]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c4c:	6053      	str	r3, [r2, #4]
                }
        		break;
 8002c4e:	e039      	b.n	8002cc4 <quadrar_gps_parse_gprmc+0x11c>
        	case 5:
        		GPS.longitude = strtof(token, NULL);
 8002c50:	2100      	movs	r1, #0
 8002c52:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002c54:	f004 f858 	bl	8006d08 <strtof>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b5b      	ldr	r3, [pc, #364]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c5c:	609a      	str	r2, [r3, #8]
        		break;
 8002c5e:	e034      	b.n	8002cca <quadrar_gps_parse_gprmc+0x122>
        	case 6:
                if (*token == 'W')
 8002c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b57      	cmp	r3, #87	; 0x57
 8002c66:	d12f      	bne.n	8002cc8 <quadrar_gps_parse_gprmc+0x120>
                {
                    GPS.longitude  *= -1.0;
 8002c68:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fbf3 	bl	8000458 <__aeabi_f2d>
 8002c72:	4603      	mov	r3, r0
 8002c74:	460c      	mov	r4, r1
 8002c76:	4618      	mov	r0, r3
 8002c78:	4621      	mov	r1, r4
 8002c7a:	f7fd ff3d 	bl	8000af8 <__aeabi_d2f>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c86:	6093      	str	r3, [r2, #8]
                }
        		break;
 8002c88:	e01e      	b.n	8002cc8 <quadrar_gps_parse_gprmc+0x120>
        	case 7:
        		GPS.speed = strtof(token, NULL);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002c8e:	f004 f83b 	bl	8006d08 <strtof>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c96:	60da      	str	r2, [r3, #12]
        		GPS.speed = GPS.speed * 0.51; //(knots to m/s)
 8002c98:	4b4b      	ldr	r3, [pc, #300]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fbdb 	bl	8000458 <__aeabi_f2d>
 8002ca2:	a345      	add	r3, pc, #276	; (adr r3, 8002db8 <quadrar_gps_parse_gprmc+0x210>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fc2e 	bl	8000508 <__aeabi_dmul>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	f7fd ff20 	bl	8000af8 <__aeabi_d2f>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002cbc:	60da      	str	r2, [r3, #12]
        		break;
 8002cbe:	e004      	b.n	8002cca <quadrar_gps_parse_gprmc+0x122>
        	default:
        		break;
 8002cc0:	bf00      	nop
 8002cc2:	e002      	b.n	8002cca <quadrar_gps_parse_gprmc+0x122>
        		break;
 8002cc4:	bf00      	nop
 8002cc6:	e000      	b.n	8002cca <quadrar_gps_parse_gprmc+0x122>
        		break;
 8002cc8:	bf00      	nop
        	}

            token = strtok(NULL, ",");
 8002cca:	493e      	ldr	r1, [pc, #248]	; (8002dc4 <quadrar_gps_parse_gprmc+0x21c>)
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f004 f869 	bl	8006da4 <strtok>
 8002cd2:	67f8      	str	r0, [r7, #124]	; 0x7c
            ++pos;
 8002cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	67bb      	str	r3, [r7, #120]	; 0x78
        while (token != NULL)
 8002cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d182      	bne.n	8002be6 <quadrar_gps_parse_gprmc+0x3e>
        }

        /* Gets decimal values */
        degrees = trunc(GPS.latitude / 100.0f);
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4939      	ldr	r1, [pc, #228]	; (8002dcc <quadrar_gps_parse_gprmc+0x224>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f918 	bl	8000f1c <__aeabi_fdiv>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fbb2 	bl	8000458 <__aeabi_f2d>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	f006 f8b0 	bl	8008e60 <trunc>
 8002d00:	4603      	mov	r3, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	4618      	mov	r0, r3
 8002d06:	4621      	mov	r1, r4
 8002d08:	f7fd fef6 	bl	8000af8 <__aeabi_d2f>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	677b      	str	r3, [r7, #116]	; 0x74
        minutes = GPS.latitude - (degrees * 100.0f);
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002d12:	685c      	ldr	r4, [r3, #4]
 8002d14:	492d      	ldr	r1, [pc, #180]	; (8002dcc <quadrar_gps_parse_gprmc+0x224>)
 8002d16:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002d18:	f7fe f84c 	bl	8000db4 <__aeabi_fmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7fd ff3d 	bl	8000ba0 <__aeabi_fsub>
 8002d26:	4603      	mov	r3, r0
 8002d28:	673b      	str	r3, [r7, #112]	; 0x70
        GPS.latitude = degrees + minutes / 60.0f;
 8002d2a:	4929      	ldr	r1, [pc, #164]	; (8002dd0 <quadrar_gps_parse_gprmc+0x228>)
 8002d2c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d2e:	f7fe f8f5 	bl	8000f1c <__aeabi_fdiv>
 8002d32:	4603      	mov	r3, r0
 8002d34:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd ff34 	bl	8000ba4 <__addsf3>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002d42:	605a      	str	r2, [r3, #4]

        degrees = trunc(GPS.longitude / 100.0f);
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4920      	ldr	r1, [pc, #128]	; (8002dcc <quadrar_gps_parse_gprmc+0x224>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f8e6 	bl	8000f1c <__aeabi_fdiv>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fb80 	bl	8000458 <__aeabi_f2d>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f006 f87e 	bl	8008e60 <trunc>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	f7fd fec4 	bl	8000af8 <__aeabi_d2f>
 8002d70:	4603      	mov	r3, r0
 8002d72:	677b      	str	r3, [r7, #116]	; 0x74
        minutes = GPS.longitude - (degrees * 100.0f);
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002d76:	689c      	ldr	r4, [r3, #8]
 8002d78:	4914      	ldr	r1, [pc, #80]	; (8002dcc <quadrar_gps_parse_gprmc+0x224>)
 8002d7a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002d7c:	f7fe f81a 	bl	8000db4 <__aeabi_fmul>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4619      	mov	r1, r3
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7fd ff0b 	bl	8000ba0 <__aeabi_fsub>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	673b      	str	r3, [r7, #112]	; 0x70
        GPS.longitude = degrees + minutes / 60.0f;
 8002d8e:	4910      	ldr	r1, [pc, #64]	; (8002dd0 <quadrar_gps_parse_gprmc+0x228>)
 8002d90:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d92:	f7fe f8c3 	bl	8000f1c <__aeabi_fdiv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd ff02 	bl	8000ba4 <__addsf3>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <quadrar_gps_parse_gprmc+0x220>)
 8002da6:	609a      	str	r2, [r3, #8]
    else
    {
    	return -1;
    }

    return 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e001      	b.n	8002db0 <quadrar_gps_parse_gprmc+0x208>
    	return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3784      	adds	r7, #132	; 0x84
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}
 8002db8:	851eb852 	.word	0x851eb852
 8002dbc:	3fe051eb 	.word	0x3fe051eb
 8002dc0:	08008ef8 	.word	0x08008ef8
 8002dc4:	08008f00 	.word	0x08008f00
 8002dc8:	20000298 	.word	0x20000298
 8002dcc:	42c80000 	.word	0x42c80000
 8002dd0:	42700000 	.word	0x42700000

08002dd4 <quadrar_loraone_init>:
* @brief   : Init the LoRaONE Module
* @param   : none
* @retval  : OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	int32_t res = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
	static quadrar_loraone_data_t loraOneId;

	// Initiate the Uart Control
	lora.dataComplete = 0;
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <quadrar_loraone_init+0x110>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	lora.pos = 0;
 8002de6:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <quadrar_loraone_init+0x110>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	memset(lora.bufferRx, 0x00, sizeof(lora.bufferRx));
 8002dee:	2264      	movs	r2, #100	; 0x64
 8002df0:	2100      	movs	r1, #0
 8002df2:	483c      	ldr	r0, [pc, #240]	; (8002ee4 <quadrar_loraone_init+0x110>)
 8002df4:	f002 fcc7 	bl	8005786 <memset>
	memset(lora.bufferData, 0x00, sizeof(lora.bufferData));
 8002df8:	2264      	movs	r2, #100	; 0x64
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	483a      	ldr	r0, [pc, #232]	; (8002ee8 <quadrar_loraone_init+0x114>)
 8002dfe:	f002 fcc2 	bl	8005786 <memset>

	loraOneId.NWKSKEY = LoRaONE_NWKSKEY;
 8002e02:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e04:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <quadrar_loraone_init+0x11c>)
 8002e06:	60da      	str	r2, [r3, #12]
	loraOneId.APPSKEY = LoRaONE_APPSKEY;
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e0a:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <quadrar_loraone_init+0x120>)
 8002e0c:	611a      	str	r2, [r3, #16]
	loraOneId.DADDR   = LoRaONE_DADDR;
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e10:	4a39      	ldr	r2, [pc, #228]	; (8002ef8 <quadrar_loraone_init+0x124>)
 8002e12:	609a      	str	r2, [r3, #8]
	loraOneId.APPEUI  = LoRaONE_APPEUI;
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e16:	4a39      	ldr	r2, [pc, #228]	; (8002efc <quadrar_loraone_init+0x128>)
 8002e18:	605a      	str	r2, [r3, #4]

    // Reseting the module
    res = quadrar_loraone_reset();
 8002e1a:	f000 f877 	bl	8002f0c <quadrar_loraone_reset>
 8002e1e:	6078      	str	r0, [r7, #4]
    if(res) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <quadrar_loraone_init+0x56>
    	return res;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e057      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Sends AT command to check if module is live
    res = quadrar_loraone_at_send("", NULL, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4834      	ldr	r0, [pc, #208]	; (8002f00 <quadrar_loraone_init+0x12c>)
 8002e30:	f000 f98e 	bl	8003150 <quadrar_loraone_at_send>
 8002e34:	6078      	str	r0, [r7, #4]
    if(res) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <quadrar_loraone_init+0x6c>
    	return res;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	e04c      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Turn off the notification from the network messages
    res = quadrar_loraone_at_send("+CFM=0", NULL, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	482f      	ldr	r0, [pc, #188]	; (8002f04 <quadrar_loraone_init+0x130>)
 8002e46:	f000 f983 	bl	8003150 <quadrar_loraone_at_send>
 8002e4a:	6078      	str	r0, [r7, #4]
    if(res) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <quadrar_loraone_init+0x82>
    	return res;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	e041      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Set for no retries
    res = quadrar_loraone_at_send("+RETRY=0", NULL, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2100      	movs	r1, #0
 8002e5a:	482b      	ldr	r0, [pc, #172]	; (8002f08 <quadrar_loraone_init+0x134>)
 8002e5c:	f000 f978 	bl	8003150 <quadrar_loraone_at_send>
 8002e60:	6078      	str	r0, [r7, #4]
    if(res) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <quadrar_loraone_init+0x98>
    	return res;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	e036      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Set the APPSKEY
    res = quadrar_loraone_setAPPSKEY(loraOneId.APPSKEY,NULL);
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f940 	bl	80030f8 <quadrar_loraone_setAPPSKEY>
 8002e78:	6078      	str	r0, [r7, #4]
    if(res){
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <quadrar_loraone_init+0xb0>
    	return res;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	e02a      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Set the NWKSKEY
    quadrar_loraone_setNWKSKEY(loraOneId.NWKSKEY, NULL);
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f908 	bl	80030a0 <quadrar_loraone_setNWKSKEY>
    if(res){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <quadrar_loraone_init+0xc6>
    	return res;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	e01f      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Set the DADDR
    quadrar_loraone_setDADDR(loraOneId.DADDR, NULL);
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <quadrar_loraone_init+0x118>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f8d1 	bl	8003048 <quadrar_loraone_setDADDR>
    if(res){
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <quadrar_loraone_init+0xdc>
    	return res;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	e014      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Set the APPEUI
    quadrar_loraone_setAPPEUI(loraOneId.APPEUI, NULL);
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <quadrar_loraone_init+0x118>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f89a 	bl	8002ff0 <quadrar_loraone_setAPPEUI>
    if(res){
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <quadrar_loraone_init+0xf2>
    	return res;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	e009      	b.n	8002eda <quadrar_loraone_init+0x106>
    }

    // Establishes join mode 0 (ABP)
    res = quadrar_loraone_join(QUADRAR_LORAONE_ABP);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f000 f834 	bl	8002f34 <quadrar_loraone_join>
 8002ecc:	6078      	str	r0, [r7, #4]
    if(res) {
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <quadrar_loraone_init+0x104>
    	return res;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	e000      	b.n	8002eda <quadrar_loraone_init+0x106>
    }
    return res;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200003f4 	.word	0x200003f4
 8002ee8:	20000458 	.word	0x20000458
 8002eec:	200002a8 	.word	0x200002a8
 8002ef0:	08008fa8 	.word	0x08008fa8
 8002ef4:	08008fcc 	.word	0x08008fcc
 8002ef8:	08008ff0 	.word	0x08008ff0
 8002efc:	08008ffc 	.word	0x08008ffc
 8002f00:	08009010 	.word	0x08009010
 8002f04:	08009014 	.word	0x08009014
 8002f08:	0800901c 	.word	0x0800901c

08002f0c <quadrar_loraone_reset>:
* @brief   : Resets the LoRaONE Module
* @param   : none
* @retval  : OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_reset(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
	uint32_t res = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]

	// Sends ATZ command to reset the module
	res = quadrar_loraone_at_send("Z", NULL, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <quadrar_loraone_reset+0x24>)
 8002f1c:	f000 f918 	bl	8003150 <quadrar_loraone_at_send>
 8002f20:	4603      	mov	r3, r0
 8002f22:	607b      	str	r3, [r7, #4]
	return res;
 8002f24:	687b      	ldr	r3, [r7, #4]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	08009028 	.word	0x08009028

08002f34 <quadrar_loraone_join>:
* @brief   : Joins the LoRaONE Module in the network
* @param   : QUADRAR_LORAONE_JOIN
* @retval  : OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_join(quadrar_loraone_join_t mode)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
	uint32_t res = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]

	// Establishes join mode 0 (ABP)
	if (mode == QUADRAR_LORAONE_ABP){
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <quadrar_loraone_join+0x24>
		res = quadrar_loraone_at_send("+NJM=0", NULL, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	480c      	ldr	r0, [pc, #48]	; (8002f80 <quadrar_loraone_join+0x4c>)
 8002f4e:	f000 f8ff 	bl	8003150 <quadrar_loraone_at_send>
 8002f52:	4603      	mov	r3, r0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e00d      	b.n	8002f74 <quadrar_loraone_join+0x40>
	}

	// Establishes join mode 1 (OTAA)
	else if (mode == QUADRAR_LORAONE_OTAA){
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <quadrar_loraone_join+0x3a>
		res = quadrar_loraone_at_send("+NJM=1", NULL, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	4808      	ldr	r0, [pc, #32]	; (8002f84 <quadrar_loraone_join+0x50>)
 8002f64:	f000 f8f4 	bl	8003150 <quadrar_loraone_at_send>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e002      	b.n	8002f74 <quadrar_loraone_join+0x40>
	}

	else{
		res = -1;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	60fb      	str	r3, [r7, #12]
	}

	return res;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	08009034 	.word	0x08009034
 8002f84:	0800903c 	.word	0x0800903c

08002f88 <quadrar_loraone_send_data>:
* @param   port	: Broker port who will receive data
* @param   data : Pointer to the data to be sent
* @retval  		: OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_send_data(int port, char* data)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b09c      	sub	sp, #112	; 0x70
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	char buf_lora[100] = {0x00};
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	2264      	movs	r2, #100	; 0x64
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fbf3 	bl	8005786 <memset>
	int32_t res = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	66fb      	str	r3, [r7, #108]	; 0x6c

	memset(buf_lora, 0x00, sizeof(buf_lora));
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	2264      	movs	r2, #100	; 0x64
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 fbea 	bl	8005786 <memset>

	// formating the data
	sprintf(buf_lora, "+SEND=%d:%s", port, data);
 8002fb2:	f107 0008 	add.w	r0, r7, #8
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	490c      	ldr	r1, [pc, #48]	; (8002fec <quadrar_loraone_send_data+0x64>)
 8002fbc:	f003 f83a 	bl	8006034 <siprintf>

    // Establishes join mode 0 (ABP)
    res = quadrar_loraone_join(QUADRAR_LORAONE_ABP);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7ff ffb7 	bl	8002f34 <quadrar_loraone_join>
 8002fc6:	66f8      	str	r0, [r7, #108]	; 0x6c
    if(res) {
 8002fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <quadrar_loraone_send_data+0x4a>
    	return res;
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	e008      	b.n	8002fe4 <quadrar_loraone_send_data+0x5c>
    }
	// sending message
	res = quadrar_loraone_at_send(buf_lora,NULL,0);
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f8b8 	bl	8003150 <quadrar_loraone_at_send>
 8002fe0:	66f8      	str	r0, [r7, #108]	; 0x6c
	return res;
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3770      	adds	r7, #112	; 0x70
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	08009044 	.word	0x08009044

08002ff0 <quadrar_loraone_setAPPEUI>:
* @param   APPEUI 	: Pointer to the APPEUI information
* @param   resp 	: Pointer to retrieve the hash information loaded into the module
* @retval  			: OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_setAPPEUI(char* APPEUI, char* resp)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b09c      	sub	sp, #112	; 0x70
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	char buf_lora[100] = {0x00};
 8002ffa:	f107 0308 	add.w	r3, r7, #8
 8002ffe:	2264      	movs	r2, #100	; 0x64
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f002 fbbf 	bl	8005786 <memset>
	int32_t res = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	66fb      	str	r3, [r7, #108]	; 0x6c

	memset(buf_lora, 0x00, sizeof(buf_lora));
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	2264      	movs	r2, #100	; 0x64
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fbb6 	bl	8005786 <memset>

	// formating the data
	sprintf(buf_lora, "+APPEUI=%s", APPEUI);
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4908      	ldr	r1, [pc, #32]	; (8003044 <quadrar_loraone_setAPPEUI+0x54>)
 8003022:	4618      	mov	r0, r3
 8003024:	f003 f806 	bl	8006034 <siprintf>

	// Sets the APPLICATION EUI
	res = quadrar_loraone_at_send(buf_lora, resp, 0);
 8003028:	f107 0308 	add.w	r3, r7, #8
 800302c:	2200      	movs	r2, #0
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f88d 	bl	8003150 <quadrar_loraone_at_send>
 8003036:	66f8      	str	r0, [r7, #108]	; 0x6c
	return res;
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800303a:	4618      	mov	r0, r3
 800303c:	3770      	adds	r7, #112	; 0x70
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	08009058 	.word	0x08009058

08003048 <quadrar_loraone_setDADDR>:
* @param   DADDR 	: Pointer to the DADDR information
* @param   resp 	: Pointer to retrieve the hash information loaded into the module
* @retval  			: OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_setDADDR(char* DADDR, char* resp)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b09c      	sub	sp, #112	; 0x70
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
	char buf_lora[100] = {0x00};
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	2264      	movs	r2, #100	; 0x64
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f002 fb93 	bl	8005786 <memset>
	int32_t res = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	66fb      	str	r3, [r7, #108]	; 0x6c

	memset(buf_lora, 0x00, sizeof(buf_lora));
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	2264      	movs	r2, #100	; 0x64
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fb8a 	bl	8005786 <memset>

	// formating the data
	sprintf(buf_lora, "+DADDR=%s", DADDR);
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4908      	ldr	r1, [pc, #32]	; (800309c <quadrar_loraone_setDADDR+0x54>)
 800307a:	4618      	mov	r0, r3
 800307c:	f002 ffda 	bl	8006034 <siprintf>

	// Sets the APPLICATION EUI
	res = quadrar_loraone_at_send(buf_lora, resp, 0);
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	2200      	movs	r2, #0
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f861 	bl	8003150 <quadrar_loraone_at_send>
 800308e:	66f8      	str	r0, [r7, #108]	; 0x6c
	return res;
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003092:	4618      	mov	r0, r3
 8003094:	3770      	adds	r7, #112	; 0x70
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	08009064 	.word	0x08009064

080030a0 <quadrar_loraone_setNWKSKEY>:
* @param   NWKSKEY 	: Pointer to the DADDR information
* @param   resp 	: Pointer to retrieve the hash information loaded into the module
* @retval  			: OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_setNWKSKEY(char* NWKSKEY, char* resp)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b09c      	sub	sp, #112	; 0x70
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
	char buf_lora[100] = {0x00};
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	2264      	movs	r2, #100	; 0x64
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fb67 	bl	8005786 <memset>
	int32_t res = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	66fb      	str	r3, [r7, #108]	; 0x6c

	memset(buf_lora, 0x00, sizeof(buf_lora));
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	2264      	movs	r2, #100	; 0x64
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fb5e 	bl	8005786 <memset>

	// formating the data
	sprintf(buf_lora, "+NWKSKEY=%s", NWKSKEY);
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4908      	ldr	r1, [pc, #32]	; (80030f4 <quadrar_loraone_setNWKSKEY+0x54>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 ffae 	bl	8006034 <siprintf>

	// Sets the APPLICATION EUI
	res = quadrar_loraone_at_send(buf_lora, resp, 0);
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	2200      	movs	r2, #0
 80030de:	6839      	ldr	r1, [r7, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f835 	bl	8003150 <quadrar_loraone_at_send>
 80030e6:	66f8      	str	r0, [r7, #108]	; 0x6c
	return res;
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3770      	adds	r7, #112	; 0x70
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	08009070 	.word	0x08009070

080030f8 <quadrar_loraone_setAPPSKEY>:
* @param   APPSKEY 	: Pointer to the DADDR information
* @param   resp 	: Pointer to retrieve the hash information loaded into the module
* @retval  			: OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_setAPPSKEY(char* APPSKEY, char* resp)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b09c      	sub	sp, #112	; 0x70
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	char buf_lora[100] = {0x00};
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	2264      	movs	r2, #100	; 0x64
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fb3b 	bl	8005786 <memset>
	int32_t res = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	66fb      	str	r3, [r7, #108]	; 0x6c

	memset(buf_lora, 0x00, sizeof(buf_lora));
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	2264      	movs	r2, #100	; 0x64
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fb32 	bl	8005786 <memset>

	// formating the data
	sprintf(buf_lora, "+APPSKEY=%s", APPSKEY);
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4908      	ldr	r1, [pc, #32]	; (800314c <quadrar_loraone_setAPPSKEY+0x54>)
 800312a:	4618      	mov	r0, r3
 800312c:	f002 ff82 	bl	8006034 <siprintf>

	// Sets the APPLICATION EUI
	res = quadrar_loraone_at_send(buf_lora, resp, 0);
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	2200      	movs	r2, #0
 8003136:	6839      	ldr	r1, [r7, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f809 	bl	8003150 <quadrar_loraone_at_send>
 800313e:	66f8      	str	r0, [r7, #108]	; 0x6c
	return res;
 8003140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003142:	4618      	mov	r0, r3
 8003144:	3770      	adds	r7, #112	; 0x70
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	0800907c 	.word	0x0800907c

08003150 <quadrar_loraone_at_send>:
* @param   presp: Pointer to store response (maybe NULL)
* @param   max 	: Maximum size of the response
* @retval  		: OK or value < 0 for ERROR
*/
int32_t quadrar_loraone_at_send(char* cmd, char* presp, uint32_t max)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b0b8      	sub	sp, #224	; 0xe0
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  int32_t res = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  char  buf[100] = {0x00};
 8003162:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003166:	2264      	movs	r2, #100	; 0x64
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f002 fb0b 	bl	8005786 <memset>
  char  line[100] = {0x00};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2264      	movs	r2, #100	; 0x64
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fb04 	bl	8005786 <memset>
  
  /* Checks command length */
  if (2 + strlen(cmd) + 2 >= sizeof(buf)) {
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7fc fffe 	bl	8000180 <strlen>
 8003184:	4603      	mov	r3, r0
 8003186:	3304      	adds	r3, #4
 8003188:	2b63      	cmp	r3, #99	; 0x63
 800318a:	d902      	bls.n	8003192 <quadrar_loraone_at_send+0x42>
    return -1;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	e06e      	b.n	8003270 <quadrar_loraone_at_send+0x120>
  }
  
  /* Initialize response buffer */
  if (presp) {
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <quadrar_loraone_at_send+0x4e>
    strcpy(presp, "");
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Prepare command buffer */
  strcpy(buf, "AT");
 800319e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031a2:	4a35      	ldr	r2, [pc, #212]	; (8003278 <quadrar_loraone_at_send+0x128>)
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	4611      	mov	r1, r2
 80031a8:	8019      	strh	r1, [r3, #0]
 80031aa:	3302      	adds	r3, #2
 80031ac:	0c12      	lsrs	r2, r2, #16
 80031ae:	701a      	strb	r2, [r3, #0]
  strcat(buf, cmd);
 80031b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 ff5c 	bl	8006074 <strcat>
  strcat(buf, "\r");
 80031bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fc ffdd 	bl	8000180 <strlen>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031ce:	4413      	add	r3, r2
 80031d0:	492a      	ldr	r1, [pc, #168]	; (800327c <quadrar_loraone_at_send+0x12c>)
 80031d2:	461a      	mov	r2, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	8013      	strh	r3, [r2, #0]
  
  /* Sends command */
  res = uart_send_data((uint8_t*)buf, (uint8_t)strlen(buf));
 80031da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fc ffce 	bl	8000180 <strlen>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fda0 	bl	8001d34 <uart_send_data>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (res) {
 80031fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <quadrar_loraone_at_send+0xb8>
    return res;
 8003202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003206:	e033      	b.n	8003270 <quadrar_loraone_at_send+0x120>
  }
  
  HAL_Delay(2000);
 8003208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800320c:	f000 f8f8 	bl	8003400 <HAL_Delay>

  //return 0;

  /* Receive response line */
  res = quadrar_loraone_rxline(line, sizeof(line));
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2164      	movs	r1, #100	; 0x64
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f836 	bl	8003288 <quadrar_loraone_rxline>
 800321c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  if (res)
 8003220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <quadrar_loraone_at_send+0xde>
	  return res;
 8003228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800322c:	e020      	b.n	8003270 <quadrar_loraone_at_send+0x120>
    
  /* Checks if response is empty line */
  if (strlen(line) == 0) {
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <quadrar_loraone_at_send+0xee>
	  return -2;
 8003238:	f06f 0301 	mvn.w	r3, #1
 800323c:	e018      	b.n	8003270 <quadrar_loraone_at_send+0x120>
  }
  /* If response is OK terminates with no error */
  if (quadrar_loraone_find_msg(line, LORAONE_MSG_OK) >= 0) {
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	490f      	ldr	r1, [pc, #60]	; (8003280 <quadrar_loraone_at_send+0x130>)
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f83d 	bl	80032c4 <quadrar_loraone_find_msg>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	db01      	blt.n	8003254 <quadrar_loraone_at_send+0x104>
      return 0;
 8003250:	2300      	movs	r3, #0
 8003252:	e00d      	b.n	8003270 <quadrar_loraone_at_send+0x120>
  }
  /* If response is ERROR, terminates with error indication */
  if (quadrar_loraone_find_msg(line, LORAONE_MSG_ERROR) >= 0) {
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	490a      	ldr	r1, [pc, #40]	; (8003284 <quadrar_loraone_at_send+0x134>)
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f832 	bl	80032c4 <quadrar_loraone_find_msg>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	db02      	blt.n	800326c <quadrar_loraone_at_send+0x11c>
      return -2;
 8003266:	f06f 0301 	mvn.w	r3, #1
 800326a:	e001      	b.n	8003270 <quadrar_loraone_at_send+0x120>
  }
  return -1;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003270:	4618      	mov	r0, r3
 8003272:	37e0      	adds	r7, #224	; 0xe0
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	08009088 	.word	0x08009088
 800327c:	0800908c 	.word	0x0800908c
 8003280:	20000004 	.word	0x20000004
 8003284:	20000014 	.word	0x20000014

08003288 <quadrar_loraone_rxline>:
* Receives line terminated with CR/LF or PROMPT from device
* pline:   Pointer to store received line
* max:     Maximum size of line buffer including string terminator
* return:  Error code: 0 if OK
*/
static int32_t quadrar_loraone_rxline(char* pline, uint32_t max) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]

  if(lora.dataComplete)
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <quadrar_loraone_rxline+0x34>)
 8003294:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <quadrar_loraone_rxline+0x28>
  {
	  strcpy(pline,lora.bufferData);
 800329c:	4908      	ldr	r1, [pc, #32]	; (80032c0 <quadrar_loraone_rxline+0x38>)
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f002 fef7 	bl	8006092 <strcpy>
	  lora.dataComplete = 0;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <quadrar_loraone_rxline+0x34>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	  return 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e001      	b.n	80032b4 <quadrar_loraone_rxline+0x2c>
  }
  else
  {
	  return -1;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200003f4 	.word	0x200003f4
 80032c0:	20000458 	.word	0x20000458

080032c4 <quadrar_loraone_find_msg>:
* line:    Pointer to modem response line
* table:   Pointer to table to search for messages
* result:  Message index if found, or -1 if not found
*/
static int32_t quadrar_loraone_find_msg(char* line, const char* table[])
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t pos = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  while (table[pos])
 80032d2:	e01a      	b.n	800330a <quadrar_loraone_find_msg+0x46>
  {
    if (strncmp(line, table[pos], strlen(table[pos])) == 0) {
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	681c      	ldr	r4, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4413      	add	r3, r2
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fc ff49 	bl	8000180 <strlen>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	4621      	mov	r1, r4
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f002 fed4 	bl	80060a2 <strncmp>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <quadrar_loraone_find_msg+0x40>
      return pos;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	e00b      	b.n	800331c <quadrar_loraone_find_msg+0x58>
    }
    pos++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
  while (table[pos])
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	4413      	add	r3, r2
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1dd      	bne.n	80032d4 <quadrar_loraone_find_msg+0x10>
  }
  return -1;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}

08003324 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332e:	2003      	movs	r0, #3
 8003330:	f000 f954 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003334:	2000      	movs	r0, #0
 8003336:	f000 f80d 	bl	8003354 <HAL_InitTick>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	71fb      	strb	r3, [r7, #7]
 8003344:	e001      	b.n	800334a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003346:	f7fe fabd 	bl	80018c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800334a:	79fb      	ldrb	r3, [r7, #7]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_InitTick+0x68>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_InitTick+0x6c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_InitTick+0x68>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003374:	fbb1 f3f3 	udiv	r3, r1, r3
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f962 	bl	8003646 <HAL_SYSTICK_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	d809      	bhi.n	80033a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338e:	2200      	movs	r2, #0
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	f04f 30ff 	mov.w	r0, #4294967295
 8003396:	f000 f92c 	bl	80035f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_InitTick+0x70>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e007      	b.n	80033b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e004      	b.n	80033b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e001      	b.n	80033b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000038 	.word	0x20000038
 80033c0:	20000000 	.word	0x20000000
 80033c4:	20000034 	.word	0x20000034

080033c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_IncTick+0x1c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_IncTick+0x20>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_IncTick+0x1c>)
 80033d8:	6013      	str	r3, [r2, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000056c 	.word	0x2000056c
 80033e8:	20000038 	.word	0x20000038

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <HAL_GetTick+0x10>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	2000056c 	.word	0x2000056c

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff fff0 	bl	80033ec <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d004      	beq.n	8003424 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_Delay+0x40>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003424:	bf00      	nop
 8003426:	f7ff ffe1 	bl	80033ec <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	429a      	cmp	r2, r3
 8003434:	d8f7      	bhi.n	8003426 <HAL_Delay+0x26>
  {
  }
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000038 	.word	0x20000038

08003444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800346c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	60d3      	str	r3, [r2, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4906      	ldr	r1, [pc, #24]	; (80034dc <__NVIC_EnableIRQ+0x34>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a8:	d301      	bcc.n	80035ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <SysTick_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b6:	210f      	movs	r1, #15
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f7ff ff90 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SysTick_Config+0x40>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <SysTick_Config+0x40>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff2d 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff42 	bl	800348c <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff90 	bl	8003534 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff5f 	bl	80034e0 <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff35 	bl	80034a8 <__NVIC_EnableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffa2 	bl	8003598 <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d005      	beq.n	8003682 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e029      	b.n	80036d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020e 	bic.w	r2, r2, #14
 8003690:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 021c 	and.w	r2, r3, #28
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
    }
  }
  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80036f6:	e160      	b.n	80039ba <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8152 	beq.w	80039b4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00b      	beq.n	8003730 <HAL_GPIO_Init+0x50>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d007      	beq.n	8003730 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003724:	2b11      	cmp	r3, #17
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b12      	cmp	r3, #18
 800372e:	d130      	bne.n	8003792 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003766:	2201      	movs	r2, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0201 	and.w	r2, r3, #1
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0xf2>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b12      	cmp	r3, #18
 80037d0:	d123      	bne.n	800381a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80ac 	beq.w	80039b4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385c:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_GPIO_Init+0x2f4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_GPIO_Init+0x2f4>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_GPIO_Init+0x2f4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_GPIO_Init+0x2f8>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	220f      	movs	r2, #15
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a50      	ldr	r2, [pc, #320]	; (80039dc <HAL_GPIO_Init+0x2fc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d025      	beq.n	80038ec <HAL_GPIO_Init+0x20c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_GPIO_Init+0x300>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01f      	beq.n	80038e8 <HAL_GPIO_Init+0x208>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_GPIO_Init+0x304>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d019      	beq.n	80038e4 <HAL_GPIO_Init+0x204>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_GPIO_Init+0x308>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_GPIO_Init+0x200>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_GPIO_Init+0x30c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00d      	beq.n	80038dc <HAL_GPIO_Init+0x1fc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_GPIO_Init+0x310>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <HAL_GPIO_Init+0x1f8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_GPIO_Init+0x314>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_GPIO_Init+0x1f4>
 80038d0:	2306      	movs	r3, #6
 80038d2:	e00c      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038d4:	2307      	movs	r3, #7
 80038d6:	e00a      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038d8:	2305      	movs	r3, #5
 80038da:	e008      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038dc:	2304      	movs	r3, #4
 80038de:	e006      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038e0:	2303      	movs	r3, #3
 80038e2:	e004      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e002      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_GPIO_Init+0x20e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	f002 0203 	and.w	r2, r2, #3
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	4093      	lsls	r3, r2
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038fe:	4936      	ldr	r1, [pc, #216]	; (80039d8 <HAL_GPIO_Init+0x2f8>)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_GPIO_Init+0x318>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003930:	4a31      	ldr	r2, [pc, #196]	; (80039f8 <HAL_GPIO_Init+0x318>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003936:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_GPIO_Init+0x318>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800395a:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_GPIO_Init+0x318>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_GPIO_Init+0x318>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_GPIO_Init+0x318>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_GPIO_Init+0x318>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_GPIO_Init+0x318>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f47f ae97 	bne.w	80036f8 <HAL_GPIO_Init+0x18>
  }
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e001      	b.n	8003a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	807b      	strh	r3, [r7, #2]
 8003a36:	4613      	mov	r3, r2
 8003a38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a3a:	787b      	ldrb	r3, [r7, #1]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a40:	887a      	ldrh	r2, [r7, #2]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003a46:	e003      	b.n	8003a50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	041a      	lsls	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e31d      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6e:	4b94      	ldr	r3, [pc, #592]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a78:	4b91      	ldr	r3, [pc, #580]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d07b      	beq.n	8003b86 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d006      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d10f      	bne.n	8003aba <HAL_RCC_OscConfig+0x5e>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa2:	4b87      	ldr	r3, [pc, #540]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d06a      	beq.n	8003b84 <HAL_RCC_OscConfig+0x128>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d166      	bne.n	8003b84 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e2f7      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x74>
 8003ac2:	4b7f      	ldr	r3, [pc, #508]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7e      	ldr	r2, [pc, #504]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e02d      	b.n	8003b2c <HAL_RCC_OscConfig+0xd0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10c      	bne.n	8003af2 <HAL_RCC_OscConfig+0x96>
 8003ad8:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a78      	ldr	r2, [pc, #480]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a75      	ldr	r2, [pc, #468]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0xd0>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0xb8>
 8003afa:	4b71      	ldr	r3, [pc, #452]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a70      	ldr	r2, [pc, #448]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6d      	ldr	r2, [pc, #436]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0xd0>
 8003b14:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a69      	ldr	r2, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a66      	ldr	r2, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7ff fc5a 	bl	80033ec <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7ff fc56 	bl	80033ec <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e2ad      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0xe0>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7ff fc46 	bl	80033ec <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b64:	f7ff fc42 	bl	80033ec <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e299      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b76:	4b52      	ldr	r3, [pc, #328]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x108>
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d05a      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x176>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d116      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_OscConfig+0x160>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e276      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	493d      	ldr	r1, [pc, #244]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd0:	e03a      	b.n	8003c48 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_RCC_OscConfig+0x268>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7ff fc04 	bl	80033ec <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be8:	f7ff fc00 	bl	80033ec <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e257      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	492a      	ldr	r1, [pc, #168]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
 8003c1a:	e015      	b.n	8003c48 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1c:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <HAL_RCC_OscConfig+0x268>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7ff fbe3 	bl	80033ec <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7ff fbdf 	bl	80033ec <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e236      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80b8 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d170      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_OscConfig+0x218>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e21a      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d921      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fc47 	bl	800451c <RCC_SetFlashLatencyFromMSIRange>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e208      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	4901      	ldr	r1, [pc, #4]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e020      	b.n	8003d02 <HAL_RCC_OscConfig+0x2a6>
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc8:	4ba4      	ldr	r3, [pc, #656]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	49a1      	ldr	r1, [pc, #644]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cda:	4ba0      	ldr	r3, [pc, #640]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	061b      	lsls	r3, r3, #24
 8003ce8:	499c      	ldr	r1, [pc, #624]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fc12 	bl	800451c <RCC_SetFlashLatencyFromMSIRange>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1d3      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	0b5b      	lsrs	r3, r3, #13
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d12:	4a92      	ldr	r2, [pc, #584]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	0912      	lsrs	r2, r2, #4
 8003d18:	f002 020f 	and.w	r2, r2, #15
 8003d1c:	4990      	ldr	r1, [pc, #576]	; (8003f60 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	5c8a      	ldrb	r2, [r1, r2]
 8003d20:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d22:	4a90      	ldr	r2, [pc, #576]	; (8003f64 <HAL_RCC_OscConfig+0x508>)
 8003d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d26:	4b90      	ldr	r3, [pc, #576]	; (8003f68 <HAL_RCC_OscConfig+0x50c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fb12 	bl	8003354 <HAL_InitTick>
 8003d30:	4603      	mov	r3, r0
 8003d32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d045      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	e1b5      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d029      	beq.n	8003d9a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d46:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCC_OscConfig+0x510>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7ff fb4e 	bl	80033ec <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d54:	f7ff fb4a 	bl	80033ec <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e1a1      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d66:	4b7d      	ldr	r3, [pc, #500]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d72:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4977      	ldr	r1, [pc, #476]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d84:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	4972      	ldr	r1, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d9a:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x510>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7ff fb24 	bl	80033ec <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003da8:	f7ff fb20 	bl	80033ec <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e177      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003dba:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d030      	beq.n	8003e34 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_OscConfig+0x514>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7ff fb04 	bl	80033ec <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7ff fb00 	bl	80033ec <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e157      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dfa:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x38c>
 8003e06:	e015      	b.n	8003e34 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_OscConfig+0x514>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7ff faed 	bl	80033ec <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7ff fae9 	bl	80033ec <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e140      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e28:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80b5 	beq.w	8003fac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	4a41      	ldr	r2, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	6253      	str	r3, [r2, #36]	; 0x24
 8003e5e:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_OscConfig+0x518>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <HAL_RCC_OscConfig+0x518>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <HAL_RCC_OscConfig+0x518>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7ff fab1 	bl	80033ec <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7ff faad 	bl	80033ec <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	; 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e104      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <HAL_RCC_OscConfig+0x518>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x466>
 8003eb4:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6353      	str	r3, [r2, #52]	; 0x34
 8003ec0:	e02d      	b.n	8003f1e <HAL_RCC_OscConfig+0x4c2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x488>
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed4:	6353      	str	r3, [r2, #52]	; 0x34
 8003ed6:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee0:	6353      	str	r3, [r2, #52]	; 0x34
 8003ee2:	e01c      	b.n	8003f1e <HAL_RCC_OscConfig+0x4c2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCC_OscConfig+0x4aa>
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef6:	6353      	str	r3, [r2, #52]	; 0x34
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f02:	6353      	str	r3, [r2, #52]	; 0x34
 8003f04:	e00b      	b.n	8003f1e <HAL_RCC_OscConfig+0x4c2>
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0a:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f10:	6353      	str	r3, [r2, #52]	; 0x34
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f1c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d015      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f26:	f7ff fa61 	bl	80033ec <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7ff fa5d 	bl	80033ec <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0b2      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_OscConfig+0x500>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ee      	beq.n	8003f2e <HAL_RCC_OscConfig+0x4d2>
 8003f50:	e023      	b.n	8003f9a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7ff fa4b 	bl	80033ec <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f58:	e019      	b.n	8003f8e <HAL_RCC_OscConfig+0x532>
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	0800909c 	.word	0x0800909c
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000034 	.word	0x20000034
 8003f6c:	42470020 	.word	0x42470020
 8003f70:	42470680 	.word	0x42470680
 8003f74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7ff fa38 	bl	80033ec <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e08d      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f8e:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ee      	bne.n	8003f78 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f9a:	7ffb      	ldrb	r3, [r7, #31]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	4a43      	ldr	r2, [pc, #268]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d079      	beq.n	80040a8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d056      	beq.n	8004068 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d13b      	bne.n	800403a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <HAL_RCC_OscConfig+0x65c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7ff fa10 	bl	80033ec <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7ff fa0c 	bl	80033ec <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e063      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe2:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4319      	orrs	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	430b      	orrs	r3, r1
 8004006:	492b      	ldr	r1, [pc, #172]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400c:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <HAL_RCC_OscConfig+0x65c>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7ff f9eb 	bl	80033ec <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7ff f9e7 	bl	80033ec <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e03e      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x5be>
 8004038:	e036      	b.n	80040a8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <HAL_RCC_OscConfig+0x65c>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7ff f9d4 	bl	80033ec <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7ff f9d0 	bl	80033ec <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e027      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800405a:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x5ec>
 8004066:	e01f      	b.n	80040a8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01a      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_RCC_OscConfig+0x658>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	429a      	cmp	r2, r3
 8004086:	d10d      	bne.n	80040a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	42470060 	.word	0x42470060

080040bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e11a      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d919      	bls.n	8004112 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d105      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x34>
 80040e4:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a89      	ldr	r2, [pc, #548]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b87      	ldr	r3, [pc, #540]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 0201 	bic.w	r2, r3, #1
 80040f8:	4985      	ldr	r1, [pc, #532]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004100:	4b83      	ldr	r3, [pc, #524]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0f9      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411e:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	497a      	ldr	r1, [pc, #488]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 800412c:	4313      	orrs	r3, r2
 800412e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 808e 	beq.w	800425a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004146:	4b73      	ldr	r3, [pc, #460]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d121      	bne.n	8004196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0d7      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415e:	4b6d      	ldr	r3, [pc, #436]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d115      	bne.n	8004196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0cb      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004176:	4b67      	ldr	r3, [pc, #412]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0bf      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004186:	4b63      	ldr	r3, [pc, #396]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0b7      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	495c      	ldr	r1, [pc, #368]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a8:	f7ff f920 	bl	80033ec <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d112      	bne.n	80041dc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7ff f918 	bl	80033ec <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e09b      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ce:	4b51      	ldr	r3, [pc, #324]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d1ee      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xfc>
 80041da:	e03e      	b.n	800425a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d112      	bne.n	800420a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e6:	f7ff f901 	bl	80033ec <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e084      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041fc:	4b45      	ldr	r3, [pc, #276]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x12a>
 8004208:	e027      	b.n	800425a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d11d      	bne.n	800424e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7ff f8ea 	bl	80033ec <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e06d      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800422a:	4b3a      	ldr	r3, [pc, #232]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d1ee      	bne.n	8004214 <HAL_RCC_ClockConfig+0x158>
 8004236:	e010      	b.n	800425a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7ff f8d8 	bl	80033ec <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e05b      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800424e:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425a:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d219      	bcs.n	800429c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <HAL_RCC_ClockConfig+0x1be>
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a27      	ldr	r2, [pc, #156]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	4923      	ldr	r1, [pc, #140]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_RCC_ClockConfig+0x254>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e034      	b.n	8004306 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4917      	ldr	r1, [pc, #92]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	490f      	ldr	r1, [pc, #60]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042da:	f000 f823 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 80042de:	4601      	mov	r1, r0
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCC_ClockConfig+0x258>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
 80042ee:	fa21 f303 	lsr.w	r3, r1, r3
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <HAL_RCC_ClockConfig+0x260>)
 80042f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x264>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f82a 	bl	8003354 <HAL_InitTick>
 8004300:	4603      	mov	r3, r0
 8004302:	72fb      	strb	r3, [r7, #11]

  return status;
 8004304:	7afb      	ldrb	r3, [r7, #11]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023c00 	.word	0x40023c00
 8004314:	40023800 	.word	0x40023800
 8004318:	0800909c 	.word	0x0800909c
 800431c:	20000000 	.word	0x20000000
 8004320:	20000034 	.word	0x20000034

08004324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b08      	cmp	r3, #8
 8004338:	d007      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x26>
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d008      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x2c>
 800433e:	2b04      	cmp	r3, #4
 8004340:	f040 809f 	bne.w	8004482 <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004346:	613b      	str	r3, [r7, #16]
      break;
 8004348:	e0a9      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800434a:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800434c:	613b      	str	r3, [r7, #16]
      break;
 800434e:	e0a6      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	0c9b      	lsrs	r3, r3, #18
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	4a56      	ldr	r2, [pc, #344]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x190>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0d9b      	lsrs	r3, r3, #22
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800436a:	4b4f      	ldr	r3, [pc, #316]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d041      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	461d      	mov	r5, r3
 800437a:	f04f 0600 	mov.w	r6, #0
 800437e:	4629      	mov	r1, r5
 8004380:	4632      	mov	r2, r6
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	f04f 0400 	mov.w	r4, #0
 800438a:	0154      	lsls	r4, r2, #5
 800438c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004390:	014b      	lsls	r3, r1, #5
 8004392:	4619      	mov	r1, r3
 8004394:	4622      	mov	r2, r4
 8004396:	1b49      	subs	r1, r1, r5
 8004398:	eb62 0206 	sbc.w	r2, r2, r6
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	f04f 0400 	mov.w	r4, #0
 80043a4:	0194      	lsls	r4, r2, #6
 80043a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043aa:	018b      	lsls	r3, r1, #6
 80043ac:	1a5b      	subs	r3, r3, r1
 80043ae:	eb64 0402 	sbc.w	r4, r4, r2
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	00e2      	lsls	r2, r4, #3
 80043bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043c0:	00d9      	lsls	r1, r3, #3
 80043c2:	460b      	mov	r3, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	195b      	adds	r3, r3, r5
 80043c8:	eb44 0406 	adc.w	r4, r4, r6
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	0262      	lsls	r2, r4, #9
 80043d6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043da:	0259      	lsls	r1, r3, #9
 80043dc:	460b      	mov	r3, r1
 80043de:	4614      	mov	r4, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	4621      	mov	r1, r4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f04f 0400 	mov.w	r4, #0
 80043ea:	461a      	mov	r2, r3
 80043ec:	4623      	mov	r3, r4
 80043ee:	f7fc febd 	bl	800116c <__aeabi_uldivmod>
 80043f2:	4603      	mov	r3, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e040      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	461d      	mov	r5, r3
 80043fe:	f04f 0600 	mov.w	r6, #0
 8004402:	4629      	mov	r1, r5
 8004404:	4632      	mov	r2, r6
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f04f 0400 	mov.w	r4, #0
 800440e:	0154      	lsls	r4, r2, #5
 8004410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004414:	014b      	lsls	r3, r1, #5
 8004416:	4619      	mov	r1, r3
 8004418:	4622      	mov	r2, r4
 800441a:	1b49      	subs	r1, r1, r5
 800441c:	eb62 0206 	sbc.w	r2, r2, r6
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f04f 0400 	mov.w	r4, #0
 8004428:	0194      	lsls	r4, r2, #6
 800442a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800442e:	018b      	lsls	r3, r1, #6
 8004430:	1a5b      	subs	r3, r3, r1
 8004432:	eb64 0402 	sbc.w	r4, r4, r2
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	00e2      	lsls	r2, r4, #3
 8004440:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004444:	00d9      	lsls	r1, r3, #3
 8004446:	460b      	mov	r3, r1
 8004448:	4614      	mov	r4, r2
 800444a:	195b      	adds	r3, r3, r5
 800444c:	eb44 0406 	adc.w	r4, r4, r6
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	02a2      	lsls	r2, r4, #10
 800445a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800445e:	0299      	lsls	r1, r3, #10
 8004460:	460b      	mov	r3, r1
 8004462:	4614      	mov	r4, r2
 8004464:	4618      	mov	r0, r3
 8004466:	4621      	mov	r1, r4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f04f 0400 	mov.w	r4, #0
 800446e:	461a      	mov	r2, r3
 8004470:	4623      	mov	r3, r4
 8004472:	f7fc fe7b 	bl	800116c <__aeabi_uldivmod>
 8004476:	4603      	mov	r3, r0
 8004478:	460c      	mov	r4, r1
 800447a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
      break;
 8004480:	e00d      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	0b5b      	lsrs	r3, r3, #13
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	613b      	str	r3, [r7, #16]
      break;
 800449c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449e:	693b      	ldr	r3, [r7, #16]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	007a1200 	.word	0x007a1200
 80044b4:	08009090 	.word	0x08009090

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	20000000 	.word	0x20000000

080044cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d0:	f7ff fff2 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d4:	4601      	mov	r1, r0
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40023800 	.word	0x40023800
 80044f0:	080090ac 	.word	0x080090ac

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044f8:	f7ff ffde 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044fc:	4601      	mov	r1, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0adb      	lsrs	r3, r3, #11
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4a03      	ldr	r2, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	080090ac 	.word	0x080090ac

0800451c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004528:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d12c      	bne.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e016      	b.n	800457a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004556:	6253      	str	r3, [r2, #36]	; 0x24
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800456c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800456e:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004580:	d105      	bne.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004588:	d101      	bne.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800458a:	2301      	movs	r3, #1
 800458c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0f      	ldr	r2, [pc, #60]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459a:	f043 0304 	orr.w	r3, r3, #4
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 0201 	bic.w	r2, r3, #1
 80045a8:	490b      	ldr	r1, [pc, #44]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40007000 	.word	0x40007000
 80045d8:	40023c00 	.word	0x40023c00

080045dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80c6 	beq.w	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	4a60      	ldr	r2, [pc, #384]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6253      	str	r3, [r2, #36]	; 0x24
 800461a:	4b5e      	ldr	r3, [pc, #376]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004636:	4b58      	ldr	r3, [pc, #352]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a57      	ldr	r2, [pc, #348]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004642:	f7fe fed3 	bl	80033ec <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fe fecf 	bl	80033ec <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	; 0x64
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e097      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	4b4e      	ldr	r3, [pc, #312]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004668:	4b4a      	ldr	r3, [pc, #296]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004670:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	429a      	cmp	r2, r3
 800467e:	d106      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	429a      	cmp	r2, r3
 800468c:	d00f      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800469a:	d108      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800469c:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e06e      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80046ae:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046b6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d041      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d005      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d02d      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d027      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80046fa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d014      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fe fe68 	bl	80033ec <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800471e:	e00a      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004720:	f7fe fe64 	bl	80033ec <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e02a      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004736:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ee      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800474a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800474e:	d10a      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004760:	490c      	ldr	r1, [pc, #48]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004772:	4908      	ldr	r1, [pc, #32]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40023800 	.word	0x40023800
 8004798:	40007000 	.word	0x40007000
 800479c:	424706dc 	.word	0x424706dc

080047a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e06d      	b.n	800488e <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7f5b      	ldrb	r3, [r3, #29]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fd f862 	bl	800188c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	22ca      	movs	r2, #202	; 0xca
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2253      	movs	r2, #83	; 0x53
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9d8 	bl	8004b94 <RTC_EnterInitMode>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e048      	b.n	800488e <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800480a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6919      	ldr	r1, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	041a      	lsls	r2, r3, #16
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800488c:	2300      	movs	r3, #0
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004896:	b590      	push	{r4, r7, lr}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	7f1b      	ldrb	r3, [r3, #28]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_RTC_SetTime+0x18>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0a3      	b.n	80049f6 <HAL_RTC_SetTime+0x160>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2202      	movs	r2, #2
 80048b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d126      	bne.n	800490e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f985 	bl	8004be8 <RTC_ByteToBcd2>
 80048de:	4603      	mov	r3, r0
 80048e0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f97e 	bl	8004be8 <RTC_ByteToBcd2>
 80048ec:	4603      	mov	r3, r0
 80048ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80048f0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	789b      	ldrb	r3, [r3, #2]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f976 	bl	8004be8 <RTC_ByteToBcd2>
 80048fc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80048fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	78db      	ldrb	r3, [r3, #3]
 8004906:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e018      	b.n	8004940 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800492e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004934:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	78db      	ldrb	r3, [r3, #3]
 800493a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	22ca      	movs	r2, #202	; 0xca
 8004946:	625a      	str	r2, [r3, #36]	; 0x24
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2253      	movs	r2, #83	; 0x53
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f91f 	bl	8004b94 <RTC_EnterInitMode>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	22ff      	movs	r2, #255	; 0xff
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2204      	movs	r2, #4
 8004968:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e040      	b.n	80049f6 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800497e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004982:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004992:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f8bc 	bl	8004b3a <HAL_RTC_WaitForSynchro>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2204      	movs	r2, #4
 80049d4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00a      	b.n	80049f6 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	7f1b      	ldrb	r3, [r3, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_RTC_SetDate+0x18>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e08d      	b.n	8004b32 <HAL_RTC_SetDate+0x134>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10e      	bne.n	8004a46 <HAL_RTC_SetDate+0x48>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	f023 0310 	bic.w	r3, r3, #16
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	330a      	adds	r3, #10
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11c      	bne.n	8004a86 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f8c9 	bl	8004be8 <RTC_ByteToBcd2>
 8004a56:	4603      	mov	r3, r0
 8004a58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f8c2 	bl	8004be8 <RTC_ByteToBcd2>
 8004a64:	4603      	mov	r3, r0
 8004a66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	789b      	ldrb	r3, [r3, #2]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f8ba 	bl	8004be8 <RTC_ByteToBcd2>
 8004a74:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a76:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e00e      	b.n	8004aa4 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	78db      	ldrb	r3, [r3, #3]
 8004a8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a92:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004a98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	22ca      	movs	r2, #202	; 0xca
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2253      	movs	r2, #83	; 0x53
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f86d 	bl	8004b94 <RTC_EnterInitMode>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	22ff      	movs	r2, #255	; 0xff
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2204      	movs	r2, #4
 8004acc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e02c      	b.n	8004b32 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ae6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f81e 	bl	8004b3a <HAL_RTC_WaitForSynchro>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e00a      	b.n	8004b32 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	22ff      	movs	r2, #255	; 0xff
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd90      	pop	{r4, r7, pc}

08004b3a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11c      	bne.n	8004b8a <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004b60:	f7fe fc44 	bl	80033ec <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b66:	e009      	b.n	8004b7c <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b68:	f7fe fc40 	bl	80033ec <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b76:	d901      	bls.n	8004b7c <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e007      	b.n	8004b8c <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0ee      	beq.n	8004b68 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d119      	bne.n	8004bde <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004bb4:	f7fe fc1a 	bl	80033ec <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004bba:	e009      	b.n	8004bd0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004bbc:	f7fe fc16 	bl	80033ec <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bca:	d901      	bls.n	8004bd0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e007      	b.n	8004be0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0ee      	beq.n	8004bbc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8004bfa:	e005      	b.n	8004c08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004c02:	7afb      	ldrb	r3, [r7, #11]
 8004c04:	3b0a      	subs	r3, #10
 8004c06:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8004c08:	7afb      	ldrb	r3, [r7, #11]
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	d8f6      	bhi.n	8004bfc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	7afb      	ldrb	r3, [r7, #11]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	b2db      	uxtb	r3, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	7f1b      	ldrb	r3, [r3, #28]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e09e      	b.n	8004d7e <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	22ca      	movs	r2, #202	; 0xca
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2253      	movs	r2, #83	; 0x53
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01e      	beq.n	8004ca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
  {
    tickstart = HAL_GetTick();
 8004c6a:	f7fe fbbf 	bl	80033ec <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004c70:	e013      	b.n	8004c9a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c72:	f7fe fbbb 	bl	80033ec <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c80:	d90b      	bls.n	8004c9a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	22ff      	movs	r2, #255	; 0xff
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e071      	b.n	8004d7e <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e4      	bne.n	8004c72 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb6:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004cc8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004cca:	f7fe fb8f 	bl	80033ec <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004cd0:	e013      	b.n	8004cfa <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004cd2:	f7fe fb8b 	bl	80033ec <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce0:	d90b      	bls.n	8004cfa <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	22ff      	movs	r2, #255	; 0xff
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2203      	movs	r2, #3
 8004cee:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e041      	b.n	8004d7e <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0e4      	beq.n	8004cd2 <HAL_RTCEx_SetWakeUpTimer_IT+0xaa>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0207 	bic.w	r2, r2, #7
 8004d1e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8004d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3a:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8004d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d46:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d56:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d66:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	22ff      	movs	r2, #255	; 0xff
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40010400 	.word	0x40010400

08004d8c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f816 	bl	8004dd4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004db8:	60da      	str	r2, [r3, #12]
  }


  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8004dbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	775a      	strb	r2, [r3, #29]
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e03f      	b.n	8004e78 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fc fec1 	bl	8001b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2224      	movs	r2, #36	; 0x24
 8004e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fb92 	bl	8005554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f040 8083 	bne.w	8004fa8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_UART_Transmit+0x2e>
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e07b      	b.n	8004faa <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Transmit+0x40>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e074      	b.n	8004faa <HAL_UART_Transmit+0x12a>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2221      	movs	r2, #33	; 0x21
 8004ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ed6:	f7fe fa89 	bl	80033ec <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004ef0:	e042      	b.n	8004f78 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f08:	d122      	bne.n	8004f50 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f9b3 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e042      	b.n	8004faa <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f36:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3302      	adds	r3, #2
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	e017      	b.n	8004f78 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	e013      	b.n	8004f78 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2180      	movs	r1, #128	; 0x80
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f990 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e01f      	b.n	8004faa <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	60ba      	str	r2, [r7, #8]
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1b7      	bne.n	8004ef2 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2140      	movs	r1, #64	; 0x40
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f977 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e006      	b.n	8004faa <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d140      	bne.n	800504e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Receive_IT+0x26>
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e039      	b.n	8005050 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Receive_IT+0x38>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e032      	b.n	8005050 <HAL_UART_Receive_IT+0x9e>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2222      	movs	r2, #34	; 0x22
 800500e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005028:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0220 	orr.w	r2, r2, #32
 8005048:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800504e:	2302      	movs	r3, #2
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
	...

0800505c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_UART_IRQHandler+0x52>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9d2 	bl	8005450 <UART_Receive_IT>
      return;
 80050ac:	e0d1      	b.n	8005252 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80b0 	beq.w	8005216 <HAL_UART_IRQHandler+0x1ba>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <HAL_UART_IRQHandler+0x70>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80a5 	beq.w	8005216 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_UART_IRQHandler+0x90>
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_UART_IRQHandler+0xb0>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	f043 0202 	orr.w	r2, r3, #2
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_UART_IRQHandler+0xd0>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	f043 0204 	orr.w	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00f      	beq.n	8005156 <HAL_UART_IRQHandler+0xfa>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_UART_IRQHandler+0xee>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d078      	beq.n	8005250 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <HAL_UART_IRQHandler+0x11c>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f96c 	bl	8005450 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <HAL_UART_IRQHandler+0x144>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d031      	beq.n	8005204 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8b7 	bl	8005314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d123      	bne.n	80051fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	4a21      	ldr	r2, [pc, #132]	; (8005258 <HAL_UART_IRQHandler+0x1fc>)
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fa40 	bl	800365e <HAL_DMA_Abort_IT>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d016      	beq.n	8005212 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051ee:	4610      	mov	r0, r2
 80051f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f2:	e00e      	b.n	8005212 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f83a 	bl	800526e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	e00a      	b.n	8005212 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f836 	bl	800526e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005202:	e006      	b.n	8005212 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f832 	bl	800526e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005210:	e01e      	b.n	8005250 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005212:	bf00      	nop
    return;
 8005214:	e01c      	b.n	8005250 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_UART_IRQHandler+0x1d6>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8a3 	bl	8005376 <UART_Transmit_IT>
    return;
 8005230:	e00f      	b.n	8005252 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_UART_IRQHandler+0x1f6>
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8ea 	bl	8005420 <UART_EndTransmit_IT>
    return;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005250:	bf00      	nop
  }
}
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	0800534f 	.word	0x0800534f

0800525c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr

0800526e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	e02c      	b.n	80052ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d028      	beq.n	80052ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a0:	f7fe f8a4 	bl	80033ec <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d21d      	bcs.n	80052ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e00f      	b.n	800530c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4013      	ands	r3, r2
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	bf0c      	ite	eq
 80052fc:	2301      	moveq	r3, #1
 80052fe:	2300      	movne	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	429a      	cmp	r2, r3
 8005308:	d0c3      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800532a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff80 	bl	800526e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b21      	cmp	r3, #33	; 0x21
 8005388:	d144      	bne.n	8005414 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d11a      	bne.n	80053ca <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	1c9a      	adds	r2, r3, #2
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]
 80053bc:	e00e      	b.n	80053dc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	621a      	str	r2, [r3, #32]
 80053c8:	e008      	b.n	80053dc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6211      	str	r1, [r2, #32]
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4619      	mov	r1, r3
 80053ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005436:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff0b 	bl	800525c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b22      	cmp	r3, #34	; 0x22
 8005462:	d171      	bne.n	8005548 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d123      	bne.n	80054b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10e      	bne.n	800549a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
 8005498:	e029      	b.n	80054ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
 80054b4:	e01b      	b.n	80054ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6858      	ldr	r0, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	1c59      	adds	r1, r3, #1
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6291      	str	r1, [r2, #40]	; 0x28
 80054ce:	b2c2      	uxtb	r2, r0
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e00c      	b.n	80054ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	1c58      	adds	r0, r3, #1
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	6288      	str	r0, [r1, #40]	; 0x28
 80054e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4619      	mov	r1, r3
 80054fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d120      	bne.n	8005544 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0220 	bic.w	r2, r2, #32
 8005510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005520:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc fc10 	bl	8001d60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e002      	b.n	800554a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
  }
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4313      	orrs	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005594:	f023 030c 	bic.w	r3, r3, #12
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	430b      	orrs	r3, r1
 80055a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a55      	ldr	r2, [pc, #340]	; (8005714 <UART_SetConfig+0x1c0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d103      	bne.n	80055ca <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055c2:	f7fe ff97 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	e002      	b.n	80055d0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055ca:	f7fe ff7f 	bl	80044cc <HAL_RCC_GetPCLK1Freq>
 80055ce:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d8:	d14c      	bne.n	8005674 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009a      	lsls	r2, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	4a49      	ldr	r2, [pc, #292]	; (8005718 <UART_SetConfig+0x1c4>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	0119      	lsls	r1, r3, #4
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009a      	lsls	r2, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <UART_SetConfig+0x1c4>)
 8005612:	fba3 0302 	umull	r0, r3, r3, r2
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2064      	movs	r0, #100	; 0x64
 800561a:	fb00 f303 	mul.w	r3, r0, r3
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	3332      	adds	r3, #50	; 0x32
 8005624:	4a3c      	ldr	r2, [pc, #240]	; (8005718 <UART_SetConfig+0x1c4>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005632:	4419      	add	r1, r3
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009a      	lsls	r2, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	fbb2 f2f3 	udiv	r2, r2, r3
 800564a:	4b33      	ldr	r3, [pc, #204]	; (8005718 <UART_SetConfig+0x1c4>)
 800564c:	fba3 0302 	umull	r0, r3, r3, r2
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	2064      	movs	r0, #100	; 0x64
 8005654:	fb00 f303 	mul.w	r3, r0, r3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	3332      	adds	r3, #50	; 0x32
 800565e:	4a2e      	ldr	r2, [pc, #184]	; (8005718 <UART_SetConfig+0x1c4>)
 8005660:	fba2 2303 	umull	r2, r3, r2, r3
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	f003 0207 	and.w	r2, r3, #7
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	440a      	add	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005672:	e04a      	b.n	800570a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009a      	lsls	r2, r3, #2
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	4a23      	ldr	r2, [pc, #140]	; (8005718 <UART_SetConfig+0x1c4>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	0119      	lsls	r1, r3, #4
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009a      	lsls	r2, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <UART_SetConfig+0x1c4>)
 80056ac:	fba3 0302 	umull	r0, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2064      	movs	r0, #100	; 0x64
 80056b4:	fb00 f303 	mul.w	r3, r0, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a16      	ldr	r2, [pc, #88]	; (8005718 <UART_SetConfig+0x1c4>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ca:	4419      	add	r1, r3
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009a      	lsls	r2, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	fbb2 f2f3 	udiv	r2, r2, r3
 80056e2:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <UART_SetConfig+0x1c4>)
 80056e4:	fba3 0302 	umull	r0, r3, r3, r2
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	2064      	movs	r0, #100	; 0x64
 80056ec:	fb00 f303 	mul.w	r3, r0, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	3332      	adds	r3, #50	; 0x32
 80056f6:	4a08      	ldr	r2, [pc, #32]	; (8005718 <UART_SetConfig+0x1c4>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	440a      	add	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40013800 	.word	0x40013800
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <__errno>:
 800571c:	4b01      	ldr	r3, [pc, #4]	; (8005724 <__errno+0x8>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000003c 	.word	0x2000003c

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	2500      	movs	r5, #0
 800572c:	4e0c      	ldr	r6, [pc, #48]	; (8005760 <__libc_init_array+0x38>)
 800572e:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <__libc_init_array+0x3c>)
 8005730:	1ba4      	subs	r4, r4, r6
 8005732:	10a4      	asrs	r4, r4, #2
 8005734:	42a5      	cmp	r5, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	f003 fbc2 	bl	8008ec0 <_init>
 800573c:	2500      	movs	r5, #0
 800573e:	4e0a      	ldr	r6, [pc, #40]	; (8005768 <__libc_init_array+0x40>)
 8005740:	4c0a      	ldr	r4, [pc, #40]	; (800576c <__libc_init_array+0x44>)
 8005742:	1ba4      	subs	r4, r4, r6
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	42a5      	cmp	r5, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005750:	4798      	blx	r3
 8005752:	3501      	adds	r5, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800575a:	4798      	blx	r3
 800575c:	3501      	adds	r5, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	08009368 	.word	0x08009368
 8005764:	08009368 	.word	0x08009368
 8005768:	08009368 	.word	0x08009368
 800576c:	0800936c 	.word	0x0800936c

08005770 <memcpy>:
 8005770:	b510      	push	{r4, lr}
 8005772:	1e43      	subs	r3, r0, #1
 8005774:	440a      	add	r2, r1
 8005776:	4291      	cmp	r1, r2
 8005778:	d100      	bne.n	800577c <memcpy+0xc>
 800577a:	bd10      	pop	{r4, pc}
 800577c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005784:	e7f7      	b.n	8005776 <memcpy+0x6>

08005786 <memset>:
 8005786:	4603      	mov	r3, r0
 8005788:	4402      	add	r2, r0
 800578a:	4293      	cmp	r3, r2
 800578c:	d100      	bne.n	8005790 <memset+0xa>
 800578e:	4770      	bx	lr
 8005790:	f803 1b01 	strb.w	r1, [r3], #1
 8005794:	e7f9      	b.n	800578a <memset+0x4>

08005796 <__cvt>:
 8005796:	2b00      	cmp	r3, #0
 8005798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800579c:	461e      	mov	r6, r3
 800579e:	bfbb      	ittet	lt
 80057a0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	461e      	movlt	r6, r3
 80057a6:	2300      	movge	r3, #0
 80057a8:	232d      	movlt	r3, #45	; 0x2d
 80057aa:	b088      	sub	sp, #32
 80057ac:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80057ae:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80057b2:	f027 0720 	bic.w	r7, r7, #32
 80057b6:	2f46      	cmp	r7, #70	; 0x46
 80057b8:	4614      	mov	r4, r2
 80057ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057bc:	700b      	strb	r3, [r1, #0]
 80057be:	d004      	beq.n	80057ca <__cvt+0x34>
 80057c0:	2f45      	cmp	r7, #69	; 0x45
 80057c2:	d100      	bne.n	80057c6 <__cvt+0x30>
 80057c4:	3501      	adds	r5, #1
 80057c6:	2302      	movs	r3, #2
 80057c8:	e000      	b.n	80057cc <__cvt+0x36>
 80057ca:	2303      	movs	r3, #3
 80057cc:	aa07      	add	r2, sp, #28
 80057ce:	9204      	str	r2, [sp, #16]
 80057d0:	aa06      	add	r2, sp, #24
 80057d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057d6:	e9cd 3500 	strd	r3, r5, [sp]
 80057da:	4622      	mov	r2, r4
 80057dc:	4633      	mov	r3, r6
 80057de:	f001 fbc3 	bl	8006f68 <_dtoa_r>
 80057e2:	2f47      	cmp	r7, #71	; 0x47
 80057e4:	4680      	mov	r8, r0
 80057e6:	d102      	bne.n	80057ee <__cvt+0x58>
 80057e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d526      	bpl.n	800583c <__cvt+0xa6>
 80057ee:	2f46      	cmp	r7, #70	; 0x46
 80057f0:	eb08 0905 	add.w	r9, r8, r5
 80057f4:	d111      	bne.n	800581a <__cvt+0x84>
 80057f6:	f898 3000 	ldrb.w	r3, [r8]
 80057fa:	2b30      	cmp	r3, #48	; 0x30
 80057fc:	d10a      	bne.n	8005814 <__cvt+0x7e>
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	4620      	mov	r0, r4
 8005804:	4631      	mov	r1, r6
 8005806:	f7fb f8e7 	bl	80009d8 <__aeabi_dcmpeq>
 800580a:	b918      	cbnz	r0, 8005814 <__cvt+0x7e>
 800580c:	f1c5 0501 	rsb	r5, r5, #1
 8005810:	f8ca 5000 	str.w	r5, [sl]
 8005814:	f8da 3000 	ldr.w	r3, [sl]
 8005818:	4499      	add	r9, r3
 800581a:	2200      	movs	r2, #0
 800581c:	2300      	movs	r3, #0
 800581e:	4620      	mov	r0, r4
 8005820:	4631      	mov	r1, r6
 8005822:	f7fb f8d9 	bl	80009d8 <__aeabi_dcmpeq>
 8005826:	b938      	cbnz	r0, 8005838 <__cvt+0xa2>
 8005828:	2230      	movs	r2, #48	; 0x30
 800582a:	9b07      	ldr	r3, [sp, #28]
 800582c:	454b      	cmp	r3, r9
 800582e:	d205      	bcs.n	800583c <__cvt+0xa6>
 8005830:	1c59      	adds	r1, r3, #1
 8005832:	9107      	str	r1, [sp, #28]
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e7f8      	b.n	800582a <__cvt+0x94>
 8005838:	f8cd 901c 	str.w	r9, [sp, #28]
 800583c:	4640      	mov	r0, r8
 800583e:	9b07      	ldr	r3, [sp, #28]
 8005840:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005842:	eba3 0308 	sub.w	r3, r3, r8
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	b008      	add	sp, #32
 800584a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800584e <__exponent>:
 800584e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005850:	2900      	cmp	r1, #0
 8005852:	bfb4      	ite	lt
 8005854:	232d      	movlt	r3, #45	; 0x2d
 8005856:	232b      	movge	r3, #43	; 0x2b
 8005858:	4604      	mov	r4, r0
 800585a:	bfb8      	it	lt
 800585c:	4249      	neglt	r1, r1
 800585e:	2909      	cmp	r1, #9
 8005860:	f804 2b02 	strb.w	r2, [r4], #2
 8005864:	7043      	strb	r3, [r0, #1]
 8005866:	dd21      	ble.n	80058ac <__exponent+0x5e>
 8005868:	f10d 0307 	add.w	r3, sp, #7
 800586c:	461f      	mov	r7, r3
 800586e:	260a      	movs	r6, #10
 8005870:	fb91 f5f6 	sdiv	r5, r1, r6
 8005874:	fb06 1115 	mls	r1, r6, r5, r1
 8005878:	2d09      	cmp	r5, #9
 800587a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800587e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005882:	f103 32ff 	add.w	r2, r3, #4294967295
 8005886:	4629      	mov	r1, r5
 8005888:	dc09      	bgt.n	800589e <__exponent+0x50>
 800588a:	3130      	adds	r1, #48	; 0x30
 800588c:	3b02      	subs	r3, #2
 800588e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005892:	42bb      	cmp	r3, r7
 8005894:	4622      	mov	r2, r4
 8005896:	d304      	bcc.n	80058a2 <__exponent+0x54>
 8005898:	1a10      	subs	r0, r2, r0
 800589a:	b003      	add	sp, #12
 800589c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589e:	4613      	mov	r3, r2
 80058a0:	e7e6      	b.n	8005870 <__exponent+0x22>
 80058a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a6:	f804 2b01 	strb.w	r2, [r4], #1
 80058aa:	e7f2      	b.n	8005892 <__exponent+0x44>
 80058ac:	2330      	movs	r3, #48	; 0x30
 80058ae:	4419      	add	r1, r3
 80058b0:	7083      	strb	r3, [r0, #2]
 80058b2:	1d02      	adds	r2, r0, #4
 80058b4:	70c1      	strb	r1, [r0, #3]
 80058b6:	e7ef      	b.n	8005898 <__exponent+0x4a>

080058b8 <_printf_float>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b091      	sub	sp, #68	; 0x44
 80058be:	460c      	mov	r4, r1
 80058c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80058c2:	4693      	mov	fp, r2
 80058c4:	461e      	mov	r6, r3
 80058c6:	4605      	mov	r5, r0
 80058c8:	f002 fc2c 	bl	8008124 <_localeconv_r>
 80058cc:	6803      	ldr	r3, [r0, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	9309      	str	r3, [sp, #36]	; 0x24
 80058d2:	f7fa fc55 	bl	8000180 <strlen>
 80058d6:	2300      	movs	r3, #0
 80058d8:	930e      	str	r3, [sp, #56]	; 0x38
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	900a      	str	r0, [sp, #40]	; 0x28
 80058de:	3307      	adds	r3, #7
 80058e0:	f023 0307 	bic.w	r3, r3, #7
 80058e4:	f103 0208 	add.w	r2, r3, #8
 80058e8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80058ec:	f8d4 a000 	ldr.w	sl, [r4]
 80058f0:	603a      	str	r2, [r7, #0]
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058fa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80058fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005902:	930b      	str	r3, [sp, #44]	; 0x2c
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	4ba6      	ldr	r3, [pc, #664]	; (8005ba4 <_printf_float+0x2ec>)
 800590a:	4638      	mov	r0, r7
 800590c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800590e:	f7fb f895 	bl	8000a3c <__aeabi_dcmpun>
 8005912:	bb68      	cbnz	r0, 8005970 <_printf_float+0xb8>
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	4ba2      	ldr	r3, [pc, #648]	; (8005ba4 <_printf_float+0x2ec>)
 800591a:	4638      	mov	r0, r7
 800591c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800591e:	f7fb f86f 	bl	8000a00 <__aeabi_dcmple>
 8005922:	bb28      	cbnz	r0, 8005970 <_printf_float+0xb8>
 8005924:	2200      	movs	r2, #0
 8005926:	2300      	movs	r3, #0
 8005928:	4638      	mov	r0, r7
 800592a:	4649      	mov	r1, r9
 800592c:	f7fb f85e 	bl	80009ec <__aeabi_dcmplt>
 8005930:	b110      	cbz	r0, 8005938 <_printf_float+0x80>
 8005932:	232d      	movs	r3, #45	; 0x2d
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	4f9b      	ldr	r7, [pc, #620]	; (8005ba8 <_printf_float+0x2f0>)
 800593a:	4b9c      	ldr	r3, [pc, #624]	; (8005bac <_printf_float+0x2f4>)
 800593c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005940:	bf98      	it	ls
 8005942:	461f      	movls	r7, r3
 8005944:	2303      	movs	r3, #3
 8005946:	f04f 0900 	mov.w	r9, #0
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	f02a 0304 	bic.w	r3, sl, #4
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	9600      	str	r6, [sp, #0]
 8005954:	465b      	mov	r3, fp
 8005956:	aa0f      	add	r2, sp, #60	; 0x3c
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	f000 f9e2 	bl	8005d24 <_printf_common>
 8005960:	3001      	adds	r0, #1
 8005962:	f040 8090 	bne.w	8005a86 <_printf_float+0x1ce>
 8005966:	f04f 30ff 	mov.w	r0, #4294967295
 800596a:	b011      	add	sp, #68	; 0x44
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	463a      	mov	r2, r7
 8005972:	464b      	mov	r3, r9
 8005974:	4638      	mov	r0, r7
 8005976:	4649      	mov	r1, r9
 8005978:	f7fb f860 	bl	8000a3c <__aeabi_dcmpun>
 800597c:	b110      	cbz	r0, 8005984 <_printf_float+0xcc>
 800597e:	4f8c      	ldr	r7, [pc, #560]	; (8005bb0 <_printf_float+0x2f8>)
 8005980:	4b8c      	ldr	r3, [pc, #560]	; (8005bb4 <_printf_float+0x2fc>)
 8005982:	e7db      	b.n	800593c <_printf_float+0x84>
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800598a:	1c59      	adds	r1, r3, #1
 800598c:	a80d      	add	r0, sp, #52	; 0x34
 800598e:	a90e      	add	r1, sp, #56	; 0x38
 8005990:	d140      	bne.n	8005a14 <_printf_float+0x15c>
 8005992:	2306      	movs	r3, #6
 8005994:	6063      	str	r3, [r4, #4]
 8005996:	f04f 0c00 	mov.w	ip, #0
 800599a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800599e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	463a      	mov	r2, r7
 80059ae:	464b      	mov	r3, r9
 80059b0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80059b4:	4628      	mov	r0, r5
 80059b6:	f7ff feee 	bl	8005796 <__cvt>
 80059ba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80059be:	2b47      	cmp	r3, #71	; 0x47
 80059c0:	4607      	mov	r7, r0
 80059c2:	d109      	bne.n	80059d8 <_printf_float+0x120>
 80059c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c6:	1cd8      	adds	r0, r3, #3
 80059c8:	db02      	blt.n	80059d0 <_printf_float+0x118>
 80059ca:	6862      	ldr	r2, [r4, #4]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	dd47      	ble.n	8005a60 <_printf_float+0x1a8>
 80059d0:	f1a8 0802 	sub.w	r8, r8, #2
 80059d4:	fa5f f888 	uxtb.w	r8, r8
 80059d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80059dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059de:	d824      	bhi.n	8005a2a <_printf_float+0x172>
 80059e0:	3901      	subs	r1, #1
 80059e2:	4642      	mov	r2, r8
 80059e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059e8:	910d      	str	r1, [sp, #52]	; 0x34
 80059ea:	f7ff ff30 	bl	800584e <__exponent>
 80059ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059f0:	4681      	mov	r9, r0
 80059f2:	1813      	adds	r3, r2, r0
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	6123      	str	r3, [r4, #16]
 80059f8:	dc02      	bgt.n	8005a00 <_printf_float+0x148>
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	07d1      	lsls	r1, r2, #31
 80059fe:	d501      	bpl.n	8005a04 <_printf_float+0x14c>
 8005a00:	3301      	adds	r3, #1
 8005a02:	6123      	str	r3, [r4, #16]
 8005a04:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0a2      	beq.n	8005952 <_printf_float+0x9a>
 8005a0c:	232d      	movs	r3, #45	; 0x2d
 8005a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a12:	e79e      	b.n	8005952 <_printf_float+0x9a>
 8005a14:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005a18:	f000 816e 	beq.w	8005cf8 <_printf_float+0x440>
 8005a1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a20:	d1b9      	bne.n	8005996 <_printf_float+0xde>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1b7      	bne.n	8005996 <_printf_float+0xde>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e7b4      	b.n	8005994 <_printf_float+0xdc>
 8005a2a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005a2e:	d119      	bne.n	8005a64 <_printf_float+0x1ac>
 8005a30:	2900      	cmp	r1, #0
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	dd0c      	ble.n	8005a50 <_printf_float+0x198>
 8005a36:	6121      	str	r1, [r4, #16]
 8005a38:	b913      	cbnz	r3, 8005a40 <_printf_float+0x188>
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	07d2      	lsls	r2, r2, #31
 8005a3e:	d502      	bpl.n	8005a46 <_printf_float+0x18e>
 8005a40:	3301      	adds	r3, #1
 8005a42:	440b      	add	r3, r1
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a48:	f04f 0900 	mov.w	r9, #0
 8005a4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a4e:	e7d9      	b.n	8005a04 <_printf_float+0x14c>
 8005a50:	b913      	cbnz	r3, 8005a58 <_printf_float+0x1a0>
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	07d0      	lsls	r0, r2, #31
 8005a56:	d501      	bpl.n	8005a5c <_printf_float+0x1a4>
 8005a58:	3302      	adds	r3, #2
 8005a5a:	e7f3      	b.n	8005a44 <_printf_float+0x18c>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e7f1      	b.n	8005a44 <_printf_float+0x18c>
 8005a60:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005a64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	db05      	blt.n	8005a78 <_printf_float+0x1c0>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	07d1      	lsls	r1, r2, #31
 8005a72:	d5e8      	bpl.n	8005a46 <_printf_float+0x18e>
 8005a74:	3301      	adds	r3, #1
 8005a76:	e7e5      	b.n	8005a44 <_printf_float+0x18c>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfcc      	ite	gt
 8005a7c:	2301      	movgt	r3, #1
 8005a7e:	f1c3 0302 	rsble	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	e7de      	b.n	8005a44 <_printf_float+0x18c>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	055a      	lsls	r2, r3, #21
 8005a8a:	d407      	bmi.n	8005a9c <_printf_float+0x1e4>
 8005a8c:	6923      	ldr	r3, [r4, #16]
 8005a8e:	463a      	mov	r2, r7
 8005a90:	4659      	mov	r1, fp
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b0      	blx	r6
 8005a96:	3001      	adds	r0, #1
 8005a98:	d129      	bne.n	8005aee <_printf_float+0x236>
 8005a9a:	e764      	b.n	8005966 <_printf_float+0xae>
 8005a9c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005aa0:	f240 80d7 	bls.w	8005c52 <_printf_float+0x39a>
 8005aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f7fa ff94 	bl	80009d8 <__aeabi_dcmpeq>
 8005ab0:	b388      	cbz	r0, 8005b16 <_printf_float+0x25e>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4a40      	ldr	r2, [pc, #256]	; (8005bb8 <_printf_float+0x300>)
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b0      	blx	r6
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f af52 	beq.w	8005966 <_printf_float+0xae>
 8005ac2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	db02      	blt.n	8005ad0 <_printf_float+0x218>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	07d8      	lsls	r0, r3, #31
 8005ace:	d50e      	bpl.n	8005aee <_printf_float+0x236>
 8005ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b0      	blx	r6
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f af43 	beq.w	8005966 <_printf_float+0xae>
 8005ae0:	2700      	movs	r7, #0
 8005ae2:	f104 081a 	add.w	r8, r4, #26
 8005ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	42bb      	cmp	r3, r7
 8005aec:	dc09      	bgt.n	8005b02 <_printf_float+0x24a>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	079f      	lsls	r7, r3, #30
 8005af2:	f100 80fd 	bmi.w	8005cf0 <_printf_float+0x438>
 8005af6:	68e0      	ldr	r0, [r4, #12]
 8005af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005afa:	4298      	cmp	r0, r3
 8005afc:	bfb8      	it	lt
 8005afe:	4618      	movlt	r0, r3
 8005b00:	e733      	b.n	800596a <_printf_float+0xb2>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4642      	mov	r2, r8
 8005b06:	4659      	mov	r1, fp
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b0      	blx	r6
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f af2a 	beq.w	8005966 <_printf_float+0xae>
 8005b12:	3701      	adds	r7, #1
 8005b14:	e7e7      	b.n	8005ae6 <_printf_float+0x22e>
 8005b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	dc2b      	bgt.n	8005b74 <_printf_float+0x2bc>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <_printf_float+0x300>)
 8005b20:	4659      	mov	r1, fp
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b0      	blx	r6
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af1d 	beq.w	8005966 <_printf_float+0xae>
 8005b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b2e:	b923      	cbnz	r3, 8005b3a <_printf_float+0x282>
 8005b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b32:	b913      	cbnz	r3, 8005b3a <_printf_float+0x282>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07d9      	lsls	r1, r3, #31
 8005b38:	d5d9      	bpl.n	8005aee <_printf_float+0x236>
 8005b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3e:	4659      	mov	r1, fp
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b0      	blx	r6
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f af0e 	beq.w	8005966 <_printf_float+0xae>
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	f104 091a 	add.w	r9, r4, #26
 8005b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b54:	425b      	negs	r3, r3
 8005b56:	4543      	cmp	r3, r8
 8005b58:	dc01      	bgt.n	8005b5e <_printf_float+0x2a6>
 8005b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b5c:	e797      	b.n	8005a8e <_printf_float+0x1d6>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	464a      	mov	r2, r9
 8005b62:	4659      	mov	r1, fp
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b0      	blx	r6
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f aefc 	beq.w	8005966 <_printf_float+0xae>
 8005b6e:	f108 0801 	add.w	r8, r8, #1
 8005b72:	e7ee      	b.n	8005b52 <_printf_float+0x29a>
 8005b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	bfa8      	it	ge
 8005b7c:	461a      	movge	r2, r3
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	4690      	mov	r8, r2
 8005b82:	dd07      	ble.n	8005b94 <_printf_float+0x2dc>
 8005b84:	4613      	mov	r3, r2
 8005b86:	4659      	mov	r1, fp
 8005b88:	463a      	mov	r2, r7
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b0      	blx	r6
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f aee9 	beq.w	8005966 <_printf_float+0xae>
 8005b94:	f104 031a 	add.w	r3, r4, #26
 8005b98:	f04f 0a00 	mov.w	sl, #0
 8005b9c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba2:	e015      	b.n	8005bd0 <_printf_float+0x318>
 8005ba4:	7fefffff 	.word	0x7fefffff
 8005ba8:	080090b8 	.word	0x080090b8
 8005bac:	080090b4 	.word	0x080090b4
 8005bb0:	080090c0 	.word	0x080090c0
 8005bb4:	080090bc 	.word	0x080090bc
 8005bb8:	080090c4 	.word	0x080090c4
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b0      	blx	r6
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f aecd 	beq.w	8005966 <_printf_float+0xae>
 8005bcc:	f10a 0a01 	add.w	sl, sl, #1
 8005bd0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005bd4:	eba9 0308 	sub.w	r3, r9, r8
 8005bd8:	4553      	cmp	r3, sl
 8005bda:	dcef      	bgt.n	8005bbc <_printf_float+0x304>
 8005bdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005be0:	429a      	cmp	r2, r3
 8005be2:	444f      	add	r7, r9
 8005be4:	db14      	blt.n	8005c10 <_printf_float+0x358>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	07da      	lsls	r2, r3, #31
 8005bea:	d411      	bmi.n	8005c10 <_printf_float+0x358>
 8005bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bf0:	eba3 0209 	sub.w	r2, r3, r9
 8005bf4:	eba3 0901 	sub.w	r9, r3, r1
 8005bf8:	4591      	cmp	r9, r2
 8005bfa:	bfa8      	it	ge
 8005bfc:	4691      	movge	r9, r2
 8005bfe:	f1b9 0f00 	cmp.w	r9, #0
 8005c02:	dc0d      	bgt.n	8005c20 <_printf_float+0x368>
 8005c04:	2700      	movs	r7, #0
 8005c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0a:	f104 081a 	add.w	r8, r4, #26
 8005c0e:	e018      	b.n	8005c42 <_printf_float+0x38a>
 8005c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c14:	4659      	mov	r1, fp
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b0      	blx	r6
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1e6      	bne.n	8005bec <_printf_float+0x334>
 8005c1e:	e6a2      	b.n	8005966 <_printf_float+0xae>
 8005c20:	464b      	mov	r3, r9
 8005c22:	463a      	mov	r2, r7
 8005c24:	4659      	mov	r1, fp
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b0      	blx	r6
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d1ea      	bne.n	8005c04 <_printf_float+0x34c>
 8005c2e:	e69a      	b.n	8005966 <_printf_float+0xae>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4642      	mov	r2, r8
 8005c34:	4659      	mov	r1, fp
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b0      	blx	r6
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f ae93 	beq.w	8005966 <_printf_float+0xae>
 8005c40:	3701      	adds	r7, #1
 8005c42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	eba3 0309 	sub.w	r3, r3, r9
 8005c4c:	42bb      	cmp	r3, r7
 8005c4e:	dcef      	bgt.n	8005c30 <_printf_float+0x378>
 8005c50:	e74d      	b.n	8005aee <_printf_float+0x236>
 8005c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c54:	2a01      	cmp	r2, #1
 8005c56:	dc01      	bgt.n	8005c5c <_printf_float+0x3a4>
 8005c58:	07db      	lsls	r3, r3, #31
 8005c5a:	d538      	bpl.n	8005cce <_printf_float+0x416>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	463a      	mov	r2, r7
 8005c60:	4659      	mov	r1, fp
 8005c62:	4628      	mov	r0, r5
 8005c64:	47b0      	blx	r6
 8005c66:	3001      	adds	r0, #1
 8005c68:	f43f ae7d 	beq.w	8005966 <_printf_float+0xae>
 8005c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c70:	4659      	mov	r1, fp
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b0      	blx	r6
 8005c76:	3001      	adds	r0, #1
 8005c78:	f107 0701 	add.w	r7, r7, #1
 8005c7c:	f43f ae73 	beq.w	8005966 <_printf_float+0xae>
 8005c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c86:	2200      	movs	r2, #0
 8005c88:	f103 38ff 	add.w	r8, r3, #4294967295
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f7fa fea3 	bl	80009d8 <__aeabi_dcmpeq>
 8005c92:	b9c0      	cbnz	r0, 8005cc6 <_printf_float+0x40e>
 8005c94:	4643      	mov	r3, r8
 8005c96:	463a      	mov	r2, r7
 8005c98:	4659      	mov	r1, fp
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	47b0      	blx	r6
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d10d      	bne.n	8005cbe <_printf_float+0x406>
 8005ca2:	e660      	b.n	8005966 <_printf_float+0xae>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	4659      	mov	r1, fp
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b0      	blx	r6
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f43f ae59 	beq.w	8005966 <_printf_float+0xae>
 8005cb4:	3701      	adds	r7, #1
 8005cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	dcf2      	bgt.n	8005ca4 <_printf_float+0x3ec>
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cc4:	e6e4      	b.n	8005a90 <_printf_float+0x1d8>
 8005cc6:	2700      	movs	r7, #0
 8005cc8:	f104 081a 	add.w	r8, r4, #26
 8005ccc:	e7f3      	b.n	8005cb6 <_printf_float+0x3fe>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e7e1      	b.n	8005c96 <_printf_float+0x3de>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b0      	blx	r6
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f ae42 	beq.w	8005966 <_printf_float+0xae>
 8005ce2:	3701      	adds	r7, #1
 8005ce4:	68e3      	ldr	r3, [r4, #12]
 8005ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	42bb      	cmp	r3, r7
 8005cec:	dcf1      	bgt.n	8005cd2 <_printf_float+0x41a>
 8005cee:	e702      	b.n	8005af6 <_printf_float+0x23e>
 8005cf0:	2700      	movs	r7, #0
 8005cf2:	f104 0819 	add.w	r8, r4, #25
 8005cf6:	e7f5      	b.n	8005ce4 <_printf_float+0x42c>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f43f ae94 	beq.w	8005a26 <_printf_float+0x16e>
 8005cfe:	f04f 0c00 	mov.w	ip, #0
 8005d02:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005d06:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005d0a:	6022      	str	r2, [r4, #0]
 8005d0c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005d10:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	463a      	mov	r2, r7
 8005d18:	464b      	mov	r3, r9
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f7ff fd3b 	bl	8005796 <__cvt>
 8005d20:	4607      	mov	r7, r0
 8005d22:	e64f      	b.n	80059c4 <_printf_float+0x10c>

08005d24 <_printf_common>:
 8005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	4691      	mov	r9, r2
 8005d2a:	461f      	mov	r7, r3
 8005d2c:	688a      	ldr	r2, [r1, #8]
 8005d2e:	690b      	ldr	r3, [r1, #16]
 8005d30:	4606      	mov	r6, r0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	bfb8      	it	lt
 8005d36:	4613      	movlt	r3, r2
 8005d38:	f8c9 3000 	str.w	r3, [r9]
 8005d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d40:	460c      	mov	r4, r1
 8005d42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d46:	b112      	cbz	r2, 8005d4e <_printf_common+0x2a>
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f8c9 3000 	str.w	r3, [r9]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	0699      	lsls	r1, r3, #26
 8005d52:	bf42      	ittt	mi
 8005d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d58:	3302      	addmi	r3, #2
 8005d5a:	f8c9 3000 	strmi.w	r3, [r9]
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	f015 0506 	ands.w	r5, r5, #6
 8005d64:	d107      	bne.n	8005d76 <_printf_common+0x52>
 8005d66:	f104 0a19 	add.w	sl, r4, #25
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	42ab      	cmp	r3, r5
 8005d74:	dc29      	bgt.n	8005dca <_printf_common+0xa6>
 8005d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	3300      	adds	r3, #0
 8005d7e:	bf18      	it	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	0692      	lsls	r2, r2, #26
 8005d84:	d42e      	bmi.n	8005de4 <_printf_common+0xc0>
 8005d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	47c0      	blx	r8
 8005d90:	3001      	adds	r0, #1
 8005d92:	d021      	beq.n	8005dd8 <_printf_common+0xb4>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	68e5      	ldr	r5, [r4, #12]
 8005d98:	f003 0306 	and.w	r3, r3, #6
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	bf18      	it	ne
 8005da0:	2500      	movne	r5, #0
 8005da2:	f8d9 2000 	ldr.w	r2, [r9]
 8005da6:	f04f 0900 	mov.w	r9, #0
 8005daa:	bf08      	it	eq
 8005dac:	1aad      	subeq	r5, r5, r2
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	6922      	ldr	r2, [r4, #16]
 8005db2:	bf08      	it	eq
 8005db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005db8:	4293      	cmp	r3, r2
 8005dba:	bfc4      	itt	gt
 8005dbc:	1a9b      	subgt	r3, r3, r2
 8005dbe:	18ed      	addgt	r5, r5, r3
 8005dc0:	341a      	adds	r4, #26
 8005dc2:	454d      	cmp	r5, r9
 8005dc4:	d11a      	bne.n	8005dfc <_printf_common+0xd8>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e008      	b.n	8005ddc <_printf_common+0xb8>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4652      	mov	r2, sl
 8005dce:	4639      	mov	r1, r7
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	47c0      	blx	r8
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d103      	bne.n	8005de0 <_printf_common+0xbc>
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de0:	3501      	adds	r5, #1
 8005de2:	e7c2      	b.n	8005d6a <_printf_common+0x46>
 8005de4:	2030      	movs	r0, #48	; 0x30
 8005de6:	18e1      	adds	r1, r4, r3
 8005de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005df2:	4422      	add	r2, r4
 8005df4:	3302      	adds	r3, #2
 8005df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dfa:	e7c4      	b.n	8005d86 <_printf_common+0x62>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4639      	mov	r1, r7
 8005e02:	4630      	mov	r0, r6
 8005e04:	47c0      	blx	r8
 8005e06:	3001      	adds	r0, #1
 8005e08:	d0e6      	beq.n	8005dd8 <_printf_common+0xb4>
 8005e0a:	f109 0901 	add.w	r9, r9, #1
 8005e0e:	e7d8      	b.n	8005dc2 <_printf_common+0x9e>

08005e10 <_printf_i>:
 8005e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e18:	460c      	mov	r4, r1
 8005e1a:	7e09      	ldrb	r1, [r1, #24]
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	296e      	cmp	r1, #110	; 0x6e
 8005e20:	4617      	mov	r7, r2
 8005e22:	4606      	mov	r6, r0
 8005e24:	4698      	mov	r8, r3
 8005e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e28:	f000 80b3 	beq.w	8005f92 <_printf_i+0x182>
 8005e2c:	d822      	bhi.n	8005e74 <_printf_i+0x64>
 8005e2e:	2963      	cmp	r1, #99	; 0x63
 8005e30:	d036      	beq.n	8005ea0 <_printf_i+0x90>
 8005e32:	d80a      	bhi.n	8005e4a <_printf_i+0x3a>
 8005e34:	2900      	cmp	r1, #0
 8005e36:	f000 80b9 	beq.w	8005fac <_printf_i+0x19c>
 8005e3a:	2958      	cmp	r1, #88	; 0x58
 8005e3c:	f000 8083 	beq.w	8005f46 <_printf_i+0x136>
 8005e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e48:	e032      	b.n	8005eb0 <_printf_i+0xa0>
 8005e4a:	2964      	cmp	r1, #100	; 0x64
 8005e4c:	d001      	beq.n	8005e52 <_printf_i+0x42>
 8005e4e:	2969      	cmp	r1, #105	; 0x69
 8005e50:	d1f6      	bne.n	8005e40 <_printf_i+0x30>
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	6813      	ldr	r3, [r2, #0]
 8005e56:	0605      	lsls	r5, r0, #24
 8005e58:	f103 0104 	add.w	r1, r3, #4
 8005e5c:	d52a      	bpl.n	8005eb4 <_printf_i+0xa4>
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6011      	str	r1, [r2, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da03      	bge.n	8005e6e <_printf_i+0x5e>
 8005e66:	222d      	movs	r2, #45	; 0x2d
 8005e68:	425b      	negs	r3, r3
 8005e6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e6e:	486f      	ldr	r0, [pc, #444]	; (800602c <_printf_i+0x21c>)
 8005e70:	220a      	movs	r2, #10
 8005e72:	e039      	b.n	8005ee8 <_printf_i+0xd8>
 8005e74:	2973      	cmp	r1, #115	; 0x73
 8005e76:	f000 809d 	beq.w	8005fb4 <_printf_i+0x1a4>
 8005e7a:	d808      	bhi.n	8005e8e <_printf_i+0x7e>
 8005e7c:	296f      	cmp	r1, #111	; 0x6f
 8005e7e:	d020      	beq.n	8005ec2 <_printf_i+0xb2>
 8005e80:	2970      	cmp	r1, #112	; 0x70
 8005e82:	d1dd      	bne.n	8005e40 <_printf_i+0x30>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	f043 0320 	orr.w	r3, r3, #32
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	e003      	b.n	8005e96 <_printf_i+0x86>
 8005e8e:	2975      	cmp	r1, #117	; 0x75
 8005e90:	d017      	beq.n	8005ec2 <_printf_i+0xb2>
 8005e92:	2978      	cmp	r1, #120	; 0x78
 8005e94:	d1d4      	bne.n	8005e40 <_printf_i+0x30>
 8005e96:	2378      	movs	r3, #120	; 0x78
 8005e98:	4865      	ldr	r0, [pc, #404]	; (8006030 <_printf_i+0x220>)
 8005e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e9e:	e055      	b.n	8005f4c <_printf_i+0x13c>
 8005ea0:	6813      	ldr	r3, [r2, #0]
 8005ea2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea6:	1d19      	adds	r1, r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6011      	str	r1, [r2, #0]
 8005eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e08c      	b.n	8005fce <_printf_i+0x1be>
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eba:	6011      	str	r1, [r2, #0]
 8005ebc:	bf18      	it	ne
 8005ebe:	b21b      	sxthne	r3, r3
 8005ec0:	e7cf      	b.n	8005e62 <_printf_i+0x52>
 8005ec2:	6813      	ldr	r3, [r2, #0]
 8005ec4:	6825      	ldr	r5, [r4, #0]
 8005ec6:	1d18      	adds	r0, r3, #4
 8005ec8:	6010      	str	r0, [r2, #0]
 8005eca:	0628      	lsls	r0, r5, #24
 8005ecc:	d501      	bpl.n	8005ed2 <_printf_i+0xc2>
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	e002      	b.n	8005ed8 <_printf_i+0xc8>
 8005ed2:	0668      	lsls	r0, r5, #25
 8005ed4:	d5fb      	bpl.n	8005ece <_printf_i+0xbe>
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	296f      	cmp	r1, #111	; 0x6f
 8005eda:	bf14      	ite	ne
 8005edc:	220a      	movne	r2, #10
 8005ede:	2208      	moveq	r2, #8
 8005ee0:	4852      	ldr	r0, [pc, #328]	; (800602c <_printf_i+0x21c>)
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ee8:	6865      	ldr	r5, [r4, #4]
 8005eea:	2d00      	cmp	r5, #0
 8005eec:	60a5      	str	r5, [r4, #8]
 8005eee:	f2c0 8095 	blt.w	800601c <_printf_i+0x20c>
 8005ef2:	6821      	ldr	r1, [r4, #0]
 8005ef4:	f021 0104 	bic.w	r1, r1, #4
 8005ef8:	6021      	str	r1, [r4, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d13d      	bne.n	8005f7a <_printf_i+0x16a>
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	f040 808e 	bne.w	8006020 <_printf_i+0x210>
 8005f04:	4665      	mov	r5, ip
 8005f06:	2a08      	cmp	r2, #8
 8005f08:	d10b      	bne.n	8005f22 <_printf_i+0x112>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	07db      	lsls	r3, r3, #31
 8005f0e:	d508      	bpl.n	8005f22 <_printf_i+0x112>
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	6862      	ldr	r2, [r4, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	bfde      	ittt	le
 8005f18:	2330      	movle	r3, #48	; 0x30
 8005f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f22:	ebac 0305 	sub.w	r3, ip, r5
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	f8cd 8000 	str.w	r8, [sp]
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	aa03      	add	r2, sp, #12
 8005f30:	4621      	mov	r1, r4
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff fef6 	bl	8005d24 <_printf_common>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d14d      	bne.n	8005fd8 <_printf_i+0x1c8>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b005      	add	sp, #20
 8005f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f46:	4839      	ldr	r0, [pc, #228]	; (800602c <_printf_i+0x21c>)
 8005f48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f4c:	6813      	ldr	r3, [r2, #0]
 8005f4e:	6821      	ldr	r1, [r4, #0]
 8005f50:	1d1d      	adds	r5, r3, #4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6015      	str	r5, [r2, #0]
 8005f56:	060a      	lsls	r2, r1, #24
 8005f58:	d50b      	bpl.n	8005f72 <_printf_i+0x162>
 8005f5a:	07ca      	lsls	r2, r1, #31
 8005f5c:	bf44      	itt	mi
 8005f5e:	f041 0120 	orrmi.w	r1, r1, #32
 8005f62:	6021      	strmi	r1, [r4, #0]
 8005f64:	b91b      	cbnz	r3, 8005f6e <_printf_i+0x15e>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	f022 0220 	bic.w	r2, r2, #32
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	e7b7      	b.n	8005ee2 <_printf_i+0xd2>
 8005f72:	064d      	lsls	r5, r1, #25
 8005f74:	bf48      	it	mi
 8005f76:	b29b      	uxthmi	r3, r3
 8005f78:	e7ef      	b.n	8005f5a <_printf_i+0x14a>
 8005f7a:	4665      	mov	r5, ip
 8005f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f80:	fb02 3311 	mls	r3, r2, r1, r3
 8005f84:	5cc3      	ldrb	r3, [r0, r3]
 8005f86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	d1f5      	bne.n	8005f7c <_printf_i+0x16c>
 8005f90:	e7b9      	b.n	8005f06 <_printf_i+0xf6>
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	6825      	ldr	r5, [r4, #0]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	6010      	str	r0, [r2, #0]
 8005f9c:	0628      	lsls	r0, r5, #24
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_i+0x196>
 8005fa2:	6019      	str	r1, [r3, #0]
 8005fa4:	e002      	b.n	8005fac <_printf_i+0x19c>
 8005fa6:	066a      	lsls	r2, r5, #25
 8005fa8:	d5fb      	bpl.n	8005fa2 <_printf_i+0x192>
 8005faa:	8019      	strh	r1, [r3, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	4665      	mov	r5, ip
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	e7b9      	b.n	8005f28 <_printf_i+0x118>
 8005fb4:	6813      	ldr	r3, [r2, #0]
 8005fb6:	1d19      	adds	r1, r3, #4
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	681d      	ldr	r5, [r3, #0]
 8005fbc:	6862      	ldr	r2, [r4, #4]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f002 f8d7 	bl	8008174 <memchr>
 8005fc6:	b108      	cbz	r0, 8005fcc <_printf_i+0x1bc>
 8005fc8:	1b40      	subs	r0, r0, r5
 8005fca:	6060      	str	r0, [r4, #4]
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd6:	e7a7      	b.n	8005f28 <_printf_i+0x118>
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	462a      	mov	r2, r5
 8005fdc:	4639      	mov	r1, r7
 8005fde:	4630      	mov	r0, r6
 8005fe0:	47c0      	blx	r8
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d0aa      	beq.n	8005f3c <_printf_i+0x12c>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	079b      	lsls	r3, r3, #30
 8005fea:	d413      	bmi.n	8006014 <_printf_i+0x204>
 8005fec:	68e0      	ldr	r0, [r4, #12]
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	4298      	cmp	r0, r3
 8005ff2:	bfb8      	it	lt
 8005ff4:	4618      	movlt	r0, r3
 8005ff6:	e7a3      	b.n	8005f40 <_printf_i+0x130>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	464a      	mov	r2, r9
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	4630      	mov	r0, r6
 8006000:	47c0      	blx	r8
 8006002:	3001      	adds	r0, #1
 8006004:	d09a      	beq.n	8005f3c <_printf_i+0x12c>
 8006006:	3501      	adds	r5, #1
 8006008:	68e3      	ldr	r3, [r4, #12]
 800600a:	9a03      	ldr	r2, [sp, #12]
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	42ab      	cmp	r3, r5
 8006010:	dcf2      	bgt.n	8005ff8 <_printf_i+0x1e8>
 8006012:	e7eb      	b.n	8005fec <_printf_i+0x1dc>
 8006014:	2500      	movs	r5, #0
 8006016:	f104 0919 	add.w	r9, r4, #25
 800601a:	e7f5      	b.n	8006008 <_printf_i+0x1f8>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ac      	bne.n	8005f7a <_printf_i+0x16a>
 8006020:	7803      	ldrb	r3, [r0, #0]
 8006022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006026:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800602a:	e76c      	b.n	8005f06 <_printf_i+0xf6>
 800602c:	080090c6 	.word	0x080090c6
 8006030:	080090d7 	.word	0x080090d7

08006034 <siprintf>:
 8006034:	b40e      	push	{r1, r2, r3}
 8006036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800603a:	b500      	push	{lr}
 800603c:	b09c      	sub	sp, #112	; 0x70
 800603e:	ab1d      	add	r3, sp, #116	; 0x74
 8006040:	9002      	str	r0, [sp, #8]
 8006042:	9006      	str	r0, [sp, #24]
 8006044:	9107      	str	r1, [sp, #28]
 8006046:	9104      	str	r1, [sp, #16]
 8006048:	4808      	ldr	r0, [pc, #32]	; (800606c <siprintf+0x38>)
 800604a:	4909      	ldr	r1, [pc, #36]	; (8006070 <siprintf+0x3c>)
 800604c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006050:	9105      	str	r1, [sp, #20]
 8006052:	6800      	ldr	r0, [r0, #0]
 8006054:	a902      	add	r1, sp, #8
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	f002 fda0 	bl	8008b9c <_svfiprintf_r>
 800605c:	2200      	movs	r2, #0
 800605e:	9b02      	ldr	r3, [sp, #8]
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	b01c      	add	sp, #112	; 0x70
 8006064:	f85d eb04 	ldr.w	lr, [sp], #4
 8006068:	b003      	add	sp, #12
 800606a:	4770      	bx	lr
 800606c:	2000003c 	.word	0x2000003c
 8006070:	ffff0208 	.word	0xffff0208

08006074 <strcat>:
 8006074:	4603      	mov	r3, r0
 8006076:	b510      	push	{r4, lr}
 8006078:	781a      	ldrb	r2, [r3, #0]
 800607a:	1c5c      	adds	r4, r3, #1
 800607c:	b93a      	cbnz	r2, 800608e <strcat+0x1a>
 800607e:	3b01      	subs	r3, #1
 8006080:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006084:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006088:	2a00      	cmp	r2, #0
 800608a:	d1f9      	bne.n	8006080 <strcat+0xc>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	4623      	mov	r3, r4
 8006090:	e7f2      	b.n	8006078 <strcat+0x4>

08006092 <strcpy>:
 8006092:	4603      	mov	r3, r0
 8006094:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006098:	f803 2b01 	strb.w	r2, [r3], #1
 800609c:	2a00      	cmp	r2, #0
 800609e:	d1f9      	bne.n	8006094 <strcpy+0x2>
 80060a0:	4770      	bx	lr

080060a2 <strncmp>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	b16a      	cbz	r2, 80060c2 <strncmp+0x20>
 80060a6:	3901      	subs	r1, #1
 80060a8:	1884      	adds	r4, r0, r2
 80060aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80060ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d103      	bne.n	80060be <strncmp+0x1c>
 80060b6:	42a0      	cmp	r0, r4
 80060b8:	d001      	beq.n	80060be <strncmp+0x1c>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f5      	bne.n	80060aa <strncmp+0x8>
 80060be:	1a98      	subs	r0, r3, r2
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	4610      	mov	r0, r2
 80060c4:	e7fc      	b.n	80060c0 <strncmp+0x1e>

080060c6 <sulp>:
 80060c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ca:	460f      	mov	r7, r1
 80060cc:	4690      	mov	r8, r2
 80060ce:	f002 fb29 	bl	8008724 <__ulp>
 80060d2:	4604      	mov	r4, r0
 80060d4:	460d      	mov	r5, r1
 80060d6:	f1b8 0f00 	cmp.w	r8, #0
 80060da:	d011      	beq.n	8006100 <sulp+0x3a>
 80060dc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80060e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dd0b      	ble.n	8006100 <sulp+0x3a>
 80060e8:	2400      	movs	r4, #0
 80060ea:	051b      	lsls	r3, r3, #20
 80060ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80060f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80060f4:	4622      	mov	r2, r4
 80060f6:	462b      	mov	r3, r5
 80060f8:	f7fa fa06 	bl	8000508 <__aeabi_dmul>
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006108 <_strtod_l>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	461f      	mov	r7, r3
 800610e:	2300      	movs	r3, #0
 8006110:	b0a1      	sub	sp, #132	; 0x84
 8006112:	4683      	mov	fp, r0
 8006114:	4638      	mov	r0, r7
 8006116:	460e      	mov	r6, r1
 8006118:	9217      	str	r2, [sp, #92]	; 0x5c
 800611a:	931c      	str	r3, [sp, #112]	; 0x70
 800611c:	f002 f800 	bl	8008120 <__localeconv_l>
 8006120:	4680      	mov	r8, r0
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	f7fa f82c 	bl	8000180 <strlen>
 8006128:	f04f 0900 	mov.w	r9, #0
 800612c:	4604      	mov	r4, r0
 800612e:	f04f 0a00 	mov.w	sl, #0
 8006132:	961b      	str	r6, [sp, #108]	; 0x6c
 8006134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	2a0d      	cmp	r2, #13
 800613a:	d832      	bhi.n	80061a2 <_strtod_l+0x9a>
 800613c:	2a09      	cmp	r2, #9
 800613e:	d236      	bcs.n	80061ae <_strtod_l+0xa6>
 8006140:	2a00      	cmp	r2, #0
 8006142:	d03e      	beq.n	80061c2 <_strtod_l+0xba>
 8006144:	2300      	movs	r3, #0
 8006146:	930d      	str	r3, [sp, #52]	; 0x34
 8006148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800614a:	782b      	ldrb	r3, [r5, #0]
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	f040 80ac 	bne.w	80062aa <_strtod_l+0x1a2>
 8006152:	786b      	ldrb	r3, [r5, #1]
 8006154:	2b58      	cmp	r3, #88	; 0x58
 8006156:	d001      	beq.n	800615c <_strtod_l+0x54>
 8006158:	2b78      	cmp	r3, #120	; 0x78
 800615a:	d167      	bne.n	800622c <_strtod_l+0x124>
 800615c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800615e:	9702      	str	r7, [sp, #8]
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	ab1c      	add	r3, sp, #112	; 0x70
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	4a89      	ldr	r2, [pc, #548]	; (800638c <_strtod_l+0x284>)
 8006168:	ab1d      	add	r3, sp, #116	; 0x74
 800616a:	a91b      	add	r1, sp, #108	; 0x6c
 800616c:	4658      	mov	r0, fp
 800616e:	f001 fcff 	bl	8007b70 <__gethex>
 8006172:	f010 0407 	ands.w	r4, r0, #7
 8006176:	4606      	mov	r6, r0
 8006178:	d005      	beq.n	8006186 <_strtod_l+0x7e>
 800617a:	2c06      	cmp	r4, #6
 800617c:	d12b      	bne.n	80061d6 <_strtod_l+0xce>
 800617e:	2300      	movs	r3, #0
 8006180:	3501      	adds	r5, #1
 8006182:	951b      	str	r5, [sp, #108]	; 0x6c
 8006184:	930d      	str	r3, [sp, #52]	; 0x34
 8006186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 85a6 	bne.w	8006cda <_strtod_l+0xbd2>
 800618e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006190:	b1e3      	cbz	r3, 80061cc <_strtod_l+0xc4>
 8006192:	464a      	mov	r2, r9
 8006194:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	b021      	add	sp, #132	; 0x84
 800619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a2:	2a2b      	cmp	r2, #43	; 0x2b
 80061a4:	d015      	beq.n	80061d2 <_strtod_l+0xca>
 80061a6:	2a2d      	cmp	r2, #45	; 0x2d
 80061a8:	d004      	beq.n	80061b4 <_strtod_l+0xac>
 80061aa:	2a20      	cmp	r2, #32
 80061ac:	d1ca      	bne.n	8006144 <_strtod_l+0x3c>
 80061ae:	3301      	adds	r3, #1
 80061b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80061b2:	e7bf      	b.n	8006134 <_strtod_l+0x2c>
 80061b4:	2201      	movs	r2, #1
 80061b6:	920d      	str	r2, [sp, #52]	; 0x34
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1c2      	bne.n	8006148 <_strtod_l+0x40>
 80061c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 8585 	bne.w	8006cd6 <_strtod_l+0xbce>
 80061cc:	464a      	mov	r2, r9
 80061ce:	4653      	mov	r3, sl
 80061d0:	e7e2      	b.n	8006198 <_strtod_l+0x90>
 80061d2:	2200      	movs	r2, #0
 80061d4:	e7ef      	b.n	80061b6 <_strtod_l+0xae>
 80061d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061d8:	b13a      	cbz	r2, 80061ea <_strtod_l+0xe2>
 80061da:	2135      	movs	r1, #53	; 0x35
 80061dc:	a81e      	add	r0, sp, #120	; 0x78
 80061de:	f002 fb94 	bl	800890a <__copybits>
 80061e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061e4:	4658      	mov	r0, fp
 80061e6:	f002 f807 	bl	80081f8 <_Bfree>
 80061ea:	3c01      	subs	r4, #1
 80061ec:	2c04      	cmp	r4, #4
 80061ee:	d806      	bhi.n	80061fe <_strtod_l+0xf6>
 80061f0:	e8df f004 	tbb	[pc, r4]
 80061f4:	1714030a 	.word	0x1714030a
 80061f8:	0a          	.byte	0x0a
 80061f9:	00          	.byte	0x00
 80061fa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80061fe:	0731      	lsls	r1, r6, #28
 8006200:	d5c1      	bpl.n	8006186 <_strtod_l+0x7e>
 8006202:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006206:	e7be      	b.n	8006186 <_strtod_l+0x7e>
 8006208:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800620a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800620e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006212:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006216:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800621a:	e7f0      	b.n	80061fe <_strtod_l+0xf6>
 800621c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006390 <_strtod_l+0x288>
 8006220:	e7ed      	b.n	80061fe <_strtod_l+0xf6>
 8006222:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006226:	f04f 39ff 	mov.w	r9, #4294967295
 800622a:	e7e8      	b.n	80061fe <_strtod_l+0xf6>
 800622c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	921b      	str	r2, [sp, #108]	; 0x6c
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b30      	cmp	r3, #48	; 0x30
 8006236:	d0f9      	beq.n	800622c <_strtod_l+0x124>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0a4      	beq.n	8006186 <_strtod_l+0x7e>
 800623c:	2301      	movs	r3, #1
 800623e:	2500      	movs	r5, #0
 8006240:	220a      	movs	r2, #10
 8006242:	9307      	str	r3, [sp, #28]
 8006244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006246:	9506      	str	r5, [sp, #24]
 8006248:	9308      	str	r3, [sp, #32]
 800624a:	9504      	str	r5, [sp, #16]
 800624c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800624e:	7807      	ldrb	r7, [r0, #0]
 8006250:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006254:	b2d9      	uxtb	r1, r3
 8006256:	2909      	cmp	r1, #9
 8006258:	d929      	bls.n	80062ae <_strtod_l+0x1a6>
 800625a:	4622      	mov	r2, r4
 800625c:	f8d8 1000 	ldr.w	r1, [r8]
 8006260:	f7ff ff1f 	bl	80060a2 <strncmp>
 8006264:	2800      	cmp	r0, #0
 8006266:	d031      	beq.n	80062cc <_strtod_l+0x1c4>
 8006268:	2000      	movs	r0, #0
 800626a:	463b      	mov	r3, r7
 800626c:	4602      	mov	r2, r0
 800626e:	9c04      	ldr	r4, [sp, #16]
 8006270:	9005      	str	r0, [sp, #20]
 8006272:	2b65      	cmp	r3, #101	; 0x65
 8006274:	d001      	beq.n	800627a <_strtod_l+0x172>
 8006276:	2b45      	cmp	r3, #69	; 0x45
 8006278:	d114      	bne.n	80062a4 <_strtod_l+0x19c>
 800627a:	b924      	cbnz	r4, 8006286 <_strtod_l+0x17e>
 800627c:	b910      	cbnz	r0, 8006284 <_strtod_l+0x17c>
 800627e:	9b07      	ldr	r3, [sp, #28]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d09e      	beq.n	80061c2 <_strtod_l+0xba>
 8006284:	2400      	movs	r4, #0
 8006286:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006288:	1c73      	adds	r3, r6, #1
 800628a:	931b      	str	r3, [sp, #108]	; 0x6c
 800628c:	7873      	ldrb	r3, [r6, #1]
 800628e:	2b2b      	cmp	r3, #43	; 0x2b
 8006290:	d078      	beq.n	8006384 <_strtod_l+0x27c>
 8006292:	2b2d      	cmp	r3, #45	; 0x2d
 8006294:	d070      	beq.n	8006378 <_strtod_l+0x270>
 8006296:	f04f 0c00 	mov.w	ip, #0
 800629a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800629e:	2f09      	cmp	r7, #9
 80062a0:	d97c      	bls.n	800639c <_strtod_l+0x294>
 80062a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80062a4:	f04f 0e00 	mov.w	lr, #0
 80062a8:	e09a      	b.n	80063e0 <_strtod_l+0x2d8>
 80062aa:	2300      	movs	r3, #0
 80062ac:	e7c7      	b.n	800623e <_strtod_l+0x136>
 80062ae:	9904      	ldr	r1, [sp, #16]
 80062b0:	3001      	adds	r0, #1
 80062b2:	2908      	cmp	r1, #8
 80062b4:	bfd7      	itett	le
 80062b6:	9906      	ldrle	r1, [sp, #24]
 80062b8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80062bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80062c0:	9306      	strle	r3, [sp, #24]
 80062c2:	9b04      	ldr	r3, [sp, #16]
 80062c4:	901b      	str	r0, [sp, #108]	; 0x6c
 80062c6:	3301      	adds	r3, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	e7bf      	b.n	800624c <_strtod_l+0x144>
 80062cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ce:	191a      	adds	r2, r3, r4
 80062d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80062d2:	9a04      	ldr	r2, [sp, #16]
 80062d4:	5d1b      	ldrb	r3, [r3, r4]
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d037      	beq.n	800634a <_strtod_l+0x242>
 80062da:	4602      	mov	r2, r0
 80062dc:	9c04      	ldr	r4, [sp, #16]
 80062de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80062e2:	2909      	cmp	r1, #9
 80062e4:	d913      	bls.n	800630e <_strtod_l+0x206>
 80062e6:	2101      	movs	r1, #1
 80062e8:	9105      	str	r1, [sp, #20]
 80062ea:	e7c2      	b.n	8006272 <_strtod_l+0x16a>
 80062ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ee:	3001      	adds	r0, #1
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d0f8      	beq.n	80062ec <_strtod_l+0x1e4>
 80062fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80062fe:	2a08      	cmp	r2, #8
 8006300:	f200 84f0 	bhi.w	8006ce4 <_strtod_l+0xbdc>
 8006304:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006306:	9208      	str	r2, [sp, #32]
 8006308:	4602      	mov	r2, r0
 800630a:	2000      	movs	r0, #0
 800630c:	4604      	mov	r4, r0
 800630e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006312:	f100 0101 	add.w	r1, r0, #1
 8006316:	d012      	beq.n	800633e <_strtod_l+0x236>
 8006318:	440a      	add	r2, r1
 800631a:	270a      	movs	r7, #10
 800631c:	4621      	mov	r1, r4
 800631e:	eb00 0c04 	add.w	ip, r0, r4
 8006322:	458c      	cmp	ip, r1
 8006324:	d113      	bne.n	800634e <_strtod_l+0x246>
 8006326:	1821      	adds	r1, r4, r0
 8006328:	2908      	cmp	r1, #8
 800632a:	f104 0401 	add.w	r4, r4, #1
 800632e:	4404      	add	r4, r0
 8006330:	dc19      	bgt.n	8006366 <_strtod_l+0x25e>
 8006332:	210a      	movs	r1, #10
 8006334:	9b06      	ldr	r3, [sp, #24]
 8006336:	fb01 e303 	mla	r3, r1, r3, lr
 800633a:	9306      	str	r3, [sp, #24]
 800633c:	2100      	movs	r1, #0
 800633e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006340:	1c58      	adds	r0, r3, #1
 8006342:	901b      	str	r0, [sp, #108]	; 0x6c
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	4608      	mov	r0, r1
 8006348:	e7c9      	b.n	80062de <_strtod_l+0x1d6>
 800634a:	9804      	ldr	r0, [sp, #16]
 800634c:	e7d3      	b.n	80062f6 <_strtod_l+0x1ee>
 800634e:	2908      	cmp	r1, #8
 8006350:	f101 0101 	add.w	r1, r1, #1
 8006354:	dc03      	bgt.n	800635e <_strtod_l+0x256>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	437b      	muls	r3, r7
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	e7e1      	b.n	8006322 <_strtod_l+0x21a>
 800635e:	2910      	cmp	r1, #16
 8006360:	bfd8      	it	le
 8006362:	437d      	mulle	r5, r7
 8006364:	e7dd      	b.n	8006322 <_strtod_l+0x21a>
 8006366:	2c10      	cmp	r4, #16
 8006368:	bfdc      	itt	le
 800636a:	210a      	movle	r1, #10
 800636c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006370:	e7e4      	b.n	800633c <_strtod_l+0x234>
 8006372:	2301      	movs	r3, #1
 8006374:	9305      	str	r3, [sp, #20]
 8006376:	e781      	b.n	800627c <_strtod_l+0x174>
 8006378:	f04f 0c01 	mov.w	ip, #1
 800637c:	1cb3      	adds	r3, r6, #2
 800637e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006380:	78b3      	ldrb	r3, [r6, #2]
 8006382:	e78a      	b.n	800629a <_strtod_l+0x192>
 8006384:	f04f 0c00 	mov.w	ip, #0
 8006388:	e7f8      	b.n	800637c <_strtod_l+0x274>
 800638a:	bf00      	nop
 800638c:	080090e8 	.word	0x080090e8
 8006390:	7ff00000 	.word	0x7ff00000
 8006394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006396:	1c5f      	adds	r7, r3, #1
 8006398:	971b      	str	r7, [sp, #108]	; 0x6c
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d0f9      	beq.n	8006394 <_strtod_l+0x28c>
 80063a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80063a4:	2f08      	cmp	r7, #8
 80063a6:	f63f af7d 	bhi.w	80062a4 <_strtod_l+0x19c>
 80063aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80063ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063b0:	9309      	str	r3, [sp, #36]	; 0x24
 80063b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063b4:	1c5f      	adds	r7, r3, #1
 80063b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80063be:	f1b8 0f09 	cmp.w	r8, #9
 80063c2:	d937      	bls.n	8006434 <_strtod_l+0x32c>
 80063c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063c6:	1a7f      	subs	r7, r7, r1
 80063c8:	2f08      	cmp	r7, #8
 80063ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80063ce:	dc37      	bgt.n	8006440 <_strtod_l+0x338>
 80063d0:	45be      	cmp	lr, r7
 80063d2:	bfa8      	it	ge
 80063d4:	46be      	movge	lr, r7
 80063d6:	f1bc 0f00 	cmp.w	ip, #0
 80063da:	d001      	beq.n	80063e0 <_strtod_l+0x2d8>
 80063dc:	f1ce 0e00 	rsb	lr, lr, #0
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	d151      	bne.n	8006488 <_strtod_l+0x380>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f47f aece 	bne.w	8006186 <_strtod_l+0x7e>
 80063ea:	9a07      	ldr	r2, [sp, #28]
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	f47f aeca 	bne.w	8006186 <_strtod_l+0x7e>
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	f47f aee4 	bne.w	80061c2 <_strtod_l+0xba>
 80063fa:	2b4e      	cmp	r3, #78	; 0x4e
 80063fc:	d027      	beq.n	800644e <_strtod_l+0x346>
 80063fe:	dc21      	bgt.n	8006444 <_strtod_l+0x33c>
 8006400:	2b49      	cmp	r3, #73	; 0x49
 8006402:	f47f aede 	bne.w	80061c2 <_strtod_l+0xba>
 8006406:	49a4      	ldr	r1, [pc, #656]	; (8006698 <_strtod_l+0x590>)
 8006408:	a81b      	add	r0, sp, #108	; 0x6c
 800640a:	f001 fde5 	bl	8007fd8 <__match>
 800640e:	2800      	cmp	r0, #0
 8006410:	f43f aed7 	beq.w	80061c2 <_strtod_l+0xba>
 8006414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006416:	49a1      	ldr	r1, [pc, #644]	; (800669c <_strtod_l+0x594>)
 8006418:	3b01      	subs	r3, #1
 800641a:	a81b      	add	r0, sp, #108	; 0x6c
 800641c:	931b      	str	r3, [sp, #108]	; 0x6c
 800641e:	f001 fddb 	bl	8007fd8 <__match>
 8006422:	b910      	cbnz	r0, 800642a <_strtod_l+0x322>
 8006424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006426:	3301      	adds	r3, #1
 8006428:	931b      	str	r3, [sp, #108]	; 0x6c
 800642a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80066b0 <_strtod_l+0x5a8>
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	e6a8      	b.n	8006186 <_strtod_l+0x7e>
 8006434:	210a      	movs	r1, #10
 8006436:	fb01 3e0e 	mla	lr, r1, lr, r3
 800643a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800643e:	e7b8      	b.n	80063b2 <_strtod_l+0x2aa>
 8006440:	46be      	mov	lr, r7
 8006442:	e7c8      	b.n	80063d6 <_strtod_l+0x2ce>
 8006444:	2b69      	cmp	r3, #105	; 0x69
 8006446:	d0de      	beq.n	8006406 <_strtod_l+0x2fe>
 8006448:	2b6e      	cmp	r3, #110	; 0x6e
 800644a:	f47f aeba 	bne.w	80061c2 <_strtod_l+0xba>
 800644e:	4994      	ldr	r1, [pc, #592]	; (80066a0 <_strtod_l+0x598>)
 8006450:	a81b      	add	r0, sp, #108	; 0x6c
 8006452:	f001 fdc1 	bl	8007fd8 <__match>
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f aeb3 	beq.w	80061c2 <_strtod_l+0xba>
 800645c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b28      	cmp	r3, #40	; 0x28
 8006462:	d10e      	bne.n	8006482 <_strtod_l+0x37a>
 8006464:	aa1e      	add	r2, sp, #120	; 0x78
 8006466:	498f      	ldr	r1, [pc, #572]	; (80066a4 <_strtod_l+0x59c>)
 8006468:	a81b      	add	r0, sp, #108	; 0x6c
 800646a:	f001 fdc9 	bl	8008000 <__hexnan>
 800646e:	2805      	cmp	r0, #5
 8006470:	d107      	bne.n	8006482 <_strtod_l+0x37a>
 8006472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006474:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006478:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800647c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006480:	e681      	b.n	8006186 <_strtod_l+0x7e>
 8006482:	f8df a234 	ldr.w	sl, [pc, #564]	; 80066b8 <_strtod_l+0x5b0>
 8006486:	e7d2      	b.n	800642e <_strtod_l+0x326>
 8006488:	ebae 0302 	sub.w	r3, lr, r2
 800648c:	9307      	str	r3, [sp, #28]
 800648e:	9b04      	ldr	r3, [sp, #16]
 8006490:	9806      	ldr	r0, [sp, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf08      	it	eq
 8006496:	4623      	moveq	r3, r4
 8006498:	2c10      	cmp	r4, #16
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	46a0      	mov	r8, r4
 800649e:	bfa8      	it	ge
 80064a0:	f04f 0810 	movge.w	r8, #16
 80064a4:	f7f9 ffb6 	bl	8000414 <__aeabi_ui2d>
 80064a8:	2c09      	cmp	r4, #9
 80064aa:	4681      	mov	r9, r0
 80064ac:	468a      	mov	sl, r1
 80064ae:	dc13      	bgt.n	80064d8 <_strtod_l+0x3d0>
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f43f ae67 	beq.w	8006186 <_strtod_l+0x7e>
 80064b8:	9b07      	ldr	r3, [sp, #28]
 80064ba:	dd7e      	ble.n	80065ba <_strtod_l+0x4b2>
 80064bc:	2b16      	cmp	r3, #22
 80064be:	dc65      	bgt.n	800658c <_strtod_l+0x484>
 80064c0:	4a79      	ldr	r2, [pc, #484]	; (80066a8 <_strtod_l+0x5a0>)
 80064c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80064c6:	464a      	mov	r2, r9
 80064c8:	e9de 0100 	ldrd	r0, r1, [lr]
 80064cc:	4653      	mov	r3, sl
 80064ce:	f7fa f81b 	bl	8000508 <__aeabi_dmul>
 80064d2:	4681      	mov	r9, r0
 80064d4:	468a      	mov	sl, r1
 80064d6:	e656      	b.n	8006186 <_strtod_l+0x7e>
 80064d8:	4b73      	ldr	r3, [pc, #460]	; (80066a8 <_strtod_l+0x5a0>)
 80064da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80064e2:	f7fa f811 	bl	8000508 <__aeabi_dmul>
 80064e6:	4606      	mov	r6, r0
 80064e8:	4628      	mov	r0, r5
 80064ea:	460f      	mov	r7, r1
 80064ec:	f7f9 ff92 	bl	8000414 <__aeabi_ui2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7f9 fe50 	bl	800019c <__adddf3>
 80064fc:	2c0f      	cmp	r4, #15
 80064fe:	4681      	mov	r9, r0
 8006500:	468a      	mov	sl, r1
 8006502:	ddd5      	ble.n	80064b0 <_strtod_l+0x3a8>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	eba4 0808 	sub.w	r8, r4, r8
 800650a:	4498      	add	r8, r3
 800650c:	f1b8 0f00 	cmp.w	r8, #0
 8006510:	f340 809a 	ble.w	8006648 <_strtod_l+0x540>
 8006514:	f018 030f 	ands.w	r3, r8, #15
 8006518:	d00a      	beq.n	8006530 <_strtod_l+0x428>
 800651a:	4963      	ldr	r1, [pc, #396]	; (80066a8 <_strtod_l+0x5a0>)
 800651c:	464a      	mov	r2, r9
 800651e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006526:	4653      	mov	r3, sl
 8006528:	f7f9 ffee 	bl	8000508 <__aeabi_dmul>
 800652c:	4681      	mov	r9, r0
 800652e:	468a      	mov	sl, r1
 8006530:	f038 080f 	bics.w	r8, r8, #15
 8006534:	d077      	beq.n	8006626 <_strtod_l+0x51e>
 8006536:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800653a:	dd4b      	ble.n	80065d4 <_strtod_l+0x4cc>
 800653c:	f04f 0800 	mov.w	r8, #0
 8006540:	f8cd 8010 	str.w	r8, [sp, #16]
 8006544:	f8cd 8020 	str.w	r8, [sp, #32]
 8006548:	f8cd 8018 	str.w	r8, [sp, #24]
 800654c:	2322      	movs	r3, #34	; 0x22
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80066b0 <_strtod_l+0x5a8>
 8006556:	f8cb 3000 	str.w	r3, [fp]
 800655a:	9b08      	ldr	r3, [sp, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f43f ae12 	beq.w	8006186 <_strtod_l+0x7e>
 8006562:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006564:	4658      	mov	r0, fp
 8006566:	f001 fe47 	bl	80081f8 <_Bfree>
 800656a:	9906      	ldr	r1, [sp, #24]
 800656c:	4658      	mov	r0, fp
 800656e:	f001 fe43 	bl	80081f8 <_Bfree>
 8006572:	9904      	ldr	r1, [sp, #16]
 8006574:	4658      	mov	r0, fp
 8006576:	f001 fe3f 	bl	80081f8 <_Bfree>
 800657a:	9908      	ldr	r1, [sp, #32]
 800657c:	4658      	mov	r0, fp
 800657e:	f001 fe3b 	bl	80081f8 <_Bfree>
 8006582:	4641      	mov	r1, r8
 8006584:	4658      	mov	r0, fp
 8006586:	f001 fe37 	bl	80081f8 <_Bfree>
 800658a:	e5fc      	b.n	8006186 <_strtod_l+0x7e>
 800658c:	9a07      	ldr	r2, [sp, #28]
 800658e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006592:	4293      	cmp	r3, r2
 8006594:	dbb6      	blt.n	8006504 <_strtod_l+0x3fc>
 8006596:	4d44      	ldr	r5, [pc, #272]	; (80066a8 <_strtod_l+0x5a0>)
 8006598:	f1c4 040f 	rsb	r4, r4, #15
 800659c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80065a0:	464a      	mov	r2, r9
 80065a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a6:	4653      	mov	r3, sl
 80065a8:	f7f9 ffae 	bl	8000508 <__aeabi_dmul>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	1b1c      	subs	r4, r3, r4
 80065b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80065b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065b8:	e789      	b.n	80064ce <_strtod_l+0x3c6>
 80065ba:	f113 0f16 	cmn.w	r3, #22
 80065be:	dba1      	blt.n	8006504 <_strtod_l+0x3fc>
 80065c0:	4a39      	ldr	r2, [pc, #228]	; (80066a8 <_strtod_l+0x5a0>)
 80065c2:	4648      	mov	r0, r9
 80065c4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80065c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80065cc:	4651      	mov	r1, sl
 80065ce:	f7fa f8c5 	bl	800075c <__aeabi_ddiv>
 80065d2:	e77e      	b.n	80064d2 <_strtod_l+0x3ca>
 80065d4:	2300      	movs	r3, #0
 80065d6:	4648      	mov	r0, r9
 80065d8:	4651      	mov	r1, sl
 80065da:	461d      	mov	r5, r3
 80065dc:	4e33      	ldr	r6, [pc, #204]	; (80066ac <_strtod_l+0x5a4>)
 80065de:	ea4f 1828 	mov.w	r8, r8, asr #4
 80065e2:	f1b8 0f01 	cmp.w	r8, #1
 80065e6:	dc21      	bgt.n	800662c <_strtod_l+0x524>
 80065e8:	b10b      	cbz	r3, 80065ee <_strtod_l+0x4e6>
 80065ea:	4681      	mov	r9, r0
 80065ec:	468a      	mov	sl, r1
 80065ee:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <_strtod_l+0x5a4>)
 80065f0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80065f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80065f8:	464a      	mov	r2, r9
 80065fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80065fe:	4653      	mov	r3, sl
 8006600:	f7f9 ff82 	bl	8000508 <__aeabi_dmul>
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <_strtod_l+0x5a8>)
 8006606:	460a      	mov	r2, r1
 8006608:	400b      	ands	r3, r1
 800660a:	492a      	ldr	r1, [pc, #168]	; (80066b4 <_strtod_l+0x5ac>)
 800660c:	4681      	mov	r9, r0
 800660e:	428b      	cmp	r3, r1
 8006610:	d894      	bhi.n	800653c <_strtod_l+0x434>
 8006612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006616:	428b      	cmp	r3, r1
 8006618:	bf86      	itte	hi
 800661a:	f04f 39ff 	movhi.w	r9, #4294967295
 800661e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80066bc <_strtod_l+0x5b4>
 8006622:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006626:	2300      	movs	r3, #0
 8006628:	9305      	str	r3, [sp, #20]
 800662a:	e07b      	b.n	8006724 <_strtod_l+0x61c>
 800662c:	f018 0f01 	tst.w	r8, #1
 8006630:	d006      	beq.n	8006640 <_strtod_l+0x538>
 8006632:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 ff65 	bl	8000508 <__aeabi_dmul>
 800663e:	2301      	movs	r3, #1
 8006640:	3501      	adds	r5, #1
 8006642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006646:	e7cc      	b.n	80065e2 <_strtod_l+0x4da>
 8006648:	d0ed      	beq.n	8006626 <_strtod_l+0x51e>
 800664a:	f1c8 0800 	rsb	r8, r8, #0
 800664e:	f018 020f 	ands.w	r2, r8, #15
 8006652:	d00a      	beq.n	800666a <_strtod_l+0x562>
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <_strtod_l+0x5a0>)
 8006656:	4648      	mov	r0, r9
 8006658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665c:	4651      	mov	r1, sl
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7fa f87b 	bl	800075c <__aeabi_ddiv>
 8006666:	4681      	mov	r9, r0
 8006668:	468a      	mov	sl, r1
 800666a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800666e:	d0da      	beq.n	8006626 <_strtod_l+0x51e>
 8006670:	f1b8 0f1f 	cmp.w	r8, #31
 8006674:	dd24      	ble.n	80066c0 <_strtod_l+0x5b8>
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	f8cd 8010 	str.w	r8, [sp, #16]
 800667e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006682:	f8cd 8018 	str.w	r8, [sp, #24]
 8006686:	2322      	movs	r3, #34	; 0x22
 8006688:	f04f 0900 	mov.w	r9, #0
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	f8cb 3000 	str.w	r3, [fp]
 8006694:	e761      	b.n	800655a <_strtod_l+0x452>
 8006696:	bf00      	nop
 8006698:	080090b9 	.word	0x080090b9
 800669c:	0800913b 	.word	0x0800913b
 80066a0:	080090c1 	.word	0x080090c1
 80066a4:	080090fc 	.word	0x080090fc
 80066a8:	08009178 	.word	0x08009178
 80066ac:	08009150 	.word	0x08009150
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	7ca00000 	.word	0x7ca00000
 80066b8:	fff80000 	.word	0xfff80000
 80066bc:	7fefffff 	.word	0x7fefffff
 80066c0:	f018 0310 	ands.w	r3, r8, #16
 80066c4:	bf18      	it	ne
 80066c6:	236a      	movne	r3, #106	; 0x6a
 80066c8:	4648      	mov	r0, r9
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	4651      	mov	r1, sl
 80066ce:	2300      	movs	r3, #0
 80066d0:	4da1      	ldr	r5, [pc, #644]	; (8006958 <_strtod_l+0x850>)
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	f300 8113 	bgt.w	8006900 <_strtod_l+0x7f8>
 80066da:	b10b      	cbz	r3, 80066e0 <_strtod_l+0x5d8>
 80066dc:	4681      	mov	r9, r0
 80066de:	468a      	mov	sl, r1
 80066e0:	9b05      	ldr	r3, [sp, #20]
 80066e2:	b1bb      	cbz	r3, 8006714 <_strtod_l+0x60c>
 80066e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80066e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4651      	mov	r1, sl
 80066f0:	dd10      	ble.n	8006714 <_strtod_l+0x60c>
 80066f2:	2b1f      	cmp	r3, #31
 80066f4:	f340 8110 	ble.w	8006918 <_strtod_l+0x810>
 80066f8:	2b34      	cmp	r3, #52	; 0x34
 80066fa:	bfd8      	it	le
 80066fc:	f04f 32ff 	movle.w	r2, #4294967295
 8006700:	f04f 0900 	mov.w	r9, #0
 8006704:	bfcf      	iteee	gt
 8006706:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800670a:	3b20      	suble	r3, #32
 800670c:	fa02 f303 	lslle.w	r3, r2, r3
 8006710:	ea03 0a01 	andle.w	sl, r3, r1
 8006714:	2200      	movs	r2, #0
 8006716:	2300      	movs	r3, #0
 8006718:	4648      	mov	r0, r9
 800671a:	4651      	mov	r1, sl
 800671c:	f7fa f95c 	bl	80009d8 <__aeabi_dcmpeq>
 8006720:	2800      	cmp	r0, #0
 8006722:	d1a8      	bne.n	8006676 <_strtod_l+0x56e>
 8006724:	9b06      	ldr	r3, [sp, #24]
 8006726:	9a04      	ldr	r2, [sp, #16]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	9908      	ldr	r1, [sp, #32]
 800672c:	4623      	mov	r3, r4
 800672e:	4658      	mov	r0, fp
 8006730:	f001 fdb4 	bl	800829c <__s2b>
 8006734:	9008      	str	r0, [sp, #32]
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f af00 	beq.w	800653c <_strtod_l+0x434>
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	9b07      	ldr	r3, [sp, #28]
 8006740:	2a00      	cmp	r2, #0
 8006742:	f1c3 0300 	rsb	r3, r3, #0
 8006746:	bfa8      	it	ge
 8006748:	2300      	movge	r3, #0
 800674a:	f04f 0800 	mov.w	r8, #0
 800674e:	930e      	str	r3, [sp, #56]	; 0x38
 8006750:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006754:	9316      	str	r3, [sp, #88]	; 0x58
 8006756:	f8cd 8010 	str.w	r8, [sp, #16]
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	4658      	mov	r0, fp
 800675e:	6859      	ldr	r1, [r3, #4]
 8006760:	f001 fd16 	bl	8008190 <_Balloc>
 8006764:	9006      	str	r0, [sp, #24]
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f aef0 	beq.w	800654c <_strtod_l+0x444>
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	300c      	adds	r0, #12
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	f103 010c 	add.w	r1, r3, #12
 8006776:	3202      	adds	r2, #2
 8006778:	0092      	lsls	r2, r2, #2
 800677a:	f7fe fff9 	bl	8005770 <memcpy>
 800677e:	ab1e      	add	r3, sp, #120	; 0x78
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	ab1d      	add	r3, sp, #116	; 0x74
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	464a      	mov	r2, r9
 8006788:	4653      	mov	r3, sl
 800678a:	4658      	mov	r0, fp
 800678c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006790:	f002 f83e 	bl	8008810 <__d2b>
 8006794:	901c      	str	r0, [sp, #112]	; 0x70
 8006796:	2800      	cmp	r0, #0
 8006798:	f43f aed8 	beq.w	800654c <_strtod_l+0x444>
 800679c:	2101      	movs	r1, #1
 800679e:	4658      	mov	r0, fp
 80067a0:	f001 fe08 	bl	80083b4 <__i2b>
 80067a4:	9004      	str	r0, [sp, #16]
 80067a6:	4603      	mov	r3, r0
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f43f aecf 	beq.w	800654c <_strtod_l+0x444>
 80067ae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80067b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80067b2:	2d00      	cmp	r5, #0
 80067b4:	bfab      	itete	ge
 80067b6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80067b8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80067ba:	18ee      	addge	r6, r5, r3
 80067bc:	1b5c      	sublt	r4, r3, r5
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	bfa8      	it	ge
 80067c2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80067c4:	eba5 0503 	sub.w	r5, r5, r3
 80067c8:	4415      	add	r5, r2
 80067ca:	4b64      	ldr	r3, [pc, #400]	; (800695c <_strtod_l+0x854>)
 80067cc:	f105 35ff 	add.w	r5, r5, #4294967295
 80067d0:	bfb8      	it	lt
 80067d2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80067d4:	429d      	cmp	r5, r3
 80067d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067da:	f280 80af 	bge.w	800693c <_strtod_l+0x834>
 80067de:	1b5b      	subs	r3, r3, r5
 80067e0:	2b1f      	cmp	r3, #31
 80067e2:	eba2 0203 	sub.w	r2, r2, r3
 80067e6:	f04f 0701 	mov.w	r7, #1
 80067ea:	f300 809c 	bgt.w	8006926 <_strtod_l+0x81e>
 80067ee:	2500      	movs	r5, #0
 80067f0:	fa07 f303 	lsl.w	r3, r7, r3
 80067f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f6:	18b7      	adds	r7, r6, r2
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	42be      	cmp	r6, r7
 80067fc:	4414      	add	r4, r2
 80067fe:	441c      	add	r4, r3
 8006800:	4633      	mov	r3, r6
 8006802:	bfa8      	it	ge
 8006804:	463b      	movge	r3, r7
 8006806:	42a3      	cmp	r3, r4
 8006808:	bfa8      	it	ge
 800680a:	4623      	movge	r3, r4
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfc2      	ittt	gt
 8006810:	1aff      	subgt	r7, r7, r3
 8006812:	1ae4      	subgt	r4, r4, r3
 8006814:	1af6      	subgt	r6, r6, r3
 8006816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006818:	b1bb      	cbz	r3, 800684a <_strtod_l+0x742>
 800681a:	461a      	mov	r2, r3
 800681c:	9904      	ldr	r1, [sp, #16]
 800681e:	4658      	mov	r0, fp
 8006820:	f001 fe66 	bl	80084f0 <__pow5mult>
 8006824:	9004      	str	r0, [sp, #16]
 8006826:	2800      	cmp	r0, #0
 8006828:	f43f ae90 	beq.w	800654c <_strtod_l+0x444>
 800682c:	4601      	mov	r1, r0
 800682e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006830:	4658      	mov	r0, fp
 8006832:	f001 fdc8 	bl	80083c6 <__multiply>
 8006836:	9009      	str	r0, [sp, #36]	; 0x24
 8006838:	2800      	cmp	r0, #0
 800683a:	f43f ae87 	beq.w	800654c <_strtod_l+0x444>
 800683e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006840:	4658      	mov	r0, fp
 8006842:	f001 fcd9 	bl	80081f8 <_Bfree>
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	931c      	str	r3, [sp, #112]	; 0x70
 800684a:	2f00      	cmp	r7, #0
 800684c:	dc7a      	bgt.n	8006944 <_strtod_l+0x83c>
 800684e:	9b07      	ldr	r3, [sp, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd08      	ble.n	8006866 <_strtod_l+0x75e>
 8006854:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006856:	9906      	ldr	r1, [sp, #24]
 8006858:	4658      	mov	r0, fp
 800685a:	f001 fe49 	bl	80084f0 <__pow5mult>
 800685e:	9006      	str	r0, [sp, #24]
 8006860:	2800      	cmp	r0, #0
 8006862:	f43f ae73 	beq.w	800654c <_strtod_l+0x444>
 8006866:	2c00      	cmp	r4, #0
 8006868:	dd08      	ble.n	800687c <_strtod_l+0x774>
 800686a:	4622      	mov	r2, r4
 800686c:	9906      	ldr	r1, [sp, #24]
 800686e:	4658      	mov	r0, fp
 8006870:	f001 fe8c 	bl	800858c <__lshift>
 8006874:	9006      	str	r0, [sp, #24]
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f ae68 	beq.w	800654c <_strtod_l+0x444>
 800687c:	2e00      	cmp	r6, #0
 800687e:	dd08      	ble.n	8006892 <_strtod_l+0x78a>
 8006880:	4632      	mov	r2, r6
 8006882:	9904      	ldr	r1, [sp, #16]
 8006884:	4658      	mov	r0, fp
 8006886:	f001 fe81 	bl	800858c <__lshift>
 800688a:	9004      	str	r0, [sp, #16]
 800688c:	2800      	cmp	r0, #0
 800688e:	f43f ae5d 	beq.w	800654c <_strtod_l+0x444>
 8006892:	9a06      	ldr	r2, [sp, #24]
 8006894:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006896:	4658      	mov	r0, fp
 8006898:	f001 fee6 	bl	8008668 <__mdiff>
 800689c:	4680      	mov	r8, r0
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f ae54 	beq.w	800654c <_strtod_l+0x444>
 80068a4:	2400      	movs	r4, #0
 80068a6:	68c3      	ldr	r3, [r0, #12]
 80068a8:	9904      	ldr	r1, [sp, #16]
 80068aa:	60c4      	str	r4, [r0, #12]
 80068ac:	930c      	str	r3, [sp, #48]	; 0x30
 80068ae:	f001 fec1 	bl	8008634 <__mcmp>
 80068b2:	42a0      	cmp	r0, r4
 80068b4:	da54      	bge.n	8006960 <_strtod_l+0x858>
 80068b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068b8:	b9f3      	cbnz	r3, 80068f8 <_strtod_l+0x7f0>
 80068ba:	f1b9 0f00 	cmp.w	r9, #0
 80068be:	d11b      	bne.n	80068f8 <_strtod_l+0x7f0>
 80068c0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80068c4:	b9c3      	cbnz	r3, 80068f8 <_strtod_l+0x7f0>
 80068c6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80068ca:	0d1b      	lsrs	r3, r3, #20
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80068d2:	d911      	bls.n	80068f8 <_strtod_l+0x7f0>
 80068d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80068d8:	b91b      	cbnz	r3, 80068e2 <_strtod_l+0x7da>
 80068da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	dd0a      	ble.n	80068f8 <_strtod_l+0x7f0>
 80068e2:	4641      	mov	r1, r8
 80068e4:	2201      	movs	r2, #1
 80068e6:	4658      	mov	r0, fp
 80068e8:	f001 fe50 	bl	800858c <__lshift>
 80068ec:	9904      	ldr	r1, [sp, #16]
 80068ee:	4680      	mov	r8, r0
 80068f0:	f001 fea0 	bl	8008634 <__mcmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	dc68      	bgt.n	80069ca <_strtod_l+0x8c2>
 80068f8:	9b05      	ldr	r3, [sp, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d172      	bne.n	80069e4 <_strtod_l+0x8dc>
 80068fe:	e630      	b.n	8006562 <_strtod_l+0x45a>
 8006900:	f018 0f01 	tst.w	r8, #1
 8006904:	d004      	beq.n	8006910 <_strtod_l+0x808>
 8006906:	e9d5 2300 	ldrd	r2, r3, [r5]
 800690a:	f7f9 fdfd 	bl	8000508 <__aeabi_dmul>
 800690e:	2301      	movs	r3, #1
 8006910:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006914:	3508      	adds	r5, #8
 8006916:	e6dc      	b.n	80066d2 <_strtod_l+0x5ca>
 8006918:	f04f 32ff 	mov.w	r2, #4294967295
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	ea03 0909 	and.w	r9, r3, r9
 8006924:	e6f6      	b.n	8006714 <_strtod_l+0x60c>
 8006926:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800692a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800692e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006932:	35e2      	adds	r5, #226	; 0xe2
 8006934:	fa07 f505 	lsl.w	r5, r7, r5
 8006938:	970f      	str	r7, [sp, #60]	; 0x3c
 800693a:	e75c      	b.n	80067f6 <_strtod_l+0x6ee>
 800693c:	2301      	movs	r3, #1
 800693e:	2500      	movs	r5, #0
 8006940:	930f      	str	r3, [sp, #60]	; 0x3c
 8006942:	e758      	b.n	80067f6 <_strtod_l+0x6ee>
 8006944:	463a      	mov	r2, r7
 8006946:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006948:	4658      	mov	r0, fp
 800694a:	f001 fe1f 	bl	800858c <__lshift>
 800694e:	901c      	str	r0, [sp, #112]	; 0x70
 8006950:	2800      	cmp	r0, #0
 8006952:	f47f af7c 	bne.w	800684e <_strtod_l+0x746>
 8006956:	e5f9      	b.n	800654c <_strtod_l+0x444>
 8006958:	08009110 	.word	0x08009110
 800695c:	fffffc02 	.word	0xfffffc02
 8006960:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006964:	f040 8089 	bne.w	8006a7a <_strtod_l+0x972>
 8006968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800696a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800696e:	b342      	cbz	r2, 80069c2 <_strtod_l+0x8ba>
 8006970:	4aaf      	ldr	r2, [pc, #700]	; (8006c30 <_strtod_l+0xb28>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d156      	bne.n	8006a24 <_strtod_l+0x91c>
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	4648      	mov	r0, r9
 800697a:	b1eb      	cbz	r3, 80069b8 <_strtod_l+0x8b0>
 800697c:	4653      	mov	r3, sl
 800697e:	4aad      	ldr	r2, [pc, #692]	; (8006c34 <_strtod_l+0xb2c>)
 8006980:	f04f 31ff 	mov.w	r1, #4294967295
 8006984:	401a      	ands	r2, r3
 8006986:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800698a:	d818      	bhi.n	80069be <_strtod_l+0x8b6>
 800698c:	0d12      	lsrs	r2, r2, #20
 800698e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006992:	fa01 f303 	lsl.w	r3, r1, r3
 8006996:	4298      	cmp	r0, r3
 8006998:	d144      	bne.n	8006a24 <_strtod_l+0x91c>
 800699a:	4ba7      	ldr	r3, [pc, #668]	; (8006c38 <_strtod_l+0xb30>)
 800699c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800699e:	429a      	cmp	r2, r3
 80069a0:	d102      	bne.n	80069a8 <_strtod_l+0x8a0>
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f add2 	beq.w	800654c <_strtod_l+0x444>
 80069a8:	4ba2      	ldr	r3, [pc, #648]	; (8006c34 <_strtod_l+0xb2c>)
 80069aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ac:	f04f 0900 	mov.w	r9, #0
 80069b0:	401a      	ands	r2, r3
 80069b2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80069b6:	e79f      	b.n	80068f8 <_strtod_l+0x7f0>
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	e7eb      	b.n	8006996 <_strtod_l+0x88e>
 80069be:	460b      	mov	r3, r1
 80069c0:	e7e9      	b.n	8006996 <_strtod_l+0x88e>
 80069c2:	bb7b      	cbnz	r3, 8006a24 <_strtod_l+0x91c>
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	d12c      	bne.n	8006a24 <_strtod_l+0x91c>
 80069ca:	9905      	ldr	r1, [sp, #20]
 80069cc:	4653      	mov	r3, sl
 80069ce:	4a99      	ldr	r2, [pc, #612]	; (8006c34 <_strtod_l+0xb2c>)
 80069d0:	b1f1      	cbz	r1, 8006a10 <_strtod_l+0x908>
 80069d2:	ea02 010a 	and.w	r1, r2, sl
 80069d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069da:	dc19      	bgt.n	8006a10 <_strtod_l+0x908>
 80069dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80069e0:	f77f ae51 	ble.w	8006686 <_strtod_l+0x57e>
 80069e4:	2300      	movs	r3, #0
 80069e6:	4a95      	ldr	r2, [pc, #596]	; (8006c3c <_strtod_l+0xb34>)
 80069e8:	4648      	mov	r0, r9
 80069ea:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80069ee:	4651      	mov	r1, sl
 80069f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80069f4:	f7f9 fd88 	bl	8000508 <__aeabi_dmul>
 80069f8:	4681      	mov	r9, r0
 80069fa:	468a      	mov	sl, r1
 80069fc:	2900      	cmp	r1, #0
 80069fe:	f47f adb0 	bne.w	8006562 <_strtod_l+0x45a>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f47f adad 	bne.w	8006562 <_strtod_l+0x45a>
 8006a08:	2322      	movs	r3, #34	; 0x22
 8006a0a:	f8cb 3000 	str.w	r3, [fp]
 8006a0e:	e5a8      	b.n	8006562 <_strtod_l+0x45a>
 8006a10:	4013      	ands	r3, r2
 8006a12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a16:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8006a1a:	f04f 39ff 	mov.w	r9, #4294967295
 8006a1e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006a22:	e769      	b.n	80068f8 <_strtod_l+0x7f0>
 8006a24:	b19d      	cbz	r5, 8006a4e <_strtod_l+0x946>
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	421d      	tst	r5, r3
 8006a2a:	f43f af65 	beq.w	80068f8 <_strtod_l+0x7f0>
 8006a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a30:	9a05      	ldr	r2, [sp, #20]
 8006a32:	4648      	mov	r0, r9
 8006a34:	4651      	mov	r1, sl
 8006a36:	b173      	cbz	r3, 8006a56 <_strtod_l+0x94e>
 8006a38:	f7ff fb45 	bl	80060c6 <sulp>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a44:	f7f9 fbaa 	bl	800019c <__adddf3>
 8006a48:	4681      	mov	r9, r0
 8006a4a:	468a      	mov	sl, r1
 8006a4c:	e754      	b.n	80068f8 <_strtod_l+0x7f0>
 8006a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a50:	ea13 0f09 	tst.w	r3, r9
 8006a54:	e7e9      	b.n	8006a2a <_strtod_l+0x922>
 8006a56:	f7ff fb36 	bl	80060c6 <sulp>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a62:	f7f9 fb99 	bl	8000198 <__aeabi_dsub>
 8006a66:	2200      	movs	r2, #0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4681      	mov	r9, r0
 8006a6c:	468a      	mov	sl, r1
 8006a6e:	f7f9 ffb3 	bl	80009d8 <__aeabi_dcmpeq>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f47f ae07 	bne.w	8006686 <_strtod_l+0x57e>
 8006a78:	e73e      	b.n	80068f8 <_strtod_l+0x7f0>
 8006a7a:	9904      	ldr	r1, [sp, #16]
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	f001 ff16 	bl	80088ae <__ratio>
 8006a82:	2200      	movs	r2, #0
 8006a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a88:	4606      	mov	r6, r0
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	f7f9 ffb8 	bl	8000a00 <__aeabi_dcmple>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d075      	beq.n	8006b80 <_strtod_l+0xa78>
 8006a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d047      	beq.n	8006b2a <_strtod_l+0xa22>
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	4f68      	ldr	r7, [pc, #416]	; (8006c40 <_strtod_l+0xb38>)
 8006a9e:	4d68      	ldr	r5, [pc, #416]	; (8006c40 <_strtod_l+0xb38>)
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa6:	0d1b      	lsrs	r3, r3, #20
 8006aa8:	051b      	lsls	r3, r3, #20
 8006aaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aae:	4b65      	ldr	r3, [pc, #404]	; (8006c44 <_strtod_l+0xb3c>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	f040 80cf 	bne.w	8006c54 <_strtod_l+0xb4c>
 8006ab6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	f001 fe2c 	bl	8008724 <__ulp>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7f9 fd18 	bl	8000508 <__aeabi_dmul>
 8006ad8:	464a      	mov	r2, r9
 8006ada:	4653      	mov	r3, sl
 8006adc:	f7f9 fb5e 	bl	800019c <__adddf3>
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4954      	ldr	r1, [pc, #336]	; (8006c34 <_strtod_l+0xb2c>)
 8006ae4:	4a58      	ldr	r2, [pc, #352]	; (8006c48 <_strtod_l+0xb40>)
 8006ae6:	4019      	ands	r1, r3
 8006ae8:	4291      	cmp	r1, r2
 8006aea:	4681      	mov	r9, r0
 8006aec:	d95e      	bls.n	8006bac <_strtod_l+0xaa4>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d103      	bne.n	8006b00 <_strtod_l+0x9f8>
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	3301      	adds	r3, #1
 8006afc:	f43f ad26 	beq.w	800654c <_strtod_l+0x444>
 8006b00:	f04f 39ff 	mov.w	r9, #4294967295
 8006b04:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006c38 <_strtod_l+0xb30>
 8006b08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b0a:	4658      	mov	r0, fp
 8006b0c:	f001 fb74 	bl	80081f8 <_Bfree>
 8006b10:	9906      	ldr	r1, [sp, #24]
 8006b12:	4658      	mov	r0, fp
 8006b14:	f001 fb70 	bl	80081f8 <_Bfree>
 8006b18:	9904      	ldr	r1, [sp, #16]
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f001 fb6c 	bl	80081f8 <_Bfree>
 8006b20:	4641      	mov	r1, r8
 8006b22:	4658      	mov	r0, fp
 8006b24:	f001 fb68 	bl	80081f8 <_Bfree>
 8006b28:	e617      	b.n	800675a <_strtod_l+0x652>
 8006b2a:	f1b9 0f00 	cmp.w	r9, #0
 8006b2e:	d119      	bne.n	8006b64 <_strtod_l+0xa5c>
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b36:	b9e3      	cbnz	r3, 8006b72 <_strtod_l+0xa6a>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <_strtod_l+0xb38>)
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 ff54 	bl	80009ec <__aeabi_dcmplt>
 8006b44:	b9c8      	cbnz	r0, 8006b7a <_strtod_l+0xa72>
 8006b46:	2200      	movs	r2, #0
 8006b48:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <_strtod_l+0xb44>)
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	f7f9 fcdb 	bl	8000508 <__aeabi_dmul>
 8006b52:	4604      	mov	r4, r0
 8006b54:	460d      	mov	r5, r1
 8006b56:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b5a:	9418      	str	r4, [sp, #96]	; 0x60
 8006b5c:	9319      	str	r3, [sp, #100]	; 0x64
 8006b5e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006b62:	e79d      	b.n	8006aa0 <_strtod_l+0x998>
 8006b64:	f1b9 0f01 	cmp.w	r9, #1
 8006b68:	d103      	bne.n	8006b72 <_strtod_l+0xa6a>
 8006b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f43f ad8a 	beq.w	8006686 <_strtod_l+0x57e>
 8006b72:	2600      	movs	r6, #0
 8006b74:	4f36      	ldr	r7, [pc, #216]	; (8006c50 <_strtod_l+0xb48>)
 8006b76:	2400      	movs	r4, #0
 8006b78:	e791      	b.n	8006a9e <_strtod_l+0x996>
 8006b7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006b7c:	4d33      	ldr	r5, [pc, #204]	; (8006c4c <_strtod_l+0xb44>)
 8006b7e:	e7ea      	b.n	8006b56 <_strtod_l+0xa4e>
 8006b80:	4b32      	ldr	r3, [pc, #200]	; (8006c4c <_strtod_l+0xb44>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 fcbe 	bl	8000508 <__aeabi_dmul>
 8006b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	b933      	cbnz	r3, 8006ba2 <_strtod_l+0xa9a>
 8006b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b98:	9010      	str	r0, [sp, #64]	; 0x40
 8006b9a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b9c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ba0:	e77e      	b.n	8006aa0 <_strtod_l+0x998>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006baa:	e7f7      	b.n	8006b9c <_strtod_l+0xa94>
 8006bac:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006bb0:	9b05      	ldr	r3, [sp, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1a8      	bne.n	8006b08 <_strtod_l+0xa00>
 8006bb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006bba:	0d1b      	lsrs	r3, r3, #20
 8006bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	4656      	mov	r6, sl
 8006bc4:	d1a0      	bne.n	8006b08 <_strtod_l+0xa00>
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7f9 ff4d 	bl	8000a68 <__aeabi_d2iz>
 8006bce:	f7f9 fc31 	bl	8000434 <__aeabi_i2d>
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7f9 fadd 	bl	8000198 <__aeabi_dsub>
 8006bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	b933      	cbnz	r3, 8006bf4 <_strtod_l+0xaec>
 8006be6:	f1b9 0f00 	cmp.w	r9, #0
 8006bea:	d103      	bne.n	8006bf4 <_strtod_l+0xaec>
 8006bec:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	d06a      	beq.n	8006cca <_strtod_l+0xbc2>
 8006bf4:	a30a      	add	r3, pc, #40	; (adr r3, 8006c20 <_strtod_l+0xb18>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 fef5 	bl	80009ec <__aeabi_dcmplt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f47f acad 	bne.w	8006562 <_strtod_l+0x45a>
 8006c08:	a307      	add	r3, pc, #28	; (adr r3, 8006c28 <_strtod_l+0xb20>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 ff09 	bl	8000a28 <__aeabi_dcmpgt>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f43f af76 	beq.w	8006b08 <_strtod_l+0xa00>
 8006c1c:	e4a1      	b.n	8006562 <_strtod_l+0x45a>
 8006c1e:	bf00      	nop
 8006c20:	94a03595 	.word	0x94a03595
 8006c24:	3fdfffff 	.word	0x3fdfffff
 8006c28:	35afe535 	.word	0x35afe535
 8006c2c:	3fe00000 	.word	0x3fe00000
 8006c30:	000fffff 	.word	0x000fffff
 8006c34:	7ff00000 	.word	0x7ff00000
 8006c38:	7fefffff 	.word	0x7fefffff
 8006c3c:	39500000 	.word	0x39500000
 8006c40:	3ff00000 	.word	0x3ff00000
 8006c44:	7fe00000 	.word	0x7fe00000
 8006c48:	7c9fffff 	.word	0x7c9fffff
 8006c4c:	3fe00000 	.word	0x3fe00000
 8006c50:	bff00000 	.word	0xbff00000
 8006c54:	9b05      	ldr	r3, [sp, #20]
 8006c56:	b313      	cbz	r3, 8006c9e <_strtod_l+0xb96>
 8006c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c5e:	d81e      	bhi.n	8006c9e <_strtod_l+0xb96>
 8006c60:	a325      	add	r3, pc, #148	; (adr r3, 8006cf8 <_strtod_l+0xbf0>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 fec9 	bl	8000a00 <__aeabi_dcmple>
 8006c6e:	b190      	cbz	r0, 8006c96 <_strtod_l+0xb8e>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7f9 ff20 	bl	8000ab8 <__aeabi_d2uiz>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	bf08      	it	eq
 8006c7c:	2001      	moveq	r0, #1
 8006c7e:	f7f9 fbc9 	bl	8000414 <__aeabi_ui2d>
 8006c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c84:	4604      	mov	r4, r0
 8006c86:	460d      	mov	r5, r1
 8006c88:	b9d3      	cbnz	r3, 8006cc0 <_strtod_l+0xbb8>
 8006c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c8e:	9012      	str	r0, [sp, #72]	; 0x48
 8006c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c98:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006c9c:	1a9f      	subs	r7, r3, r2
 8006c9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ca2:	f001 fd3f 	bl	8008724 <__ulp>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fc2b 	bl	8000508 <__aeabi_dmul>
 8006cb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cb6:	f7f9 fa71 	bl	800019c <__adddf3>
 8006cba:	4681      	mov	r9, r0
 8006cbc:	468a      	mov	sl, r1
 8006cbe:	e777      	b.n	8006bb0 <_strtod_l+0xaa8>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006cc8:	e7e3      	b.n	8006c92 <_strtod_l+0xb8a>
 8006cca:	a30d      	add	r3, pc, #52	; (adr r3, 8006d00 <_strtod_l+0xbf8>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fe8c 	bl	80009ec <__aeabi_dcmplt>
 8006cd4:	e79f      	b.n	8006c16 <_strtod_l+0xb0e>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8006cda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	f7ff ba55 	b.w	800618e <_strtod_l+0x86>
 8006ce4:	2b65      	cmp	r3, #101	; 0x65
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f43f ab42 	beq.w	8006372 <_strtod_l+0x26a>
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	9105      	str	r1, [sp, #20]
 8006cf4:	f7ff babf 	b.w	8006276 <_strtod_l+0x16e>
 8006cf8:	ffc00000 	.word	0xffc00000
 8006cfc:	41dfffff 	.word	0x41dfffff
 8006d00:	94a03595 	.word	0x94a03595
 8006d04:	3fcfffff 	.word	0x3fcfffff

08006d08 <strtof>:
 8006d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	4e21      	ldr	r6, [pc, #132]	; (8006d94 <strtof+0x8c>)
 8006d0e:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <strtof+0x90>)
 8006d10:	6834      	ldr	r4, [r6, #0]
 8006d12:	6a23      	ldr	r3, [r4, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf08      	it	eq
 8006d18:	4613      	moveq	r3, r2
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff f9f2 	bl	8006108 <_strtod_l>
 8006d24:	4605      	mov	r5, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f7f9 fe84 	bl	8000a3c <__aeabi_dcmpun>
 8006d34:	b120      	cbz	r0, 8006d40 <strtof+0x38>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3c:	f002 b836 	b.w	8008dac <nanf>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7f9 fed8 	bl	8000af8 <__aeabi_d2f>
 8006d48:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	4913      	ldr	r1, [pc, #76]	; (8006d9c <strtof+0x94>)
 8006d50:	4640      	mov	r0, r8
 8006d52:	f7fa f9f5 	bl	8001140 <__aeabi_fcmpun>
 8006d56:	b9c8      	cbnz	r0, 8006d8c <strtof+0x84>
 8006d58:	4910      	ldr	r1, [pc, #64]	; (8006d9c <strtof+0x94>)
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	f7fa f9d2 	bl	8001104 <__aeabi_fcmple>
 8006d60:	b9a0      	cbnz	r0, 8006d8c <strtof+0x84>
 8006d62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006d66:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <strtof+0x98>)
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	4621      	mov	r1, r4
 8006d70:	f7f9 fe64 	bl	8000a3c <__aeabi_dcmpun>
 8006d74:	b938      	cbnz	r0, 8006d86 <strtof+0x7e>
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <strtof+0x98>)
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	4621      	mov	r1, r4
 8006d80:	f7f9 fe3e 	bl	8000a00 <__aeabi_dcmple>
 8006d84:	b110      	cbz	r0, 8006d8c <strtof+0x84>
 8006d86:	2222      	movs	r2, #34	; 0x22
 8006d88:	6833      	ldr	r3, [r6, #0]
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d92:	bf00      	nop
 8006d94:	2000003c 	.word	0x2000003c
 8006d98:	200000a0 	.word	0x200000a0
 8006d9c:	7f7fffff 	.word	0x7f7fffff
 8006da0:	7fefffff 	.word	0x7fefffff

08006da4 <strtok>:
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <strtok+0x50>)
 8006da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006daa:	681d      	ldr	r5, [r3, #0]
 8006dac:	4606      	mov	r6, r0
 8006dae:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006db0:	460f      	mov	r7, r1
 8006db2:	b9b4      	cbnz	r4, 8006de2 <strtok+0x3e>
 8006db4:	2050      	movs	r0, #80	; 0x50
 8006db6:	f001 f9c3 	bl	8008140 <malloc>
 8006dba:	65a8      	str	r0, [r5, #88]	; 0x58
 8006dbc:	e9c0 4400 	strd	r4, r4, [r0]
 8006dc0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006dc4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006dc8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006dcc:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006dd0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006dd4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006dd8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006ddc:	6184      	str	r4, [r0, #24]
 8006dde:	7704      	strb	r4, [r0, #28]
 8006de0:	6244      	str	r4, [r0, #36]	; 0x24
 8006de2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006de4:	4639      	mov	r1, r7
 8006de6:	4630      	mov	r0, r6
 8006de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dec:	2301      	movs	r3, #1
 8006dee:	f000 b803 	b.w	8006df8 <__strtok_r>
 8006df2:	bf00      	nop
 8006df4:	2000003c 	.word	0x2000003c

08006df8 <__strtok_r>:
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b918      	cbnz	r0, 8006e04 <__strtok_r+0xc>
 8006dfc:	6810      	ldr	r0, [r2, #0]
 8006dfe:	b908      	cbnz	r0, 8006e04 <__strtok_r+0xc>
 8006e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e02:	4620      	mov	r0, r4
 8006e04:	4604      	mov	r4, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e0c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e10:	b91e      	cbnz	r6, 8006e1a <__strtok_r+0x22>
 8006e12:	b96d      	cbnz	r5, 8006e30 <__strtok_r+0x38>
 8006e14:	6015      	str	r5, [r2, #0]
 8006e16:	4628      	mov	r0, r5
 8006e18:	e7f2      	b.n	8006e00 <__strtok_r+0x8>
 8006e1a:	42b5      	cmp	r5, r6
 8006e1c:	d1f6      	bne.n	8006e0c <__strtok_r+0x14>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ef      	bne.n	8006e02 <__strtok_r+0xa>
 8006e22:	6014      	str	r4, [r2, #0]
 8006e24:	7003      	strb	r3, [r0, #0]
 8006e26:	e7eb      	b.n	8006e00 <__strtok_r+0x8>
 8006e28:	462b      	mov	r3, r5
 8006e2a:	e00d      	b.n	8006e48 <__strtok_r+0x50>
 8006e2c:	b926      	cbnz	r6, 8006e38 <__strtok_r+0x40>
 8006e2e:	461c      	mov	r4, r3
 8006e30:	4623      	mov	r3, r4
 8006e32:	460f      	mov	r7, r1
 8006e34:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006e38:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e3c:	42b5      	cmp	r5, r6
 8006e3e:	d1f5      	bne.n	8006e2c <__strtok_r+0x34>
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	d0f1      	beq.n	8006e28 <__strtok_r+0x30>
 8006e44:	2100      	movs	r1, #0
 8006e46:	7021      	strb	r1, [r4, #0]
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e7d9      	b.n	8006e00 <__strtok_r+0x8>

08006e4c <quorem>:
 8006e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	6903      	ldr	r3, [r0, #16]
 8006e52:	690c      	ldr	r4, [r1, #16]
 8006e54:	4680      	mov	r8, r0
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	f2c0 8084 	blt.w	8006f64 <quorem+0x118>
 8006e5c:	3c01      	subs	r4, #1
 8006e5e:	f101 0714 	add.w	r7, r1, #20
 8006e62:	f100 0614 	add.w	r6, r0, #20
 8006e66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e6e:	3501      	adds	r5, #1
 8006e70:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e74:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e78:	eb06 030c 	add.w	r3, r6, ip
 8006e7c:	eb07 090c 	add.w	r9, r7, ip
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	b39d      	cbz	r5, 8006eec <quorem+0xa0>
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	4638      	mov	r0, r7
 8006e8a:	46b6      	mov	lr, r6
 8006e8c:	46d3      	mov	fp, sl
 8006e8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e92:	b293      	uxth	r3, r2
 8006e94:	fb05 a303 	mla	r3, r5, r3, sl
 8006e98:	0c12      	lsrs	r2, r2, #16
 8006e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9e:	fb05 a202 	mla	r2, r5, r2, sl
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ebab 0303 	sub.w	r3, fp, r3
 8006ea8:	f8de b000 	ldr.w	fp, [lr]
 8006eac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006eb0:	fa1f fb8b 	uxth.w	fp, fp
 8006eb4:	445b      	add	r3, fp
 8006eb6:	fa1f fb82 	uxth.w	fp, r2
 8006eba:	f8de 2000 	ldr.w	r2, [lr]
 8006ebe:	4581      	cmp	r9, r0
 8006ec0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ece:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006ed2:	f84e 3b04 	str.w	r3, [lr], #4
 8006ed6:	d2da      	bcs.n	8006e8e <quorem+0x42>
 8006ed8:	f856 300c 	ldr.w	r3, [r6, ip]
 8006edc:	b933      	cbnz	r3, 8006eec <quorem+0xa0>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	d331      	bcc.n	8006f4c <quorem+0x100>
 8006ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8006eec:	4640      	mov	r0, r8
 8006eee:	f001 fba1 	bl	8008634 <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	db26      	blt.n	8006f44 <quorem+0xf8>
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f04f 0c00 	mov.w	ip, #0
 8006efc:	3501      	adds	r5, #1
 8006efe:	f857 1b04 	ldr.w	r1, [r7], #4
 8006f02:	f8d0 e000 	ldr.w	lr, [r0]
 8006f06:	b28b      	uxth	r3, r1
 8006f08:	ebac 0303 	sub.w	r3, ip, r3
 8006f0c:	fa1f f28e 	uxth.w	r2, lr
 8006f10:	4413      	add	r3, r2
 8006f12:	0c0a      	lsrs	r2, r1, #16
 8006f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f22:	45b9      	cmp	r9, r7
 8006f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f28:	f840 3b04 	str.w	r3, [r0], #4
 8006f2c:	d2e7      	bcs.n	8006efe <quorem+0xb2>
 8006f2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f36:	b92a      	cbnz	r2, 8006f44 <quorem+0xf8>
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	429e      	cmp	r6, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	d30b      	bcc.n	8006f58 <quorem+0x10c>
 8006f40:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f44:	4628      	mov	r0, r5
 8006f46:	b003      	add	sp, #12
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	3b04      	subs	r3, #4
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	d1c9      	bne.n	8006ee8 <quorem+0x9c>
 8006f54:	3c01      	subs	r4, #1
 8006f56:	e7c4      	b.n	8006ee2 <quorem+0x96>
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	3b04      	subs	r3, #4
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	d1ef      	bne.n	8006f40 <quorem+0xf4>
 8006f60:	3c01      	subs	r4, #1
 8006f62:	e7ea      	b.n	8006f3a <quorem+0xee>
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7ee      	b.n	8006f46 <quorem+0xfa>

08006f68 <_dtoa_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	461f      	mov	r7, r3
 8006f70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f72:	b095      	sub	sp, #84	; 0x54
 8006f74:	4604      	mov	r4, r0
 8006f76:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006f7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006f7e:	b93d      	cbnz	r5, 8006f90 <_dtoa_r+0x28>
 8006f80:	2010      	movs	r0, #16
 8006f82:	f001 f8dd 	bl	8008140 <malloc>
 8006f86:	6260      	str	r0, [r4, #36]	; 0x24
 8006f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f8c:	6005      	str	r5, [r0, #0]
 8006f8e:	60c5      	str	r5, [r0, #12]
 8006f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	b151      	cbz	r1, 8006fac <_dtoa_r+0x44>
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	4093      	lsls	r3, r2
 8006f9c:	604a      	str	r2, [r1, #4]
 8006f9e:	608b      	str	r3, [r1, #8]
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f001 f929 	bl	80081f8 <_Bfree>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	1e3b      	subs	r3, r7, #0
 8006fae:	bfaf      	iteee	ge
 8006fb0:	2300      	movge	r3, #0
 8006fb2:	2201      	movlt	r2, #1
 8006fb4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fb8:	9303      	strlt	r3, [sp, #12]
 8006fba:	bfac      	ite	ge
 8006fbc:	f8c8 3000 	strge.w	r3, [r8]
 8006fc0:	f8c8 2000 	strlt.w	r2, [r8]
 8006fc4:	4bae      	ldr	r3, [pc, #696]	; (8007280 <_dtoa_r+0x318>)
 8006fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006fca:	ea33 0308 	bics.w	r3, r3, r8
 8006fce:	d11b      	bne.n	8007008 <_dtoa_r+0xa0>
 8006fd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	b923      	cbnz	r3, 8006fe6 <_dtoa_r+0x7e>
 8006fdc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f000 8545 	beq.w	8007a70 <_dtoa_r+0xb08>
 8006fe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe8:	b953      	cbnz	r3, 8007000 <_dtoa_r+0x98>
 8006fea:	4ba6      	ldr	r3, [pc, #664]	; (8007284 <_dtoa_r+0x31c>)
 8006fec:	e021      	b.n	8007032 <_dtoa_r+0xca>
 8006fee:	4ba6      	ldr	r3, [pc, #664]	; (8007288 <_dtoa_r+0x320>)
 8006ff0:	9306      	str	r3, [sp, #24]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	9806      	ldr	r0, [sp, #24]
 8006ffa:	b015      	add	sp, #84	; 0x54
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	4ba0      	ldr	r3, [pc, #640]	; (8007284 <_dtoa_r+0x31c>)
 8007002:	9306      	str	r3, [sp, #24]
 8007004:	3303      	adds	r3, #3
 8007006:	e7f5      	b.n	8006ff4 <_dtoa_r+0x8c>
 8007008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fce0 	bl	80009d8 <__aeabi_dcmpeq>
 8007018:	4682      	mov	sl, r0
 800701a:	b160      	cbz	r0, 8007036 <_dtoa_r+0xce>
 800701c:	2301      	movs	r3, #1
 800701e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8520 	beq.w	8007a6a <_dtoa_r+0xb02>
 800702a:	4b98      	ldr	r3, [pc, #608]	; (800728c <_dtoa_r+0x324>)
 800702c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	3b01      	subs	r3, #1
 8007032:	9306      	str	r3, [sp, #24]
 8007034:	e7e0      	b.n	8006ff8 <_dtoa_r+0x90>
 8007036:	ab12      	add	r3, sp, #72	; 0x48
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	ab13      	add	r3, sp, #76	; 0x4c
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4632      	mov	r2, r6
 8007040:	463b      	mov	r3, r7
 8007042:	4620      	mov	r0, r4
 8007044:	f001 fbe4 	bl	8008810 <__d2b>
 8007048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800704c:	4683      	mov	fp, r0
 800704e:	2d00      	cmp	r5, #0
 8007050:	d07d      	beq.n	800714e <_dtoa_r+0x1e6>
 8007052:	46b0      	mov	r8, r6
 8007054:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007058:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800705c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007060:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007064:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007068:	2200      	movs	r2, #0
 800706a:	4b89      	ldr	r3, [pc, #548]	; (8007290 <_dtoa_r+0x328>)
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 f892 	bl	8000198 <__aeabi_dsub>
 8007074:	a37c      	add	r3, pc, #496	; (adr r3, 8007268 <_dtoa_r+0x300>)
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	f7f9 fa45 	bl	8000508 <__aeabi_dmul>
 800707e:	a37c      	add	r3, pc, #496	; (adr r3, 8007270 <_dtoa_r+0x308>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f7f9 f88a 	bl	800019c <__adddf3>
 8007088:	4606      	mov	r6, r0
 800708a:	4628      	mov	r0, r5
 800708c:	460f      	mov	r7, r1
 800708e:	f7f9 f9d1 	bl	8000434 <__aeabi_i2d>
 8007092:	a379      	add	r3, pc, #484	; (adr r3, 8007278 <_dtoa_r+0x310>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 fa36 	bl	8000508 <__aeabi_dmul>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 f87a 	bl	800019c <__adddf3>
 80070a8:	4606      	mov	r6, r0
 80070aa:	460f      	mov	r7, r1
 80070ac:	f7f9 fcdc 	bl	8000a68 <__aeabi_d2iz>
 80070b0:	2200      	movs	r2, #0
 80070b2:	4682      	mov	sl, r0
 80070b4:	2300      	movs	r3, #0
 80070b6:	4630      	mov	r0, r6
 80070b8:	4639      	mov	r1, r7
 80070ba:	f7f9 fc97 	bl	80009ec <__aeabi_dcmplt>
 80070be:	b148      	cbz	r0, 80070d4 <_dtoa_r+0x16c>
 80070c0:	4650      	mov	r0, sl
 80070c2:	f7f9 f9b7 	bl	8000434 <__aeabi_i2d>
 80070c6:	4632      	mov	r2, r6
 80070c8:	463b      	mov	r3, r7
 80070ca:	f7f9 fc85 	bl	80009d8 <__aeabi_dcmpeq>
 80070ce:	b908      	cbnz	r0, 80070d4 <_dtoa_r+0x16c>
 80070d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d4:	f1ba 0f16 	cmp.w	sl, #22
 80070d8:	d85a      	bhi.n	8007190 <_dtoa_r+0x228>
 80070da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070de:	496d      	ldr	r1, [pc, #436]	; (8007294 <_dtoa_r+0x32c>)
 80070e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80070e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e8:	f7f9 fc9e 	bl	8000a28 <__aeabi_dcmpgt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d051      	beq.n	8007194 <_dtoa_r+0x22c>
 80070f0:	2300      	movs	r3, #0
 80070f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070f6:	930d      	str	r3, [sp, #52]	; 0x34
 80070f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070fa:	1b5d      	subs	r5, r3, r5
 80070fc:	1e6b      	subs	r3, r5, #1
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	bf43      	ittte	mi
 8007102:	2300      	movmi	r3, #0
 8007104:	f1c5 0901 	rsbmi	r9, r5, #1
 8007108:	9307      	strmi	r3, [sp, #28]
 800710a:	f04f 0900 	movpl.w	r9, #0
 800710e:	f1ba 0f00 	cmp.w	sl, #0
 8007112:	db41      	blt.n	8007198 <_dtoa_r+0x230>
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800711a:	4453      	add	r3, sl
 800711c:	9307      	str	r3, [sp, #28]
 800711e:	2300      	movs	r3, #0
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007124:	2b09      	cmp	r3, #9
 8007126:	f200 808f 	bhi.w	8007248 <_dtoa_r+0x2e0>
 800712a:	2b05      	cmp	r3, #5
 800712c:	bfc4      	itt	gt
 800712e:	3b04      	subgt	r3, #4
 8007130:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007134:	bfc8      	it	gt
 8007136:	2500      	movgt	r5, #0
 8007138:	f1a3 0302 	sub.w	r3, r3, #2
 800713c:	bfd8      	it	le
 800713e:	2501      	movle	r5, #1
 8007140:	2b03      	cmp	r3, #3
 8007142:	f200 808d 	bhi.w	8007260 <_dtoa_r+0x2f8>
 8007146:	e8df f003 	tbb	[pc, r3]
 800714a:	7d7b      	.short	0x7d7b
 800714c:	6f2f      	.short	0x6f2f
 800714e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007152:	441d      	add	r5, r3
 8007154:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007158:	2820      	cmp	r0, #32
 800715a:	dd13      	ble.n	8007184 <_dtoa_r+0x21c>
 800715c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007160:	9b02      	ldr	r3, [sp, #8]
 8007162:	fa08 f800 	lsl.w	r8, r8, r0
 8007166:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800716a:	fa23 f000 	lsr.w	r0, r3, r0
 800716e:	ea48 0000 	orr.w	r0, r8, r0
 8007172:	f7f9 f94f 	bl	8000414 <__aeabi_ui2d>
 8007176:	2301      	movs	r3, #1
 8007178:	4680      	mov	r8, r0
 800717a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800717e:	3d01      	subs	r5, #1
 8007180:	9310      	str	r3, [sp, #64]	; 0x40
 8007182:	e771      	b.n	8007068 <_dtoa_r+0x100>
 8007184:	9b02      	ldr	r3, [sp, #8]
 8007186:	f1c0 0020 	rsb	r0, r0, #32
 800718a:	fa03 f000 	lsl.w	r0, r3, r0
 800718e:	e7f0      	b.n	8007172 <_dtoa_r+0x20a>
 8007190:	2301      	movs	r3, #1
 8007192:	e7b0      	b.n	80070f6 <_dtoa_r+0x18e>
 8007194:	900d      	str	r0, [sp, #52]	; 0x34
 8007196:	e7af      	b.n	80070f8 <_dtoa_r+0x190>
 8007198:	f1ca 0300 	rsb	r3, sl, #0
 800719c:	9308      	str	r3, [sp, #32]
 800719e:	2300      	movs	r3, #0
 80071a0:	eba9 090a 	sub.w	r9, r9, sl
 80071a4:	930c      	str	r3, [sp, #48]	; 0x30
 80071a6:	e7bc      	b.n	8007122 <_dtoa_r+0x1ba>
 80071a8:	2301      	movs	r3, #1
 80071aa:	9309      	str	r3, [sp, #36]	; 0x24
 80071ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd74      	ble.n	800729c <_dtoa_r+0x334>
 80071b2:	4698      	mov	r8, r3
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	2200      	movs	r2, #0
 80071b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071ba:	6072      	str	r2, [r6, #4]
 80071bc:	2204      	movs	r2, #4
 80071be:	f102 0014 	add.w	r0, r2, #20
 80071c2:	4298      	cmp	r0, r3
 80071c4:	6871      	ldr	r1, [r6, #4]
 80071c6:	d96e      	bls.n	80072a6 <_dtoa_r+0x33e>
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 ffe1 	bl	8008190 <_Balloc>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	6030      	str	r0, [r6, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f1b8 0f0e 	cmp.w	r8, #14
 80071d8:	9306      	str	r3, [sp, #24]
 80071da:	f200 80ed 	bhi.w	80073b8 <_dtoa_r+0x450>
 80071de:	2d00      	cmp	r5, #0
 80071e0:	f000 80ea 	beq.w	80073b8 <_dtoa_r+0x450>
 80071e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071e8:	f1ba 0f00 	cmp.w	sl, #0
 80071ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80071f0:	dd77      	ble.n	80072e2 <_dtoa_r+0x37a>
 80071f2:	4a28      	ldr	r2, [pc, #160]	; (8007294 <_dtoa_r+0x32c>)
 80071f4:	f00a 030f 	and.w	r3, sl, #15
 80071f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80071fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007200:	06f0      	lsls	r0, r6, #27
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800720a:	d568      	bpl.n	80072de <_dtoa_r+0x376>
 800720c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007210:	4b21      	ldr	r3, [pc, #132]	; (8007298 <_dtoa_r+0x330>)
 8007212:	2503      	movs	r5, #3
 8007214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007218:	f7f9 faa0 	bl	800075c <__aeabi_ddiv>
 800721c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007220:	f006 060f 	and.w	r6, r6, #15
 8007224:	4f1c      	ldr	r7, [pc, #112]	; (8007298 <_dtoa_r+0x330>)
 8007226:	e04f      	b.n	80072c8 <_dtoa_r+0x360>
 8007228:	2301      	movs	r3, #1
 800722a:	9309      	str	r3, [sp, #36]	; 0x24
 800722c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800722e:	4453      	add	r3, sl
 8007230:	f103 0801 	add.w	r8, r3, #1
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	4643      	mov	r3, r8
 8007238:	2b01      	cmp	r3, #1
 800723a:	bfb8      	it	lt
 800723c:	2301      	movlt	r3, #1
 800723e:	e7ba      	b.n	80071b6 <_dtoa_r+0x24e>
 8007240:	2300      	movs	r3, #0
 8007242:	e7b2      	b.n	80071aa <_dtoa_r+0x242>
 8007244:	2300      	movs	r3, #0
 8007246:	e7f0      	b.n	800722a <_dtoa_r+0x2c2>
 8007248:	2501      	movs	r5, #1
 800724a:	2300      	movs	r3, #0
 800724c:	9509      	str	r5, [sp, #36]	; 0x24
 800724e:	931e      	str	r3, [sp, #120]	; 0x78
 8007250:	f04f 33ff 	mov.w	r3, #4294967295
 8007254:	2200      	movs	r2, #0
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	4698      	mov	r8, r3
 800725a:	2312      	movs	r3, #18
 800725c:	921f      	str	r2, [sp, #124]	; 0x7c
 800725e:	e7aa      	b.n	80071b6 <_dtoa_r+0x24e>
 8007260:	2301      	movs	r3, #1
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	e7f4      	b.n	8007250 <_dtoa_r+0x2e8>
 8007266:	bf00      	nop
 8007268:	636f4361 	.word	0x636f4361
 800726c:	3fd287a7 	.word	0x3fd287a7
 8007270:	8b60c8b3 	.word	0x8b60c8b3
 8007274:	3fc68a28 	.word	0x3fc68a28
 8007278:	509f79fb 	.word	0x509f79fb
 800727c:	3fd34413 	.word	0x3fd34413
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	08009141 	.word	0x08009141
 8007288:	08009138 	.word	0x08009138
 800728c:	080090c5 	.word	0x080090c5
 8007290:	3ff80000 	.word	0x3ff80000
 8007294:	08009178 	.word	0x08009178
 8007298:	08009150 	.word	0x08009150
 800729c:	2301      	movs	r3, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	4698      	mov	r8, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	e7da      	b.n	800725c <_dtoa_r+0x2f4>
 80072a6:	3101      	adds	r1, #1
 80072a8:	6071      	str	r1, [r6, #4]
 80072aa:	0052      	lsls	r2, r2, #1
 80072ac:	e787      	b.n	80071be <_dtoa_r+0x256>
 80072ae:	07f1      	lsls	r1, r6, #31
 80072b0:	d508      	bpl.n	80072c4 <_dtoa_r+0x35c>
 80072b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ba:	f7f9 f925 	bl	8000508 <__aeabi_dmul>
 80072be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072c2:	3501      	adds	r5, #1
 80072c4:	1076      	asrs	r6, r6, #1
 80072c6:	3708      	adds	r7, #8
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	d1f0      	bne.n	80072ae <_dtoa_r+0x346>
 80072cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d4:	f7f9 fa42 	bl	800075c <__aeabi_ddiv>
 80072d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072dc:	e01b      	b.n	8007316 <_dtoa_r+0x3ae>
 80072de:	2502      	movs	r5, #2
 80072e0:	e7a0      	b.n	8007224 <_dtoa_r+0x2bc>
 80072e2:	f000 80a4 	beq.w	800742e <_dtoa_r+0x4c6>
 80072e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80072ea:	f1ca 0600 	rsb	r6, sl, #0
 80072ee:	4ba0      	ldr	r3, [pc, #640]	; (8007570 <_dtoa_r+0x608>)
 80072f0:	f006 020f 	and.w	r2, r6, #15
 80072f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f7f9 f904 	bl	8000508 <__aeabi_dmul>
 8007300:	2502      	movs	r5, #2
 8007302:	2300      	movs	r3, #0
 8007304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007308:	4f9a      	ldr	r7, [pc, #616]	; (8007574 <_dtoa_r+0x60c>)
 800730a:	1136      	asrs	r6, r6, #4
 800730c:	2e00      	cmp	r6, #0
 800730e:	f040 8083 	bne.w	8007418 <_dtoa_r+0x4b0>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e0      	bne.n	80072d8 <_dtoa_r+0x370>
 8007316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 808a 	beq.w	8007432 <_dtoa_r+0x4ca>
 800731e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007322:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800732a:	2200      	movs	r2, #0
 800732c:	4b92      	ldr	r3, [pc, #584]	; (8007578 <_dtoa_r+0x610>)
 800732e:	f7f9 fb5d 	bl	80009ec <__aeabi_dcmplt>
 8007332:	2800      	cmp	r0, #0
 8007334:	d07d      	beq.n	8007432 <_dtoa_r+0x4ca>
 8007336:	f1b8 0f00 	cmp.w	r8, #0
 800733a:	d07a      	beq.n	8007432 <_dtoa_r+0x4ca>
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	dd36      	ble.n	80073b0 <_dtoa_r+0x448>
 8007342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007346:	2200      	movs	r2, #0
 8007348:	4b8c      	ldr	r3, [pc, #560]	; (800757c <_dtoa_r+0x614>)
 800734a:	f7f9 f8dd 	bl	8000508 <__aeabi_dmul>
 800734e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007352:	9e04      	ldr	r6, [sp, #16]
 8007354:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007358:	3501      	adds	r5, #1
 800735a:	4628      	mov	r0, r5
 800735c:	f7f9 f86a 	bl	8000434 <__aeabi_i2d>
 8007360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007364:	f7f9 f8d0 	bl	8000508 <__aeabi_dmul>
 8007368:	2200      	movs	r2, #0
 800736a:	4b85      	ldr	r3, [pc, #532]	; (8007580 <_dtoa_r+0x618>)
 800736c:	f7f8 ff16 	bl	800019c <__adddf3>
 8007370:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007374:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007378:	950b      	str	r5, [sp, #44]	; 0x2c
 800737a:	2e00      	cmp	r6, #0
 800737c:	d15c      	bne.n	8007438 <_dtoa_r+0x4d0>
 800737e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	4b7f      	ldr	r3, [pc, #508]	; (8007584 <_dtoa_r+0x61c>)
 8007386:	f7f8 ff07 	bl	8000198 <__aeabi_dsub>
 800738a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800738c:	462b      	mov	r3, r5
 800738e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007392:	f7f9 fb49 	bl	8000a28 <__aeabi_dcmpgt>
 8007396:	2800      	cmp	r0, #0
 8007398:	f040 8281 	bne.w	800789e <_dtoa_r+0x936>
 800739c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80073a6:	f7f9 fb21 	bl	80009ec <__aeabi_dcmplt>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	f040 8275 	bne.w	800789a <_dtoa_r+0x932>
 80073b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f2c0 814b 	blt.w	8007656 <_dtoa_r+0x6ee>
 80073c0:	f1ba 0f0e 	cmp.w	sl, #14
 80073c4:	f300 8147 	bgt.w	8007656 <_dtoa_r+0x6ee>
 80073c8:	4b69      	ldr	r3, [pc, #420]	; (8007570 <_dtoa_r+0x608>)
 80073ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f280 80d7 	bge.w	800758c <_dtoa_r+0x624>
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	f300 80d3 	bgt.w	800758c <_dtoa_r+0x624>
 80073e6:	f040 8257 	bne.w	8007898 <_dtoa_r+0x930>
 80073ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b64      	ldr	r3, [pc, #400]	; (8007584 <_dtoa_r+0x61c>)
 80073f2:	f7f9 f889 	bl	8000508 <__aeabi_dmul>
 80073f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073fa:	f7f9 fb0b 	bl	8000a14 <__aeabi_dcmpge>
 80073fe:	4646      	mov	r6, r8
 8007400:	4647      	mov	r7, r8
 8007402:	2800      	cmp	r0, #0
 8007404:	f040 822d 	bne.w	8007862 <_dtoa_r+0x8fa>
 8007408:	9b06      	ldr	r3, [sp, #24]
 800740a:	9a06      	ldr	r2, [sp, #24]
 800740c:	1c5d      	adds	r5, r3, #1
 800740e:	2331      	movs	r3, #49	; 0x31
 8007410:	f10a 0a01 	add.w	sl, sl, #1
 8007414:	7013      	strb	r3, [r2, #0]
 8007416:	e228      	b.n	800786a <_dtoa_r+0x902>
 8007418:	07f2      	lsls	r2, r6, #31
 800741a:	d505      	bpl.n	8007428 <_dtoa_r+0x4c0>
 800741c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007420:	f7f9 f872 	bl	8000508 <__aeabi_dmul>
 8007424:	2301      	movs	r3, #1
 8007426:	3501      	adds	r5, #1
 8007428:	1076      	asrs	r6, r6, #1
 800742a:	3708      	adds	r7, #8
 800742c:	e76e      	b.n	800730c <_dtoa_r+0x3a4>
 800742e:	2502      	movs	r5, #2
 8007430:	e771      	b.n	8007316 <_dtoa_r+0x3ae>
 8007432:	4657      	mov	r7, sl
 8007434:	4646      	mov	r6, r8
 8007436:	e790      	b.n	800735a <_dtoa_r+0x3f2>
 8007438:	4b4d      	ldr	r3, [pc, #308]	; (8007570 <_dtoa_r+0x608>)
 800743a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800743e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	2b00      	cmp	r3, #0
 8007446:	d048      	beq.n	80074da <_dtoa_r+0x572>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	2000      	movs	r0, #0
 800744e:	494e      	ldr	r1, [pc, #312]	; (8007588 <_dtoa_r+0x620>)
 8007450:	f7f9 f984 	bl	800075c <__aeabi_ddiv>
 8007454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007458:	f7f8 fe9e 	bl	8000198 <__aeabi_dsub>
 800745c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007460:	9d06      	ldr	r5, [sp, #24]
 8007462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007466:	f7f9 faff 	bl	8000a68 <__aeabi_d2iz>
 800746a:	9011      	str	r0, [sp, #68]	; 0x44
 800746c:	f7f8 ffe2 	bl	8000434 <__aeabi_i2d>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007478:	f7f8 fe8e 	bl	8000198 <__aeabi_dsub>
 800747c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800747e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007482:	3330      	adds	r3, #48	; 0x30
 8007484:	f805 3b01 	strb.w	r3, [r5], #1
 8007488:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800748c:	f7f9 faae 	bl	80009ec <__aeabi_dcmplt>
 8007490:	2800      	cmp	r0, #0
 8007492:	d163      	bne.n	800755c <_dtoa_r+0x5f4>
 8007494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007498:	2000      	movs	r0, #0
 800749a:	4937      	ldr	r1, [pc, #220]	; (8007578 <_dtoa_r+0x610>)
 800749c:	f7f8 fe7c 	bl	8000198 <__aeabi_dsub>
 80074a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074a4:	f7f9 faa2 	bl	80009ec <__aeabi_dcmplt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f040 80b5 	bne.w	8007618 <_dtoa_r+0x6b0>
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	1aeb      	subs	r3, r5, r3
 80074b2:	429e      	cmp	r6, r3
 80074b4:	f77f af7c 	ble.w	80073b0 <_dtoa_r+0x448>
 80074b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074bc:	2200      	movs	r2, #0
 80074be:	4b2f      	ldr	r3, [pc, #188]	; (800757c <_dtoa_r+0x614>)
 80074c0:	f7f9 f822 	bl	8000508 <__aeabi_dmul>
 80074c4:	2200      	movs	r2, #0
 80074c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ce:	4b2b      	ldr	r3, [pc, #172]	; (800757c <_dtoa_r+0x614>)
 80074d0:	f7f9 f81a 	bl	8000508 <__aeabi_dmul>
 80074d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d8:	e7c3      	b.n	8007462 <_dtoa_r+0x4fa>
 80074da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074de:	f7f9 f813 	bl	8000508 <__aeabi_dmul>
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074e8:	199d      	adds	r5, r3, r6
 80074ea:	461e      	mov	r6, r3
 80074ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f0:	f7f9 faba 	bl	8000a68 <__aeabi_d2iz>
 80074f4:	9011      	str	r0, [sp, #68]	; 0x44
 80074f6:	f7f8 ff9d 	bl	8000434 <__aeabi_i2d>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007502:	f7f8 fe49 	bl	8000198 <__aeabi_dsub>
 8007506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800750c:	3330      	adds	r3, #48	; 0x30
 800750e:	f806 3b01 	strb.w	r3, [r6], #1
 8007512:	42ae      	cmp	r6, r5
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	d124      	bne.n	8007564 <_dtoa_r+0x5fc>
 800751a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800751e:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <_dtoa_r+0x620>)
 8007520:	f7f8 fe3c 	bl	800019c <__adddf3>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752c:	f7f9 fa7c 	bl	8000a28 <__aeabi_dcmpgt>
 8007530:	2800      	cmp	r0, #0
 8007532:	d171      	bne.n	8007618 <_dtoa_r+0x6b0>
 8007534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007538:	2000      	movs	r0, #0
 800753a:	4913      	ldr	r1, [pc, #76]	; (8007588 <_dtoa_r+0x620>)
 800753c:	f7f8 fe2c 	bl	8000198 <__aeabi_dsub>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007548:	f7f9 fa50 	bl	80009ec <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f af2f 	beq.w	80073b0 <_dtoa_r+0x448>
 8007552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007556:	1e6a      	subs	r2, r5, #1
 8007558:	2b30      	cmp	r3, #48	; 0x30
 800755a:	d001      	beq.n	8007560 <_dtoa_r+0x5f8>
 800755c:	46ba      	mov	sl, r7
 800755e:	e04a      	b.n	80075f6 <_dtoa_r+0x68e>
 8007560:	4615      	mov	r5, r2
 8007562:	e7f6      	b.n	8007552 <_dtoa_r+0x5ea>
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <_dtoa_r+0x614>)
 8007566:	f7f8 ffcf 	bl	8000508 <__aeabi_dmul>
 800756a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756e:	e7bd      	b.n	80074ec <_dtoa_r+0x584>
 8007570:	08009178 	.word	0x08009178
 8007574:	08009150 	.word	0x08009150
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	40240000 	.word	0x40240000
 8007580:	401c0000 	.word	0x401c0000
 8007584:	40140000 	.word	0x40140000
 8007588:	3fe00000 	.word	0x3fe00000
 800758c:	9d06      	ldr	r5, [sp, #24]
 800758e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f9 f8df 	bl	800075c <__aeabi_ddiv>
 800759e:	f7f9 fa63 	bl	8000a68 <__aeabi_d2iz>
 80075a2:	4681      	mov	r9, r0
 80075a4:	f7f8 ff46 	bl	8000434 <__aeabi_i2d>
 80075a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ac:	f7f8 ffac 	bl	8000508 <__aeabi_dmul>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f8 fdee 	bl	8000198 <__aeabi_dsub>
 80075bc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80075c0:	f805 6b01 	strb.w	r6, [r5], #1
 80075c4:	9e06      	ldr	r6, [sp, #24]
 80075c6:	4602      	mov	r2, r0
 80075c8:	1bae      	subs	r6, r5, r6
 80075ca:	45b0      	cmp	r8, r6
 80075cc:	460b      	mov	r3, r1
 80075ce:	d135      	bne.n	800763c <_dtoa_r+0x6d4>
 80075d0:	f7f8 fde4 	bl	800019c <__adddf3>
 80075d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d8:	4606      	mov	r6, r0
 80075da:	460f      	mov	r7, r1
 80075dc:	f7f9 fa24 	bl	8000a28 <__aeabi_dcmpgt>
 80075e0:	b9c8      	cbnz	r0, 8007616 <_dtoa_r+0x6ae>
 80075e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e6:	4630      	mov	r0, r6
 80075e8:	4639      	mov	r1, r7
 80075ea:	f7f9 f9f5 	bl	80009d8 <__aeabi_dcmpeq>
 80075ee:	b110      	cbz	r0, 80075f6 <_dtoa_r+0x68e>
 80075f0:	f019 0f01 	tst.w	r9, #1
 80075f4:	d10f      	bne.n	8007616 <_dtoa_r+0x6ae>
 80075f6:	4659      	mov	r1, fp
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fdfd 	bl	80081f8 <_Bfree>
 80075fe:	2300      	movs	r3, #0
 8007600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007602:	702b      	strb	r3, [r5, #0]
 8007604:	f10a 0301 	add.w	r3, sl, #1
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800760c:	2b00      	cmp	r3, #0
 800760e:	f43f acf3 	beq.w	8006ff8 <_dtoa_r+0x90>
 8007612:	601d      	str	r5, [r3, #0]
 8007614:	e4f0      	b.n	8006ff8 <_dtoa_r+0x90>
 8007616:	4657      	mov	r7, sl
 8007618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800761c:	1e6b      	subs	r3, r5, #1
 800761e:	2a39      	cmp	r2, #57	; 0x39
 8007620:	d106      	bne.n	8007630 <_dtoa_r+0x6c8>
 8007622:	9a06      	ldr	r2, [sp, #24]
 8007624:	429a      	cmp	r2, r3
 8007626:	d107      	bne.n	8007638 <_dtoa_r+0x6d0>
 8007628:	2330      	movs	r3, #48	; 0x30
 800762a:	7013      	strb	r3, [r2, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	3701      	adds	r7, #1
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	3201      	adds	r2, #1
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e791      	b.n	800755c <_dtoa_r+0x5f4>
 8007638:	461d      	mov	r5, r3
 800763a:	e7ed      	b.n	8007618 <_dtoa_r+0x6b0>
 800763c:	2200      	movs	r2, #0
 800763e:	4b99      	ldr	r3, [pc, #612]	; (80078a4 <_dtoa_r+0x93c>)
 8007640:	f7f8 ff62 	bl	8000508 <__aeabi_dmul>
 8007644:	2200      	movs	r2, #0
 8007646:	2300      	movs	r3, #0
 8007648:	4606      	mov	r6, r0
 800764a:	460f      	mov	r7, r1
 800764c:	f7f9 f9c4 	bl	80009d8 <__aeabi_dcmpeq>
 8007650:	2800      	cmp	r0, #0
 8007652:	d09e      	beq.n	8007592 <_dtoa_r+0x62a>
 8007654:	e7cf      	b.n	80075f6 <_dtoa_r+0x68e>
 8007656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007658:	2a00      	cmp	r2, #0
 800765a:	f000 8088 	beq.w	800776e <_dtoa_r+0x806>
 800765e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007660:	2a01      	cmp	r2, #1
 8007662:	dc6d      	bgt.n	8007740 <_dtoa_r+0x7d8>
 8007664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007666:	2a00      	cmp	r2, #0
 8007668:	d066      	beq.n	8007738 <_dtoa_r+0x7d0>
 800766a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800766e:	464d      	mov	r5, r9
 8007670:	9e08      	ldr	r6, [sp, #32]
 8007672:	9a07      	ldr	r2, [sp, #28]
 8007674:	2101      	movs	r1, #1
 8007676:	441a      	add	r2, r3
 8007678:	4620      	mov	r0, r4
 800767a:	4499      	add	r9, r3
 800767c:	9207      	str	r2, [sp, #28]
 800767e:	f000 fe99 	bl	80083b4 <__i2b>
 8007682:	4607      	mov	r7, r0
 8007684:	2d00      	cmp	r5, #0
 8007686:	dd0b      	ble.n	80076a0 <_dtoa_r+0x738>
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd08      	ble.n	80076a0 <_dtoa_r+0x738>
 800768e:	42ab      	cmp	r3, r5
 8007690:	bfa8      	it	ge
 8007692:	462b      	movge	r3, r5
 8007694:	9a07      	ldr	r2, [sp, #28]
 8007696:	eba9 0903 	sub.w	r9, r9, r3
 800769a:	1aed      	subs	r5, r5, r3
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	9307      	str	r3, [sp, #28]
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	b1eb      	cbz	r3, 80076e0 <_dtoa_r+0x778>
 80076a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d065      	beq.n	8007776 <_dtoa_r+0x80e>
 80076aa:	b18e      	cbz	r6, 80076d0 <_dtoa_r+0x768>
 80076ac:	4639      	mov	r1, r7
 80076ae:	4632      	mov	r2, r6
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 ff1d 	bl	80084f0 <__pow5mult>
 80076b6:	465a      	mov	r2, fp
 80076b8:	4601      	mov	r1, r0
 80076ba:	4607      	mov	r7, r0
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 fe82 	bl	80083c6 <__multiply>
 80076c2:	4659      	mov	r1, fp
 80076c4:	900a      	str	r0, [sp, #40]	; 0x28
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fd96 	bl	80081f8 <_Bfree>
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	469b      	mov	fp, r3
 80076d0:	9b08      	ldr	r3, [sp, #32]
 80076d2:	1b9a      	subs	r2, r3, r6
 80076d4:	d004      	beq.n	80076e0 <_dtoa_r+0x778>
 80076d6:	4659      	mov	r1, fp
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 ff09 	bl	80084f0 <__pow5mult>
 80076de:	4683      	mov	fp, r0
 80076e0:	2101      	movs	r1, #1
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fe66 	bl	80083b4 <__i2b>
 80076e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ea:	4606      	mov	r6, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 81c6 	beq.w	8007a7e <_dtoa_r+0xb16>
 80076f2:	461a      	mov	r2, r3
 80076f4:	4601      	mov	r1, r0
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fefa 	bl	80084f0 <__pow5mult>
 80076fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076fe:	4606      	mov	r6, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	dc3e      	bgt.n	8007782 <_dtoa_r+0x81a>
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d137      	bne.n	800777a <_dtoa_r+0x812>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007710:	2b00      	cmp	r3, #0
 8007712:	d134      	bne.n	800777e <_dtoa_r+0x816>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800771a:	0d1b      	lsrs	r3, r3, #20
 800771c:	051b      	lsls	r3, r3, #20
 800771e:	b12b      	cbz	r3, 800772c <_dtoa_r+0x7c4>
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	f109 0901 	add.w	r9, r9, #1
 8007726:	3301      	adds	r3, #1
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	2301      	movs	r3, #1
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	d128      	bne.n	8007786 <_dtoa_r+0x81e>
 8007734:	2001      	movs	r0, #1
 8007736:	e02e      	b.n	8007796 <_dtoa_r+0x82e>
 8007738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800773a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800773e:	e796      	b.n	800766e <_dtoa_r+0x706>
 8007740:	9b08      	ldr	r3, [sp, #32]
 8007742:	f108 36ff 	add.w	r6, r8, #4294967295
 8007746:	42b3      	cmp	r3, r6
 8007748:	bfb7      	itett	lt
 800774a:	9b08      	ldrlt	r3, [sp, #32]
 800774c:	1b9e      	subge	r6, r3, r6
 800774e:	1af2      	sublt	r2, r6, r3
 8007750:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007752:	bfbf      	itttt	lt
 8007754:	9608      	strlt	r6, [sp, #32]
 8007756:	189b      	addlt	r3, r3, r2
 8007758:	930c      	strlt	r3, [sp, #48]	; 0x30
 800775a:	2600      	movlt	r6, #0
 800775c:	f1b8 0f00 	cmp.w	r8, #0
 8007760:	bfb9      	ittee	lt
 8007762:	eba9 0508 	sublt.w	r5, r9, r8
 8007766:	2300      	movlt	r3, #0
 8007768:	464d      	movge	r5, r9
 800776a:	4643      	movge	r3, r8
 800776c:	e781      	b.n	8007672 <_dtoa_r+0x70a>
 800776e:	9e08      	ldr	r6, [sp, #32]
 8007770:	464d      	mov	r5, r9
 8007772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007774:	e786      	b.n	8007684 <_dtoa_r+0x71c>
 8007776:	9a08      	ldr	r2, [sp, #32]
 8007778:	e7ad      	b.n	80076d6 <_dtoa_r+0x76e>
 800777a:	2300      	movs	r3, #0
 800777c:	e7d6      	b.n	800772c <_dtoa_r+0x7c4>
 800777e:	9b02      	ldr	r3, [sp, #8]
 8007780:	e7d4      	b.n	800772c <_dtoa_r+0x7c4>
 8007782:	2300      	movs	r3, #0
 8007784:	9308      	str	r3, [sp, #32]
 8007786:	6933      	ldr	r3, [r6, #16]
 8007788:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800778c:	6918      	ldr	r0, [r3, #16]
 800778e:	f000 fdc3 	bl	8008318 <__hi0bits>
 8007792:	f1c0 0020 	rsb	r0, r0, #32
 8007796:	9b07      	ldr	r3, [sp, #28]
 8007798:	4418      	add	r0, r3
 800779a:	f010 001f 	ands.w	r0, r0, #31
 800779e:	d047      	beq.n	8007830 <_dtoa_r+0x8c8>
 80077a0:	f1c0 0320 	rsb	r3, r0, #32
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	dd3b      	ble.n	8007820 <_dtoa_r+0x8b8>
 80077a8:	9b07      	ldr	r3, [sp, #28]
 80077aa:	f1c0 001c 	rsb	r0, r0, #28
 80077ae:	4481      	add	r9, r0
 80077b0:	4405      	add	r5, r0
 80077b2:	4403      	add	r3, r0
 80077b4:	9307      	str	r3, [sp, #28]
 80077b6:	f1b9 0f00 	cmp.w	r9, #0
 80077ba:	dd05      	ble.n	80077c8 <_dtoa_r+0x860>
 80077bc:	4659      	mov	r1, fp
 80077be:	464a      	mov	r2, r9
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fee3 	bl	800858c <__lshift>
 80077c6:	4683      	mov	fp, r0
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dd05      	ble.n	80077da <_dtoa_r+0x872>
 80077ce:	4631      	mov	r1, r6
 80077d0:	461a      	mov	r2, r3
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 feda 	bl	800858c <__lshift>
 80077d8:	4606      	mov	r6, r0
 80077da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077dc:	b353      	cbz	r3, 8007834 <_dtoa_r+0x8cc>
 80077de:	4631      	mov	r1, r6
 80077e0:	4658      	mov	r0, fp
 80077e2:	f000 ff27 	bl	8008634 <__mcmp>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	da24      	bge.n	8007834 <_dtoa_r+0x8cc>
 80077ea:	2300      	movs	r3, #0
 80077ec:	4659      	mov	r1, fp
 80077ee:	220a      	movs	r2, #10
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fd18 	bl	8008226 <__multadd>
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077fc:	4683      	mov	fp, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8144 	beq.w	8007a8c <_dtoa_r+0xb24>
 8007804:	2300      	movs	r3, #0
 8007806:	4639      	mov	r1, r7
 8007808:	220a      	movs	r2, #10
 800780a:	4620      	mov	r0, r4
 800780c:	f000 fd0b 	bl	8008226 <__multadd>
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	4607      	mov	r7, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	dc4d      	bgt.n	80078b4 <_dtoa_r+0x94c>
 8007818:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800781a:	2b02      	cmp	r3, #2
 800781c:	dd4a      	ble.n	80078b4 <_dtoa_r+0x94c>
 800781e:	e011      	b.n	8007844 <_dtoa_r+0x8dc>
 8007820:	d0c9      	beq.n	80077b6 <_dtoa_r+0x84e>
 8007822:	9a07      	ldr	r2, [sp, #28]
 8007824:	331c      	adds	r3, #28
 8007826:	441a      	add	r2, r3
 8007828:	4499      	add	r9, r3
 800782a:	441d      	add	r5, r3
 800782c:	4613      	mov	r3, r2
 800782e:	e7c1      	b.n	80077b4 <_dtoa_r+0x84c>
 8007830:	4603      	mov	r3, r0
 8007832:	e7f6      	b.n	8007822 <_dtoa_r+0x8ba>
 8007834:	f1b8 0f00 	cmp.w	r8, #0
 8007838:	dc36      	bgt.n	80078a8 <_dtoa_r+0x940>
 800783a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800783c:	2b02      	cmp	r3, #2
 800783e:	dd33      	ble.n	80078a8 <_dtoa_r+0x940>
 8007840:	f8cd 8010 	str.w	r8, [sp, #16]
 8007844:	9b04      	ldr	r3, [sp, #16]
 8007846:	b963      	cbnz	r3, 8007862 <_dtoa_r+0x8fa>
 8007848:	4631      	mov	r1, r6
 800784a:	2205      	movs	r2, #5
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fcea 	bl	8008226 <__multadd>
 8007852:	4601      	mov	r1, r0
 8007854:	4606      	mov	r6, r0
 8007856:	4658      	mov	r0, fp
 8007858:	f000 feec 	bl	8008634 <__mcmp>
 800785c:	2800      	cmp	r0, #0
 800785e:	f73f add3 	bgt.w	8007408 <_dtoa_r+0x4a0>
 8007862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007864:	9d06      	ldr	r5, [sp, #24]
 8007866:	ea6f 0a03 	mvn.w	sl, r3
 800786a:	f04f 0900 	mov.w	r9, #0
 800786e:	4631      	mov	r1, r6
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fcc1 	bl	80081f8 <_Bfree>
 8007876:	2f00      	cmp	r7, #0
 8007878:	f43f aebd 	beq.w	80075f6 <_dtoa_r+0x68e>
 800787c:	f1b9 0f00 	cmp.w	r9, #0
 8007880:	d005      	beq.n	800788e <_dtoa_r+0x926>
 8007882:	45b9      	cmp	r9, r7
 8007884:	d003      	beq.n	800788e <_dtoa_r+0x926>
 8007886:	4649      	mov	r1, r9
 8007888:	4620      	mov	r0, r4
 800788a:	f000 fcb5 	bl	80081f8 <_Bfree>
 800788e:	4639      	mov	r1, r7
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fcb1 	bl	80081f8 <_Bfree>
 8007896:	e6ae      	b.n	80075f6 <_dtoa_r+0x68e>
 8007898:	2600      	movs	r6, #0
 800789a:	4637      	mov	r7, r6
 800789c:	e7e1      	b.n	8007862 <_dtoa_r+0x8fa>
 800789e:	46ba      	mov	sl, r7
 80078a0:	4637      	mov	r7, r6
 80078a2:	e5b1      	b.n	8007408 <_dtoa_r+0x4a0>
 80078a4:	40240000 	.word	0x40240000
 80078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80f3 	beq.w	8007a9a <_dtoa_r+0xb32>
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	dd05      	ble.n	80078c4 <_dtoa_r+0x95c>
 80078b8:	4639      	mov	r1, r7
 80078ba:	462a      	mov	r2, r5
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 fe65 	bl	800858c <__lshift>
 80078c2:	4607      	mov	r7, r0
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d04c      	beq.n	8007964 <_dtoa_r+0x9fc>
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fc5f 	bl	8008190 <_Balloc>
 80078d2:	4605      	mov	r5, r0
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	f107 010c 	add.w	r1, r7, #12
 80078da:	3202      	adds	r2, #2
 80078dc:	0092      	lsls	r2, r2, #2
 80078de:	300c      	adds	r0, #12
 80078e0:	f7fd ff46 	bl	8005770 <memcpy>
 80078e4:	2201      	movs	r2, #1
 80078e6:	4629      	mov	r1, r5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fe4f 	bl	800858c <__lshift>
 80078ee:	46b9      	mov	r9, r7
 80078f0:	4607      	mov	r7, r0
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	9307      	str	r3, [sp, #28]
 80078f6:	9b02      	ldr	r3, [sp, #8]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	9308      	str	r3, [sp, #32]
 80078fe:	4631      	mov	r1, r6
 8007900:	4658      	mov	r0, fp
 8007902:	f7ff faa3 	bl	8006e4c <quorem>
 8007906:	4649      	mov	r1, r9
 8007908:	4605      	mov	r5, r0
 800790a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800790e:	4658      	mov	r0, fp
 8007910:	f000 fe90 	bl	8008634 <__mcmp>
 8007914:	463a      	mov	r2, r7
 8007916:	9002      	str	r0, [sp, #8]
 8007918:	4631      	mov	r1, r6
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fea4 	bl	8008668 <__mdiff>
 8007920:	68c3      	ldr	r3, [r0, #12]
 8007922:	4602      	mov	r2, r0
 8007924:	bb03      	cbnz	r3, 8007968 <_dtoa_r+0xa00>
 8007926:	4601      	mov	r1, r0
 8007928:	9009      	str	r0, [sp, #36]	; 0x24
 800792a:	4658      	mov	r0, fp
 800792c:	f000 fe82 	bl	8008634 <__mcmp>
 8007930:	4603      	mov	r3, r0
 8007932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007934:	4611      	mov	r1, r2
 8007936:	4620      	mov	r0, r4
 8007938:	9309      	str	r3, [sp, #36]	; 0x24
 800793a:	f000 fc5d 	bl	80081f8 <_Bfree>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	b9a3      	cbnz	r3, 800796c <_dtoa_r+0xa04>
 8007942:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007944:	b992      	cbnz	r2, 800796c <_dtoa_r+0xa04>
 8007946:	9a08      	ldr	r2, [sp, #32]
 8007948:	b982      	cbnz	r2, 800796c <_dtoa_r+0xa04>
 800794a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800794e:	d029      	beq.n	80079a4 <_dtoa_r+0xa3c>
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dd01      	ble.n	800795a <_dtoa_r+0x9f2>
 8007956:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800795a:	9b07      	ldr	r3, [sp, #28]
 800795c:	1c5d      	adds	r5, r3, #1
 800795e:	f883 8000 	strb.w	r8, [r3]
 8007962:	e784      	b.n	800786e <_dtoa_r+0x906>
 8007964:	4638      	mov	r0, r7
 8007966:	e7c2      	b.n	80078ee <_dtoa_r+0x986>
 8007968:	2301      	movs	r3, #1
 800796a:	e7e3      	b.n	8007934 <_dtoa_r+0x9cc>
 800796c:	9a02      	ldr	r2, [sp, #8]
 800796e:	2a00      	cmp	r2, #0
 8007970:	db04      	blt.n	800797c <_dtoa_r+0xa14>
 8007972:	d123      	bne.n	80079bc <_dtoa_r+0xa54>
 8007974:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007976:	bb0a      	cbnz	r2, 80079bc <_dtoa_r+0xa54>
 8007978:	9a08      	ldr	r2, [sp, #32]
 800797a:	b9fa      	cbnz	r2, 80079bc <_dtoa_r+0xa54>
 800797c:	2b00      	cmp	r3, #0
 800797e:	ddec      	ble.n	800795a <_dtoa_r+0x9f2>
 8007980:	4659      	mov	r1, fp
 8007982:	2201      	movs	r2, #1
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fe01 	bl	800858c <__lshift>
 800798a:	4631      	mov	r1, r6
 800798c:	4683      	mov	fp, r0
 800798e:	f000 fe51 	bl	8008634 <__mcmp>
 8007992:	2800      	cmp	r0, #0
 8007994:	dc03      	bgt.n	800799e <_dtoa_r+0xa36>
 8007996:	d1e0      	bne.n	800795a <_dtoa_r+0x9f2>
 8007998:	f018 0f01 	tst.w	r8, #1
 800799c:	d0dd      	beq.n	800795a <_dtoa_r+0x9f2>
 800799e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079a2:	d1d8      	bne.n	8007956 <_dtoa_r+0x9ee>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	9a07      	ldr	r2, [sp, #28]
 80079a8:	1c5d      	adds	r5, r3, #1
 80079aa:	2339      	movs	r3, #57	; 0x39
 80079ac:	7013      	strb	r3, [r2, #0]
 80079ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079b2:	1e6a      	subs	r2, r5, #1
 80079b4:	2b39      	cmp	r3, #57	; 0x39
 80079b6:	d04d      	beq.n	8007a54 <_dtoa_r+0xaec>
 80079b8:	3301      	adds	r3, #1
 80079ba:	e052      	b.n	8007a62 <_dtoa_r+0xafa>
 80079bc:	9a07      	ldr	r2, [sp, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f102 0501 	add.w	r5, r2, #1
 80079c4:	dd06      	ble.n	80079d4 <_dtoa_r+0xa6c>
 80079c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079ca:	d0eb      	beq.n	80079a4 <_dtoa_r+0xa3c>
 80079cc:	f108 0801 	add.w	r8, r8, #1
 80079d0:	9b07      	ldr	r3, [sp, #28]
 80079d2:	e7c4      	b.n	800795e <_dtoa_r+0x9f6>
 80079d4:	9b06      	ldr	r3, [sp, #24]
 80079d6:	9a04      	ldr	r2, [sp, #16]
 80079d8:	1aeb      	subs	r3, r5, r3
 80079da:	4293      	cmp	r3, r2
 80079dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80079e0:	d021      	beq.n	8007a26 <_dtoa_r+0xabe>
 80079e2:	4659      	mov	r1, fp
 80079e4:	2300      	movs	r3, #0
 80079e6:	220a      	movs	r2, #10
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fc1c 	bl	8008226 <__multadd>
 80079ee:	45b9      	cmp	r9, r7
 80079f0:	4683      	mov	fp, r0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	f04f 020a 	mov.w	r2, #10
 80079fa:	4649      	mov	r1, r9
 80079fc:	4620      	mov	r0, r4
 80079fe:	d105      	bne.n	8007a0c <_dtoa_r+0xaa4>
 8007a00:	f000 fc11 	bl	8008226 <__multadd>
 8007a04:	4681      	mov	r9, r0
 8007a06:	4607      	mov	r7, r0
 8007a08:	9507      	str	r5, [sp, #28]
 8007a0a:	e778      	b.n	80078fe <_dtoa_r+0x996>
 8007a0c:	f000 fc0b 	bl	8008226 <__multadd>
 8007a10:	4639      	mov	r1, r7
 8007a12:	4681      	mov	r9, r0
 8007a14:	2300      	movs	r3, #0
 8007a16:	220a      	movs	r2, #10
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fc04 	bl	8008226 <__multadd>
 8007a1e:	4607      	mov	r7, r0
 8007a20:	e7f2      	b.n	8007a08 <_dtoa_r+0xaa0>
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	4659      	mov	r1, fp
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 fdae 	bl	800858c <__lshift>
 8007a30:	4631      	mov	r1, r6
 8007a32:	4683      	mov	fp, r0
 8007a34:	f000 fdfe 	bl	8008634 <__mcmp>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	dcb8      	bgt.n	80079ae <_dtoa_r+0xa46>
 8007a3c:	d102      	bne.n	8007a44 <_dtoa_r+0xadc>
 8007a3e:	f018 0f01 	tst.w	r8, #1
 8007a42:	d1b4      	bne.n	80079ae <_dtoa_r+0xa46>
 8007a44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a48:	1e6a      	subs	r2, r5, #1
 8007a4a:	2b30      	cmp	r3, #48	; 0x30
 8007a4c:	f47f af0f 	bne.w	800786e <_dtoa_r+0x906>
 8007a50:	4615      	mov	r5, r2
 8007a52:	e7f7      	b.n	8007a44 <_dtoa_r+0xadc>
 8007a54:	9b06      	ldr	r3, [sp, #24]
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d105      	bne.n	8007a66 <_dtoa_r+0xafe>
 8007a5a:	2331      	movs	r3, #49	; 0x31
 8007a5c:	9a06      	ldr	r2, [sp, #24]
 8007a5e:	f10a 0a01 	add.w	sl, sl, #1
 8007a62:	7013      	strb	r3, [r2, #0]
 8007a64:	e703      	b.n	800786e <_dtoa_r+0x906>
 8007a66:	4615      	mov	r5, r2
 8007a68:	e7a1      	b.n	80079ae <_dtoa_r+0xa46>
 8007a6a:	4b17      	ldr	r3, [pc, #92]	; (8007ac8 <_dtoa_r+0xb60>)
 8007a6c:	f7ff bae1 	b.w	8007032 <_dtoa_r+0xca>
 8007a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f47f aabb 	bne.w	8006fee <_dtoa_r+0x86>
 8007a78:	4b14      	ldr	r3, [pc, #80]	; (8007acc <_dtoa_r+0xb64>)
 8007a7a:	f7ff bada 	b.w	8007032 <_dtoa_r+0xca>
 8007a7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	f77f ae3f 	ble.w	8007704 <_dtoa_r+0x79c>
 8007a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a88:	9308      	str	r3, [sp, #32]
 8007a8a:	e653      	b.n	8007734 <_dtoa_r+0x7cc>
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dc03      	bgt.n	8007a9a <_dtoa_r+0xb32>
 8007a92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	f73f aed5 	bgt.w	8007844 <_dtoa_r+0x8dc>
 8007a9a:	9d06      	ldr	r5, [sp, #24]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4658      	mov	r0, fp
 8007aa0:	f7ff f9d4 	bl	8006e4c <quorem>
 8007aa4:	9b06      	ldr	r3, [sp, #24]
 8007aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007aaa:	f805 8b01 	strb.w	r8, [r5], #1
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	1aeb      	subs	r3, r5, r3
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	ddb5      	ble.n	8007a22 <_dtoa_r+0xaba>
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	2300      	movs	r3, #0
 8007aba:	220a      	movs	r2, #10
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fbb2 	bl	8008226 <__multadd>
 8007ac2:	4683      	mov	fp, r0
 8007ac4:	e7ea      	b.n	8007a9c <_dtoa_r+0xb34>
 8007ac6:	bf00      	nop
 8007ac8:	080090c4 	.word	0x080090c4
 8007acc:	08009138 	.word	0x08009138

08007ad0 <rshift>:
 8007ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad2:	6906      	ldr	r6, [r0, #16]
 8007ad4:	114b      	asrs	r3, r1, #5
 8007ad6:	429e      	cmp	r6, r3
 8007ad8:	f100 0414 	add.w	r4, r0, #20
 8007adc:	dd31      	ble.n	8007b42 <rshift+0x72>
 8007ade:	f011 011f 	ands.w	r1, r1, #31
 8007ae2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007ae6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007aea:	d108      	bne.n	8007afe <rshift+0x2e>
 8007aec:	4621      	mov	r1, r4
 8007aee:	42b2      	cmp	r2, r6
 8007af0:	460b      	mov	r3, r1
 8007af2:	d211      	bcs.n	8007b18 <rshift+0x48>
 8007af4:	f852 3b04 	ldr.w	r3, [r2], #4
 8007af8:	f841 3b04 	str.w	r3, [r1], #4
 8007afc:	e7f7      	b.n	8007aee <rshift+0x1e>
 8007afe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007b02:	4623      	mov	r3, r4
 8007b04:	f1c1 0c20 	rsb	ip, r1, #32
 8007b08:	40cd      	lsrs	r5, r1
 8007b0a:	3204      	adds	r2, #4
 8007b0c:	42b2      	cmp	r2, r6
 8007b0e:	4617      	mov	r7, r2
 8007b10:	d30d      	bcc.n	8007b2e <rshift+0x5e>
 8007b12:	601d      	str	r5, [r3, #0]
 8007b14:	b105      	cbz	r5, 8007b18 <rshift+0x48>
 8007b16:	3304      	adds	r3, #4
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	eba3 0204 	sub.w	r2, r3, r4
 8007b1e:	bf08      	it	eq
 8007b20:	2300      	moveq	r3, #0
 8007b22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b26:	6102      	str	r2, [r0, #16]
 8007b28:	bf08      	it	eq
 8007b2a:	6143      	streq	r3, [r0, #20]
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2e:	683f      	ldr	r7, [r7, #0]
 8007b30:	fa07 f70c 	lsl.w	r7, r7, ip
 8007b34:	433d      	orrs	r5, r7
 8007b36:	f843 5b04 	str.w	r5, [r3], #4
 8007b3a:	f852 5b04 	ldr.w	r5, [r2], #4
 8007b3e:	40cd      	lsrs	r5, r1
 8007b40:	e7e4      	b.n	8007b0c <rshift+0x3c>
 8007b42:	4623      	mov	r3, r4
 8007b44:	e7e8      	b.n	8007b18 <rshift+0x48>

08007b46 <__hexdig_fun>:
 8007b46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b4a:	2b09      	cmp	r3, #9
 8007b4c:	d802      	bhi.n	8007b54 <__hexdig_fun+0xe>
 8007b4e:	3820      	subs	r0, #32
 8007b50:	b2c0      	uxtb	r0, r0
 8007b52:	4770      	bx	lr
 8007b54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d801      	bhi.n	8007b60 <__hexdig_fun+0x1a>
 8007b5c:	3847      	subs	r0, #71	; 0x47
 8007b5e:	e7f7      	b.n	8007b50 <__hexdig_fun+0xa>
 8007b60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b64:	2b05      	cmp	r3, #5
 8007b66:	d801      	bhi.n	8007b6c <__hexdig_fun+0x26>
 8007b68:	3827      	subs	r0, #39	; 0x27
 8007b6a:	e7f1      	b.n	8007b50 <__hexdig_fun+0xa>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4770      	bx	lr

08007b70 <__gethex>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	b08b      	sub	sp, #44	; 0x2c
 8007b76:	9002      	str	r0, [sp, #8]
 8007b78:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007b7a:	468a      	mov	sl, r1
 8007b7c:	4690      	mov	r8, r2
 8007b7e:	9306      	str	r3, [sp, #24]
 8007b80:	f000 face 	bl	8008120 <__localeconv_l>
 8007b84:	6803      	ldr	r3, [r0, #0]
 8007b86:	f04f 0b00 	mov.w	fp, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	f7f8 faf7 	bl	8000180 <strlen>
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	9001      	str	r0, [sp, #4]
 8007b96:	4403      	add	r3, r0
 8007b98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007b9c:	9307      	str	r3, [sp, #28]
 8007b9e:	f8da 3000 	ldr.w	r3, [sl]
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	461f      	mov	r7, r3
 8007ba6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007baa:	2830      	cmp	r0, #48	; 0x30
 8007bac:	d06c      	beq.n	8007c88 <__gethex+0x118>
 8007bae:	f7ff ffca 	bl	8007b46 <__hexdig_fun>
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d16a      	bne.n	8007c8e <__gethex+0x11e>
 8007bb8:	9a01      	ldr	r2, [sp, #4]
 8007bba:	9903      	ldr	r1, [sp, #12]
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7fe fa70 	bl	80060a2 <strncmp>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d166      	bne.n	8007c94 <__gethex+0x124>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	5cf8      	ldrb	r0, [r7, r3]
 8007bca:	18fe      	adds	r6, r7, r3
 8007bcc:	f7ff ffbb 	bl	8007b46 <__hexdig_fun>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d062      	beq.n	8007c9a <__gethex+0x12a>
 8007bd4:	4633      	mov	r3, r6
 8007bd6:	7818      	ldrb	r0, [r3, #0]
 8007bd8:	461f      	mov	r7, r3
 8007bda:	2830      	cmp	r0, #48	; 0x30
 8007bdc:	f103 0301 	add.w	r3, r3, #1
 8007be0:	d0f9      	beq.n	8007bd6 <__gethex+0x66>
 8007be2:	f7ff ffb0 	bl	8007b46 <__hexdig_fun>
 8007be6:	fab0 f580 	clz	r5, r0
 8007bea:	4634      	mov	r4, r6
 8007bec:	f04f 0b01 	mov.w	fp, #1
 8007bf0:	096d      	lsrs	r5, r5, #5
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	4616      	mov	r6, r2
 8007bf6:	7830      	ldrb	r0, [r6, #0]
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	f7ff ffa4 	bl	8007b46 <__hexdig_fun>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d1f8      	bne.n	8007bf4 <__gethex+0x84>
 8007c02:	9a01      	ldr	r2, [sp, #4]
 8007c04:	9903      	ldr	r1, [sp, #12]
 8007c06:	4630      	mov	r0, r6
 8007c08:	f7fe fa4b 	bl	80060a2 <strncmp>
 8007c0c:	b950      	cbnz	r0, 8007c24 <__gethex+0xb4>
 8007c0e:	b954      	cbnz	r4, 8007c26 <__gethex+0xb6>
 8007c10:	9b01      	ldr	r3, [sp, #4]
 8007c12:	18f4      	adds	r4, r6, r3
 8007c14:	4622      	mov	r2, r4
 8007c16:	4616      	mov	r6, r2
 8007c18:	7830      	ldrb	r0, [r6, #0]
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	f7ff ff93 	bl	8007b46 <__hexdig_fun>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d1f8      	bne.n	8007c16 <__gethex+0xa6>
 8007c24:	b10c      	cbz	r4, 8007c2a <__gethex+0xba>
 8007c26:	1ba4      	subs	r4, r4, r6
 8007c28:	00a4      	lsls	r4, r4, #2
 8007c2a:	7833      	ldrb	r3, [r6, #0]
 8007c2c:	2b50      	cmp	r3, #80	; 0x50
 8007c2e:	d001      	beq.n	8007c34 <__gethex+0xc4>
 8007c30:	2b70      	cmp	r3, #112	; 0x70
 8007c32:	d140      	bne.n	8007cb6 <__gethex+0x146>
 8007c34:	7873      	ldrb	r3, [r6, #1]
 8007c36:	2b2b      	cmp	r3, #43	; 0x2b
 8007c38:	d031      	beq.n	8007c9e <__gethex+0x12e>
 8007c3a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c3c:	d033      	beq.n	8007ca6 <__gethex+0x136>
 8007c3e:	f04f 0900 	mov.w	r9, #0
 8007c42:	1c71      	adds	r1, r6, #1
 8007c44:	7808      	ldrb	r0, [r1, #0]
 8007c46:	f7ff ff7e 	bl	8007b46 <__hexdig_fun>
 8007c4a:	1e43      	subs	r3, r0, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b18      	cmp	r3, #24
 8007c50:	d831      	bhi.n	8007cb6 <__gethex+0x146>
 8007c52:	f1a0 0210 	sub.w	r2, r0, #16
 8007c56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c5a:	f7ff ff74 	bl	8007b46 <__hexdig_fun>
 8007c5e:	1e43      	subs	r3, r0, #1
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b18      	cmp	r3, #24
 8007c64:	d922      	bls.n	8007cac <__gethex+0x13c>
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	d000      	beq.n	8007c6e <__gethex+0xfe>
 8007c6c:	4252      	negs	r2, r2
 8007c6e:	4414      	add	r4, r2
 8007c70:	f8ca 1000 	str.w	r1, [sl]
 8007c74:	b30d      	cbz	r5, 8007cba <__gethex+0x14a>
 8007c76:	f1bb 0f00 	cmp.w	fp, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2706      	moveq	r7, #6
 8007c7e:	2700      	movne	r7, #0
 8007c80:	4638      	mov	r0, r7
 8007c82:	b00b      	add	sp, #44	; 0x2c
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	f10b 0b01 	add.w	fp, fp, #1
 8007c8c:	e78a      	b.n	8007ba4 <__gethex+0x34>
 8007c8e:	2500      	movs	r5, #0
 8007c90:	462c      	mov	r4, r5
 8007c92:	e7ae      	b.n	8007bf2 <__gethex+0x82>
 8007c94:	463e      	mov	r6, r7
 8007c96:	2501      	movs	r5, #1
 8007c98:	e7c7      	b.n	8007c2a <__gethex+0xba>
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	e7fb      	b.n	8007c96 <__gethex+0x126>
 8007c9e:	f04f 0900 	mov.w	r9, #0
 8007ca2:	1cb1      	adds	r1, r6, #2
 8007ca4:	e7ce      	b.n	8007c44 <__gethex+0xd4>
 8007ca6:	f04f 0901 	mov.w	r9, #1
 8007caa:	e7fa      	b.n	8007ca2 <__gethex+0x132>
 8007cac:	230a      	movs	r3, #10
 8007cae:	fb03 0202 	mla	r2, r3, r2, r0
 8007cb2:	3a10      	subs	r2, #16
 8007cb4:	e7cf      	b.n	8007c56 <__gethex+0xe6>
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	e7da      	b.n	8007c70 <__gethex+0x100>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	1bf3      	subs	r3, r6, r7
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	2b07      	cmp	r3, #7
 8007cc2:	dc49      	bgt.n	8007d58 <__gethex+0x1e8>
 8007cc4:	9802      	ldr	r0, [sp, #8]
 8007cc6:	f000 fa63 	bl	8008190 <_Balloc>
 8007cca:	f04f 0b00 	mov.w	fp, #0
 8007cce:	4605      	mov	r5, r0
 8007cd0:	46da      	mov	sl, fp
 8007cd2:	9b01      	ldr	r3, [sp, #4]
 8007cd4:	f100 0914 	add.w	r9, r0, #20
 8007cd8:	f1c3 0301 	rsb	r3, r3, #1
 8007cdc:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ce0:	9308      	str	r3, [sp, #32]
 8007ce2:	42b7      	cmp	r7, r6
 8007ce4:	d33b      	bcc.n	8007d5e <__gethex+0x1ee>
 8007ce6:	9804      	ldr	r0, [sp, #16]
 8007ce8:	f840 ab04 	str.w	sl, [r0], #4
 8007cec:	eba0 0009 	sub.w	r0, r0, r9
 8007cf0:	1080      	asrs	r0, r0, #2
 8007cf2:	6128      	str	r0, [r5, #16]
 8007cf4:	0147      	lsls	r7, r0, #5
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	f000 fb0e 	bl	8008318 <__hi0bits>
 8007cfc:	f8d8 6000 	ldr.w	r6, [r8]
 8007d00:	1a3f      	subs	r7, r7, r0
 8007d02:	42b7      	cmp	r7, r6
 8007d04:	dd64      	ble.n	8007dd0 <__gethex+0x260>
 8007d06:	1bbf      	subs	r7, r7, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 fe17 	bl	800893e <__any_on>
 8007d10:	4682      	mov	sl, r0
 8007d12:	b178      	cbz	r0, 8007d34 <__gethex+0x1c4>
 8007d14:	f04f 0a01 	mov.w	sl, #1
 8007d18:	1e7b      	subs	r3, r7, #1
 8007d1a:	1159      	asrs	r1, r3, #5
 8007d1c:	f003 021f 	and.w	r2, r3, #31
 8007d20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007d24:	fa0a f202 	lsl.w	r2, sl, r2
 8007d28:	420a      	tst	r2, r1
 8007d2a:	d003      	beq.n	8007d34 <__gethex+0x1c4>
 8007d2c:	4553      	cmp	r3, sl
 8007d2e:	dc46      	bgt.n	8007dbe <__gethex+0x24e>
 8007d30:	f04f 0a02 	mov.w	sl, #2
 8007d34:	4639      	mov	r1, r7
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7ff feca 	bl	8007ad0 <rshift>
 8007d3c:	443c      	add	r4, r7
 8007d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	da52      	bge.n	8007dec <__gethex+0x27c>
 8007d46:	4629      	mov	r1, r5
 8007d48:	9802      	ldr	r0, [sp, #8]
 8007d4a:	f000 fa55 	bl	80081f8 <_Bfree>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d52:	27a3      	movs	r7, #163	; 0xa3
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e793      	b.n	8007c80 <__gethex+0x110>
 8007d58:	3101      	adds	r1, #1
 8007d5a:	105b      	asrs	r3, r3, #1
 8007d5c:	e7b0      	b.n	8007cc0 <__gethex+0x150>
 8007d5e:	1e73      	subs	r3, r6, #1
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	9a07      	ldr	r2, [sp, #28]
 8007d64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <__gethex+0x22e>
 8007d6c:	f1bb 0f20 	cmp.w	fp, #32
 8007d70:	d107      	bne.n	8007d82 <__gethex+0x212>
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	f8c3 a000 	str.w	sl, [r3]
 8007d78:	f04f 0a00 	mov.w	sl, #0
 8007d7c:	46d3      	mov	fp, sl
 8007d7e:	3304      	adds	r3, #4
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007d86:	f7ff fede 	bl	8007b46 <__hexdig_fun>
 8007d8a:	f000 000f 	and.w	r0, r0, #15
 8007d8e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007d92:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d96:	f10b 0b04 	add.w	fp, fp, #4
 8007d9a:	9b05      	ldr	r3, [sp, #20]
 8007d9c:	e00d      	b.n	8007dba <__gethex+0x24a>
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	4413      	add	r3, r2
 8007da4:	42bb      	cmp	r3, r7
 8007da6:	d3e1      	bcc.n	8007d6c <__gethex+0x1fc>
 8007da8:	4618      	mov	r0, r3
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	9903      	ldr	r1, [sp, #12]
 8007dae:	9309      	str	r3, [sp, #36]	; 0x24
 8007db0:	f7fe f977 	bl	80060a2 <strncmp>
 8007db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d1d8      	bne.n	8007d6c <__gethex+0x1fc>
 8007dba:	461e      	mov	r6, r3
 8007dbc:	e791      	b.n	8007ce2 <__gethex+0x172>
 8007dbe:	1eb9      	subs	r1, r7, #2
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 fdbc 	bl	800893e <__any_on>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d0b2      	beq.n	8007d30 <__gethex+0x1c0>
 8007dca:	f04f 0a03 	mov.w	sl, #3
 8007dce:	e7b1      	b.n	8007d34 <__gethex+0x1c4>
 8007dd0:	da09      	bge.n	8007de6 <__gethex+0x276>
 8007dd2:	1bf7      	subs	r7, r6, r7
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	463a      	mov	r2, r7
 8007dd8:	9802      	ldr	r0, [sp, #8]
 8007dda:	f000 fbd7 	bl	800858c <__lshift>
 8007dde:	4605      	mov	r5, r0
 8007de0:	1be4      	subs	r4, r4, r7
 8007de2:	f100 0914 	add.w	r9, r0, #20
 8007de6:	f04f 0a00 	mov.w	sl, #0
 8007dea:	e7a8      	b.n	8007d3e <__gethex+0x1ce>
 8007dec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	dd6b      	ble.n	8007ecc <__gethex+0x35c>
 8007df4:	1b04      	subs	r4, r0, r4
 8007df6:	42a6      	cmp	r6, r4
 8007df8:	dc2e      	bgt.n	8007e58 <__gethex+0x2e8>
 8007dfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d022      	beq.n	8007e48 <__gethex+0x2d8>
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d024      	beq.n	8007e50 <__gethex+0x2e0>
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d115      	bne.n	8007e36 <__gethex+0x2c6>
 8007e0a:	42a6      	cmp	r6, r4
 8007e0c:	d113      	bne.n	8007e36 <__gethex+0x2c6>
 8007e0e:	2e01      	cmp	r6, #1
 8007e10:	dc0b      	bgt.n	8007e2a <__gethex+0x2ba>
 8007e12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e16:	9a06      	ldr	r2, [sp, #24]
 8007e18:	2762      	movs	r7, #98	; 0x62
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	612b      	str	r3, [r5, #16]
 8007e20:	f8c9 3000 	str.w	r3, [r9]
 8007e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e26:	601d      	str	r5, [r3, #0]
 8007e28:	e72a      	b.n	8007c80 <__gethex+0x110>
 8007e2a:	1e71      	subs	r1, r6, #1
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 fd86 	bl	800893e <__any_on>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d1ed      	bne.n	8007e12 <__gethex+0x2a2>
 8007e36:	4629      	mov	r1, r5
 8007e38:	9802      	ldr	r0, [sp, #8]
 8007e3a:	f000 f9dd 	bl	80081f8 <_Bfree>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e42:	2750      	movs	r7, #80	; 0x50
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	e71b      	b.n	8007c80 <__gethex+0x110>
 8007e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0e1      	beq.n	8007e12 <__gethex+0x2a2>
 8007e4e:	e7f2      	b.n	8007e36 <__gethex+0x2c6>
 8007e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1dd      	bne.n	8007e12 <__gethex+0x2a2>
 8007e56:	e7ee      	b.n	8007e36 <__gethex+0x2c6>
 8007e58:	1e67      	subs	r7, r4, #1
 8007e5a:	f1ba 0f00 	cmp.w	sl, #0
 8007e5e:	d132      	bne.n	8007ec6 <__gethex+0x356>
 8007e60:	b127      	cbz	r7, 8007e6c <__gethex+0x2fc>
 8007e62:	4639      	mov	r1, r7
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 fd6a 	bl	800893e <__any_on>
 8007e6a:	4682      	mov	sl, r0
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	117a      	asrs	r2, r7, #5
 8007e70:	f007 071f 	and.w	r7, r7, #31
 8007e74:	fa03 f707 	lsl.w	r7, r3, r7
 8007e78:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	421f      	tst	r7, r3
 8007e80:	f04f 0702 	mov.w	r7, #2
 8007e84:	4628      	mov	r0, r5
 8007e86:	bf18      	it	ne
 8007e88:	f04a 0a02 	orrne.w	sl, sl, #2
 8007e8c:	1b36      	subs	r6, r6, r4
 8007e8e:	f7ff fe1f 	bl	8007ad0 <rshift>
 8007e92:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007e96:	f1ba 0f00 	cmp.w	sl, #0
 8007e9a:	d048      	beq.n	8007f2e <__gethex+0x3be>
 8007e9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d015      	beq.n	8007ed0 <__gethex+0x360>
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d017      	beq.n	8007ed8 <__gethex+0x368>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d109      	bne.n	8007ec0 <__gethex+0x350>
 8007eac:	f01a 0f02 	tst.w	sl, #2
 8007eb0:	d006      	beq.n	8007ec0 <__gethex+0x350>
 8007eb2:	f8d9 3000 	ldr.w	r3, [r9]
 8007eb6:	ea4a 0a03 	orr.w	sl, sl, r3
 8007eba:	f01a 0f01 	tst.w	sl, #1
 8007ebe:	d10e      	bne.n	8007ede <__gethex+0x36e>
 8007ec0:	f047 0710 	orr.w	r7, r7, #16
 8007ec4:	e033      	b.n	8007f2e <__gethex+0x3be>
 8007ec6:	f04f 0a01 	mov.w	sl, #1
 8007eca:	e7cf      	b.n	8007e6c <__gethex+0x2fc>
 8007ecc:	2701      	movs	r7, #1
 8007ece:	e7e2      	b.n	8007e96 <__gethex+0x326>
 8007ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ed2:	f1c3 0301 	rsb	r3, r3, #1
 8007ed6:	9315      	str	r3, [sp, #84]	; 0x54
 8007ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <__gethex+0x350>
 8007ede:	f04f 0c00 	mov.w	ip, #0
 8007ee2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007ee6:	f105 0314 	add.w	r3, r5, #20
 8007eea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007eee:	eb03 010a 	add.w	r1, r3, sl
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007efc:	d01c      	beq.n	8007f38 <__gethex+0x3c8>
 8007efe:	3201      	adds	r2, #1
 8007f00:	6002      	str	r2, [r0, #0]
 8007f02:	2f02      	cmp	r7, #2
 8007f04:	f105 0314 	add.w	r3, r5, #20
 8007f08:	d138      	bne.n	8007f7c <__gethex+0x40c>
 8007f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8007f0e:	3a01      	subs	r2, #1
 8007f10:	42b2      	cmp	r2, r6
 8007f12:	d10a      	bne.n	8007f2a <__gethex+0x3ba>
 8007f14:	2201      	movs	r2, #1
 8007f16:	1171      	asrs	r1, r6, #5
 8007f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f1c:	f006 061f 	and.w	r6, r6, #31
 8007f20:	fa02 f606 	lsl.w	r6, r2, r6
 8007f24:	421e      	tst	r6, r3
 8007f26:	bf18      	it	ne
 8007f28:	4617      	movne	r7, r2
 8007f2a:	f047 0720 	orr.w	r7, r7, #32
 8007f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f30:	601d      	str	r5, [r3, #0]
 8007f32:	9b06      	ldr	r3, [sp, #24]
 8007f34:	601c      	str	r4, [r3, #0]
 8007f36:	e6a3      	b.n	8007c80 <__gethex+0x110>
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f3e:	d8d8      	bhi.n	8007ef2 <__gethex+0x382>
 8007f40:	68ab      	ldr	r3, [r5, #8]
 8007f42:	4599      	cmp	r9, r3
 8007f44:	db12      	blt.n	8007f6c <__gethex+0x3fc>
 8007f46:	6869      	ldr	r1, [r5, #4]
 8007f48:	9802      	ldr	r0, [sp, #8]
 8007f4a:	3101      	adds	r1, #1
 8007f4c:	f000 f920 	bl	8008190 <_Balloc>
 8007f50:	4683      	mov	fp, r0
 8007f52:	692a      	ldr	r2, [r5, #16]
 8007f54:	f105 010c 	add.w	r1, r5, #12
 8007f58:	3202      	adds	r2, #2
 8007f5a:	0092      	lsls	r2, r2, #2
 8007f5c:	300c      	adds	r0, #12
 8007f5e:	f7fd fc07 	bl	8005770 <memcpy>
 8007f62:	4629      	mov	r1, r5
 8007f64:	9802      	ldr	r0, [sp, #8]
 8007f66:	f000 f947 	bl	80081f8 <_Bfree>
 8007f6a:	465d      	mov	r5, fp
 8007f6c:	692b      	ldr	r3, [r5, #16]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	612a      	str	r2, [r5, #16]
 8007f72:	2201      	movs	r2, #1
 8007f74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007f78:	615a      	str	r2, [r3, #20]
 8007f7a:	e7c2      	b.n	8007f02 <__gethex+0x392>
 8007f7c:	692a      	ldr	r2, [r5, #16]
 8007f7e:	454a      	cmp	r2, r9
 8007f80:	dd0b      	ble.n	8007f9a <__gethex+0x42a>
 8007f82:	2101      	movs	r1, #1
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fda3 	bl	8007ad0 <rshift>
 8007f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f8e:	3401      	adds	r4, #1
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	f6ff aed8 	blt.w	8007d46 <__gethex+0x1d6>
 8007f96:	2701      	movs	r7, #1
 8007f98:	e7c7      	b.n	8007f2a <__gethex+0x3ba>
 8007f9a:	f016 061f 	ands.w	r6, r6, #31
 8007f9e:	d0fa      	beq.n	8007f96 <__gethex+0x426>
 8007fa0:	449a      	add	sl, r3
 8007fa2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007fa6:	f000 f9b7 	bl	8008318 <__hi0bits>
 8007faa:	f1c6 0620 	rsb	r6, r6, #32
 8007fae:	42b0      	cmp	r0, r6
 8007fb0:	dbe7      	blt.n	8007f82 <__gethex+0x412>
 8007fb2:	e7f0      	b.n	8007f96 <__gethex+0x426>

08007fb4 <L_shift>:
 8007fb4:	f1c2 0208 	rsb	r2, r2, #8
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	b570      	push	{r4, r5, r6, lr}
 8007fbc:	f1c2 0620 	rsb	r6, r2, #32
 8007fc0:	6843      	ldr	r3, [r0, #4]
 8007fc2:	6804      	ldr	r4, [r0, #0]
 8007fc4:	fa03 f506 	lsl.w	r5, r3, r6
 8007fc8:	432c      	orrs	r4, r5
 8007fca:	40d3      	lsrs	r3, r2
 8007fcc:	6004      	str	r4, [r0, #0]
 8007fce:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fd2:	4288      	cmp	r0, r1
 8007fd4:	d3f4      	bcc.n	8007fc0 <L_shift+0xc>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}

08007fd8 <__match>:
 8007fd8:	b530      	push	{r4, r5, lr}
 8007fda:	6803      	ldr	r3, [r0, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe2:	b914      	cbnz	r4, 8007fea <__match+0x12>
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	bd30      	pop	{r4, r5, pc}
 8007fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ff2:	2d19      	cmp	r5, #25
 8007ff4:	bf98      	it	ls
 8007ff6:	3220      	addls	r2, #32
 8007ff8:	42a2      	cmp	r2, r4
 8007ffa:	d0f0      	beq.n	8007fde <__match+0x6>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e7f3      	b.n	8007fe8 <__match+0x10>

08008000 <__hexnan>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	2500      	movs	r5, #0
 8008006:	680b      	ldr	r3, [r1, #0]
 8008008:	4682      	mov	sl, r0
 800800a:	115f      	asrs	r7, r3, #5
 800800c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008010:	f013 031f 	ands.w	r3, r3, #31
 8008014:	bf18      	it	ne
 8008016:	3704      	addne	r7, #4
 8008018:	1f3e      	subs	r6, r7, #4
 800801a:	4690      	mov	r8, r2
 800801c:	46b1      	mov	r9, r6
 800801e:	4634      	mov	r4, r6
 8008020:	46ab      	mov	fp, r5
 8008022:	b087      	sub	sp, #28
 8008024:	6801      	ldr	r1, [r0, #0]
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	f847 5c04 	str.w	r5, [r7, #-4]
 800802c:	9502      	str	r5, [sp, #8]
 800802e:	784a      	ldrb	r2, [r1, #1]
 8008030:	1c4b      	adds	r3, r1, #1
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	b342      	cbz	r2, 8008088 <__hexnan+0x88>
 8008036:	4610      	mov	r0, r2
 8008038:	9105      	str	r1, [sp, #20]
 800803a:	9204      	str	r2, [sp, #16]
 800803c:	f7ff fd83 	bl	8007b46 <__hexdig_fun>
 8008040:	2800      	cmp	r0, #0
 8008042:	d143      	bne.n	80080cc <__hexnan+0xcc>
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	9905      	ldr	r1, [sp, #20]
 8008048:	2a20      	cmp	r2, #32
 800804a:	d818      	bhi.n	800807e <__hexnan+0x7e>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	459b      	cmp	fp, r3
 8008050:	dd13      	ble.n	800807a <__hexnan+0x7a>
 8008052:	454c      	cmp	r4, r9
 8008054:	d206      	bcs.n	8008064 <__hexnan+0x64>
 8008056:	2d07      	cmp	r5, #7
 8008058:	dc04      	bgt.n	8008064 <__hexnan+0x64>
 800805a:	462a      	mov	r2, r5
 800805c:	4649      	mov	r1, r9
 800805e:	4620      	mov	r0, r4
 8008060:	f7ff ffa8 	bl	8007fb4 <L_shift>
 8008064:	4544      	cmp	r4, r8
 8008066:	d944      	bls.n	80080f2 <__hexnan+0xf2>
 8008068:	2300      	movs	r3, #0
 800806a:	f1a4 0904 	sub.w	r9, r4, #4
 800806e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008072:	461d      	mov	r5, r3
 8008074:	464c      	mov	r4, r9
 8008076:	f8cd b008 	str.w	fp, [sp, #8]
 800807a:	9903      	ldr	r1, [sp, #12]
 800807c:	e7d7      	b.n	800802e <__hexnan+0x2e>
 800807e:	2a29      	cmp	r2, #41	; 0x29
 8008080:	d14a      	bne.n	8008118 <__hexnan+0x118>
 8008082:	3102      	adds	r1, #2
 8008084:	f8ca 1000 	str.w	r1, [sl]
 8008088:	f1bb 0f00 	cmp.w	fp, #0
 800808c:	d044      	beq.n	8008118 <__hexnan+0x118>
 800808e:	454c      	cmp	r4, r9
 8008090:	d206      	bcs.n	80080a0 <__hexnan+0xa0>
 8008092:	2d07      	cmp	r5, #7
 8008094:	dc04      	bgt.n	80080a0 <__hexnan+0xa0>
 8008096:	462a      	mov	r2, r5
 8008098:	4649      	mov	r1, r9
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff ff8a 	bl	8007fb4 <L_shift>
 80080a0:	4544      	cmp	r4, r8
 80080a2:	d928      	bls.n	80080f6 <__hexnan+0xf6>
 80080a4:	4643      	mov	r3, r8
 80080a6:	f854 2b04 	ldr.w	r2, [r4], #4
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	f843 2b04 	str.w	r2, [r3], #4
 80080b0:	d2f9      	bcs.n	80080a6 <__hexnan+0xa6>
 80080b2:	2200      	movs	r2, #0
 80080b4:	f843 2b04 	str.w	r2, [r3], #4
 80080b8:	429e      	cmp	r6, r3
 80080ba:	d2fb      	bcs.n	80080b4 <__hexnan+0xb4>
 80080bc:	6833      	ldr	r3, [r6, #0]
 80080be:	b91b      	cbnz	r3, 80080c8 <__hexnan+0xc8>
 80080c0:	4546      	cmp	r6, r8
 80080c2:	d127      	bne.n	8008114 <__hexnan+0x114>
 80080c4:	2301      	movs	r3, #1
 80080c6:	6033      	str	r3, [r6, #0]
 80080c8:	2005      	movs	r0, #5
 80080ca:	e026      	b.n	800811a <__hexnan+0x11a>
 80080cc:	3501      	adds	r5, #1
 80080ce:	2d08      	cmp	r5, #8
 80080d0:	f10b 0b01 	add.w	fp, fp, #1
 80080d4:	dd06      	ble.n	80080e4 <__hexnan+0xe4>
 80080d6:	4544      	cmp	r4, r8
 80080d8:	d9cf      	bls.n	800807a <__hexnan+0x7a>
 80080da:	2300      	movs	r3, #0
 80080dc:	2501      	movs	r5, #1
 80080de:	f844 3c04 	str.w	r3, [r4, #-4]
 80080e2:	3c04      	subs	r4, #4
 80080e4:	6822      	ldr	r2, [r4, #0]
 80080e6:	f000 000f 	and.w	r0, r0, #15
 80080ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	e7c3      	b.n	800807a <__hexnan+0x7a>
 80080f2:	2508      	movs	r5, #8
 80080f4:	e7c1      	b.n	800807a <__hexnan+0x7a>
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0df      	beq.n	80080bc <__hexnan+0xbc>
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	f1c3 0320 	rsb	r3, r3, #32
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
 8008108:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800810c:	401a      	ands	r2, r3
 800810e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008112:	e7d3      	b.n	80080bc <__hexnan+0xbc>
 8008114:	3e04      	subs	r6, #4
 8008116:	e7d1      	b.n	80080bc <__hexnan+0xbc>
 8008118:	2004      	movs	r0, #4
 800811a:	b007      	add	sp, #28
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008120 <__localeconv_l>:
 8008120:	30f0      	adds	r0, #240	; 0xf0
 8008122:	4770      	bx	lr

08008124 <_localeconv_r>:
 8008124:	4b04      	ldr	r3, [pc, #16]	; (8008138 <_localeconv_r+0x14>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6a18      	ldr	r0, [r3, #32]
 800812a:	4b04      	ldr	r3, [pc, #16]	; (800813c <_localeconv_r+0x18>)
 800812c:	2800      	cmp	r0, #0
 800812e:	bf08      	it	eq
 8008130:	4618      	moveq	r0, r3
 8008132:	30f0      	adds	r0, #240	; 0xf0
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	2000003c 	.word	0x2000003c
 800813c:	200000a0 	.word	0x200000a0

08008140 <malloc>:
 8008140:	4b02      	ldr	r3, [pc, #8]	; (800814c <malloc+0xc>)
 8008142:	4601      	mov	r1, r0
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	f000 bc75 	b.w	8008a34 <_malloc_r>
 800814a:	bf00      	nop
 800814c:	2000003c 	.word	0x2000003c

08008150 <__ascii_mbtowc>:
 8008150:	b082      	sub	sp, #8
 8008152:	b901      	cbnz	r1, 8008156 <__ascii_mbtowc+0x6>
 8008154:	a901      	add	r1, sp, #4
 8008156:	b142      	cbz	r2, 800816a <__ascii_mbtowc+0x1a>
 8008158:	b14b      	cbz	r3, 800816e <__ascii_mbtowc+0x1e>
 800815a:	7813      	ldrb	r3, [r2, #0]
 800815c:	600b      	str	r3, [r1, #0]
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	1c10      	adds	r0, r2, #0
 8008162:	bf18      	it	ne
 8008164:	2001      	movne	r0, #1
 8008166:	b002      	add	sp, #8
 8008168:	4770      	bx	lr
 800816a:	4610      	mov	r0, r2
 800816c:	e7fb      	b.n	8008166 <__ascii_mbtowc+0x16>
 800816e:	f06f 0001 	mvn.w	r0, #1
 8008172:	e7f8      	b.n	8008166 <__ascii_mbtowc+0x16>

08008174 <memchr>:
 8008174:	b510      	push	{r4, lr}
 8008176:	b2c9      	uxtb	r1, r1
 8008178:	4402      	add	r2, r0
 800817a:	4290      	cmp	r0, r2
 800817c:	4603      	mov	r3, r0
 800817e:	d101      	bne.n	8008184 <memchr+0x10>
 8008180:	2300      	movs	r3, #0
 8008182:	e003      	b.n	800818c <memchr+0x18>
 8008184:	781c      	ldrb	r4, [r3, #0]
 8008186:	3001      	adds	r0, #1
 8008188:	428c      	cmp	r4, r1
 800818a:	d1f6      	bne.n	800817a <memchr+0x6>
 800818c:	4618      	mov	r0, r3
 800818e:	bd10      	pop	{r4, pc}

08008190 <_Balloc>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008194:	4604      	mov	r4, r0
 8008196:	460e      	mov	r6, r1
 8008198:	b93d      	cbnz	r5, 80081aa <_Balloc+0x1a>
 800819a:	2010      	movs	r0, #16
 800819c:	f7ff ffd0 	bl	8008140 <malloc>
 80081a0:	6260      	str	r0, [r4, #36]	; 0x24
 80081a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081a6:	6005      	str	r5, [r0, #0]
 80081a8:	60c5      	str	r5, [r0, #12]
 80081aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80081ac:	68eb      	ldr	r3, [r5, #12]
 80081ae:	b183      	cbz	r3, 80081d2 <_Balloc+0x42>
 80081b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80081b8:	b9b8      	cbnz	r0, 80081ea <_Balloc+0x5a>
 80081ba:	2101      	movs	r1, #1
 80081bc:	fa01 f506 	lsl.w	r5, r1, r6
 80081c0:	1d6a      	adds	r2, r5, #5
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fbdb 	bl	8008980 <_calloc_r>
 80081ca:	b160      	cbz	r0, 80081e6 <_Balloc+0x56>
 80081cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80081d0:	e00e      	b.n	80081f0 <_Balloc+0x60>
 80081d2:	2221      	movs	r2, #33	; 0x21
 80081d4:	2104      	movs	r1, #4
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fbd2 	bl	8008980 <_calloc_r>
 80081dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081de:	60e8      	str	r0, [r5, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e4      	bne.n	80081b0 <_Balloc+0x20>
 80081e6:	2000      	movs	r0, #0
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	6802      	ldr	r2, [r0, #0]
 80081ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80081f0:	2300      	movs	r3, #0
 80081f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081f6:	e7f7      	b.n	80081e8 <_Balloc+0x58>

080081f8 <_Bfree>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081fc:	4606      	mov	r6, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	b93c      	cbnz	r4, 8008212 <_Bfree+0x1a>
 8008202:	2010      	movs	r0, #16
 8008204:	f7ff ff9c 	bl	8008140 <malloc>
 8008208:	6270      	str	r0, [r6, #36]	; 0x24
 800820a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800820e:	6004      	str	r4, [r0, #0]
 8008210:	60c4      	str	r4, [r0, #12]
 8008212:	b13d      	cbz	r5, 8008224 <_Bfree+0x2c>
 8008214:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008216:	686a      	ldr	r2, [r5, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800821e:	6029      	str	r1, [r5, #0]
 8008220:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008224:	bd70      	pop	{r4, r5, r6, pc}

08008226 <__multadd>:
 8008226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822a:	461f      	mov	r7, r3
 800822c:	4606      	mov	r6, r0
 800822e:	460c      	mov	r4, r1
 8008230:	2300      	movs	r3, #0
 8008232:	690d      	ldr	r5, [r1, #16]
 8008234:	f101 0c14 	add.w	ip, r1, #20
 8008238:	f8dc 0000 	ldr.w	r0, [ip]
 800823c:	3301      	adds	r3, #1
 800823e:	b281      	uxth	r1, r0
 8008240:	fb02 7101 	mla	r1, r2, r1, r7
 8008244:	0c00      	lsrs	r0, r0, #16
 8008246:	0c0f      	lsrs	r7, r1, #16
 8008248:	fb02 7000 	mla	r0, r2, r0, r7
 800824c:	b289      	uxth	r1, r1
 800824e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008252:	429d      	cmp	r5, r3
 8008254:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008258:	f84c 1b04 	str.w	r1, [ip], #4
 800825c:	dcec      	bgt.n	8008238 <__multadd+0x12>
 800825e:	b1d7      	cbz	r7, 8008296 <__multadd+0x70>
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	42ab      	cmp	r3, r5
 8008264:	dc12      	bgt.n	800828c <__multadd+0x66>
 8008266:	6861      	ldr	r1, [r4, #4]
 8008268:	4630      	mov	r0, r6
 800826a:	3101      	adds	r1, #1
 800826c:	f7ff ff90 	bl	8008190 <_Balloc>
 8008270:	4680      	mov	r8, r0
 8008272:	6922      	ldr	r2, [r4, #16]
 8008274:	f104 010c 	add.w	r1, r4, #12
 8008278:	3202      	adds	r2, #2
 800827a:	0092      	lsls	r2, r2, #2
 800827c:	300c      	adds	r0, #12
 800827e:	f7fd fa77 	bl	8005770 <memcpy>
 8008282:	4621      	mov	r1, r4
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff ffb7 	bl	80081f8 <_Bfree>
 800828a:	4644      	mov	r4, r8
 800828c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008290:	3501      	adds	r5, #1
 8008292:	615f      	str	r7, [r3, #20]
 8008294:	6125      	str	r5, [r4, #16]
 8008296:	4620      	mov	r0, r4
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800829c <__s2b>:
 800829c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a0:	4615      	mov	r5, r2
 80082a2:	2209      	movs	r2, #9
 80082a4:	461f      	mov	r7, r3
 80082a6:	3308      	adds	r3, #8
 80082a8:	460c      	mov	r4, r1
 80082aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80082ae:	4606      	mov	r6, r0
 80082b0:	2201      	movs	r2, #1
 80082b2:	2100      	movs	r1, #0
 80082b4:	429a      	cmp	r2, r3
 80082b6:	db20      	blt.n	80082fa <__s2b+0x5e>
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff ff69 	bl	8008190 <_Balloc>
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	2d09      	cmp	r5, #9
 80082c2:	6143      	str	r3, [r0, #20]
 80082c4:	f04f 0301 	mov.w	r3, #1
 80082c8:	6103      	str	r3, [r0, #16]
 80082ca:	dd19      	ble.n	8008300 <__s2b+0x64>
 80082cc:	f104 0809 	add.w	r8, r4, #9
 80082d0:	46c1      	mov	r9, r8
 80082d2:	442c      	add	r4, r5
 80082d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80082d8:	4601      	mov	r1, r0
 80082da:	3b30      	subs	r3, #48	; 0x30
 80082dc:	220a      	movs	r2, #10
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff ffa1 	bl	8008226 <__multadd>
 80082e4:	45a1      	cmp	r9, r4
 80082e6:	d1f5      	bne.n	80082d4 <__s2b+0x38>
 80082e8:	eb08 0405 	add.w	r4, r8, r5
 80082ec:	3c08      	subs	r4, #8
 80082ee:	1b2d      	subs	r5, r5, r4
 80082f0:	1963      	adds	r3, r4, r5
 80082f2:	42bb      	cmp	r3, r7
 80082f4:	db07      	blt.n	8008306 <__s2b+0x6a>
 80082f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fa:	0052      	lsls	r2, r2, #1
 80082fc:	3101      	adds	r1, #1
 80082fe:	e7d9      	b.n	80082b4 <__s2b+0x18>
 8008300:	340a      	adds	r4, #10
 8008302:	2509      	movs	r5, #9
 8008304:	e7f3      	b.n	80082ee <__s2b+0x52>
 8008306:	f814 3b01 	ldrb.w	r3, [r4], #1
 800830a:	4601      	mov	r1, r0
 800830c:	3b30      	subs	r3, #48	; 0x30
 800830e:	220a      	movs	r2, #10
 8008310:	4630      	mov	r0, r6
 8008312:	f7ff ff88 	bl	8008226 <__multadd>
 8008316:	e7eb      	b.n	80082f0 <__s2b+0x54>

08008318 <__hi0bits>:
 8008318:	0c02      	lsrs	r2, r0, #16
 800831a:	0412      	lsls	r2, r2, #16
 800831c:	4603      	mov	r3, r0
 800831e:	b9b2      	cbnz	r2, 800834e <__hi0bits+0x36>
 8008320:	0403      	lsls	r3, r0, #16
 8008322:	2010      	movs	r0, #16
 8008324:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008328:	bf04      	itt	eq
 800832a:	021b      	lsleq	r3, r3, #8
 800832c:	3008      	addeq	r0, #8
 800832e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008332:	bf04      	itt	eq
 8008334:	011b      	lsleq	r3, r3, #4
 8008336:	3004      	addeq	r0, #4
 8008338:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800833c:	bf04      	itt	eq
 800833e:	009b      	lsleq	r3, r3, #2
 8008340:	3002      	addeq	r0, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	db06      	blt.n	8008354 <__hi0bits+0x3c>
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	d503      	bpl.n	8008352 <__hi0bits+0x3a>
 800834a:	3001      	adds	r0, #1
 800834c:	4770      	bx	lr
 800834e:	2000      	movs	r0, #0
 8008350:	e7e8      	b.n	8008324 <__hi0bits+0xc>
 8008352:	2020      	movs	r0, #32
 8008354:	4770      	bx	lr

08008356 <__lo0bits>:
 8008356:	6803      	ldr	r3, [r0, #0]
 8008358:	4601      	mov	r1, r0
 800835a:	f013 0207 	ands.w	r2, r3, #7
 800835e:	d00b      	beq.n	8008378 <__lo0bits+0x22>
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	d423      	bmi.n	80083ac <__lo0bits+0x56>
 8008364:	0798      	lsls	r0, r3, #30
 8008366:	bf49      	itett	mi
 8008368:	085b      	lsrmi	r3, r3, #1
 800836a:	089b      	lsrpl	r3, r3, #2
 800836c:	2001      	movmi	r0, #1
 800836e:	600b      	strmi	r3, [r1, #0]
 8008370:	bf5c      	itt	pl
 8008372:	600b      	strpl	r3, [r1, #0]
 8008374:	2002      	movpl	r0, #2
 8008376:	4770      	bx	lr
 8008378:	b298      	uxth	r0, r3
 800837a:	b9a8      	cbnz	r0, 80083a8 <__lo0bits+0x52>
 800837c:	2010      	movs	r0, #16
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008384:	bf04      	itt	eq
 8008386:	0a1b      	lsreq	r3, r3, #8
 8008388:	3008      	addeq	r0, #8
 800838a:	071a      	lsls	r2, r3, #28
 800838c:	bf04      	itt	eq
 800838e:	091b      	lsreq	r3, r3, #4
 8008390:	3004      	addeq	r0, #4
 8008392:	079a      	lsls	r2, r3, #30
 8008394:	bf04      	itt	eq
 8008396:	089b      	lsreq	r3, r3, #2
 8008398:	3002      	addeq	r0, #2
 800839a:	07da      	lsls	r2, r3, #31
 800839c:	d402      	bmi.n	80083a4 <__lo0bits+0x4e>
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	d006      	beq.n	80083b0 <__lo0bits+0x5a>
 80083a2:	3001      	adds	r0, #1
 80083a4:	600b      	str	r3, [r1, #0]
 80083a6:	4770      	bx	lr
 80083a8:	4610      	mov	r0, r2
 80083aa:	e7e9      	b.n	8008380 <__lo0bits+0x2a>
 80083ac:	2000      	movs	r0, #0
 80083ae:	4770      	bx	lr
 80083b0:	2020      	movs	r0, #32
 80083b2:	4770      	bx	lr

080083b4 <__i2b>:
 80083b4:	b510      	push	{r4, lr}
 80083b6:	460c      	mov	r4, r1
 80083b8:	2101      	movs	r1, #1
 80083ba:	f7ff fee9 	bl	8008190 <_Balloc>
 80083be:	2201      	movs	r2, #1
 80083c0:	6144      	str	r4, [r0, #20]
 80083c2:	6102      	str	r2, [r0, #16]
 80083c4:	bd10      	pop	{r4, pc}

080083c6 <__multiply>:
 80083c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	4614      	mov	r4, r2
 80083cc:	690a      	ldr	r2, [r1, #16]
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	4688      	mov	r8, r1
 80083d2:	429a      	cmp	r2, r3
 80083d4:	bfbe      	ittt	lt
 80083d6:	460b      	movlt	r3, r1
 80083d8:	46a0      	movlt	r8, r4
 80083da:	461c      	movlt	r4, r3
 80083dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083ec:	eb07 0609 	add.w	r6, r7, r9
 80083f0:	42b3      	cmp	r3, r6
 80083f2:	bfb8      	it	lt
 80083f4:	3101      	addlt	r1, #1
 80083f6:	f7ff fecb 	bl	8008190 <_Balloc>
 80083fa:	f100 0514 	add.w	r5, r0, #20
 80083fe:	462b      	mov	r3, r5
 8008400:	2200      	movs	r2, #0
 8008402:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008406:	4573      	cmp	r3, lr
 8008408:	d316      	bcc.n	8008438 <__multiply+0x72>
 800840a:	f104 0214 	add.w	r2, r4, #20
 800840e:	f108 0114 	add.w	r1, r8, #20
 8008412:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008416:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	9201      	str	r2, [sp, #4]
 8008420:	4293      	cmp	r3, r2
 8008422:	d80c      	bhi.n	800843e <__multiply+0x78>
 8008424:	2e00      	cmp	r6, #0
 8008426:	dd03      	ble.n	8008430 <__multiply+0x6a>
 8008428:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05d      	beq.n	80084ec <__multiply+0x126>
 8008430:	6106      	str	r6, [r0, #16]
 8008432:	b003      	add	sp, #12
 8008434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008438:	f843 2b04 	str.w	r2, [r3], #4
 800843c:	e7e3      	b.n	8008406 <__multiply+0x40>
 800843e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008442:	f1bb 0f00 	cmp.w	fp, #0
 8008446:	d023      	beq.n	8008490 <__multiply+0xca>
 8008448:	4689      	mov	r9, r1
 800844a:	46ac      	mov	ip, r5
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	f859 4b04 	ldr.w	r4, [r9], #4
 8008454:	f8dc a000 	ldr.w	sl, [ip]
 8008458:	b2a3      	uxth	r3, r4
 800845a:	fa1f fa8a 	uxth.w	sl, sl
 800845e:	fb0b a303 	mla	r3, fp, r3, sl
 8008462:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008466:	f8dc 4000 	ldr.w	r4, [ip]
 800846a:	4443      	add	r3, r8
 800846c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008470:	fb0b 840a 	mla	r4, fp, sl, r8
 8008474:	46e2      	mov	sl, ip
 8008476:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800847a:	b29b      	uxth	r3, r3
 800847c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008480:	454f      	cmp	r7, r9
 8008482:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008486:	f84a 3b04 	str.w	r3, [sl], #4
 800848a:	d82b      	bhi.n	80084e4 <__multiply+0x11e>
 800848c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	3204      	adds	r2, #4
 8008494:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008498:	f1ba 0f00 	cmp.w	sl, #0
 800849c:	d020      	beq.n	80084e0 <__multiply+0x11a>
 800849e:	4689      	mov	r9, r1
 80084a0:	46a8      	mov	r8, r5
 80084a2:	f04f 0b00 	mov.w	fp, #0
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	f8b9 c000 	ldrh.w	ip, [r9]
 80084ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	fb0a 440c 	mla	r4, sl, ip, r4
 80084b6:	46c4      	mov	ip, r8
 80084b8:	445c      	add	r4, fp
 80084ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084be:	f84c 3b04 	str.w	r3, [ip], #4
 80084c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80084c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	fb0a b303 	mla	r3, sl, r3, fp
 80084d0:	454f      	cmp	r7, r9
 80084d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80084d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80084da:	d805      	bhi.n	80084e8 <__multiply+0x122>
 80084dc:	f8c8 3004 	str.w	r3, [r8, #4]
 80084e0:	3504      	adds	r5, #4
 80084e2:	e79b      	b.n	800841c <__multiply+0x56>
 80084e4:	46d4      	mov	ip, sl
 80084e6:	e7b3      	b.n	8008450 <__multiply+0x8a>
 80084e8:	46e0      	mov	r8, ip
 80084ea:	e7dd      	b.n	80084a8 <__multiply+0xe2>
 80084ec:	3e01      	subs	r6, #1
 80084ee:	e799      	b.n	8008424 <__multiply+0x5e>

080084f0 <__pow5mult>:
 80084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f4:	4615      	mov	r5, r2
 80084f6:	f012 0203 	ands.w	r2, r2, #3
 80084fa:	4606      	mov	r6, r0
 80084fc:	460f      	mov	r7, r1
 80084fe:	d007      	beq.n	8008510 <__pow5mult+0x20>
 8008500:	4c21      	ldr	r4, [pc, #132]	; (8008588 <__pow5mult+0x98>)
 8008502:	3a01      	subs	r2, #1
 8008504:	2300      	movs	r3, #0
 8008506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800850a:	f7ff fe8c 	bl	8008226 <__multadd>
 800850e:	4607      	mov	r7, r0
 8008510:	10ad      	asrs	r5, r5, #2
 8008512:	d035      	beq.n	8008580 <__pow5mult+0x90>
 8008514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008516:	b93c      	cbnz	r4, 8008528 <__pow5mult+0x38>
 8008518:	2010      	movs	r0, #16
 800851a:	f7ff fe11 	bl	8008140 <malloc>
 800851e:	6270      	str	r0, [r6, #36]	; 0x24
 8008520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008524:	6004      	str	r4, [r0, #0]
 8008526:	60c4      	str	r4, [r0, #12]
 8008528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800852c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008530:	b94c      	cbnz	r4, 8008546 <__pow5mult+0x56>
 8008532:	f240 2171 	movw	r1, #625	; 0x271
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff ff3c 	bl	80083b4 <__i2b>
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	f8c8 0008 	str.w	r0, [r8, #8]
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	07eb      	lsls	r3, r5, #31
 800854c:	d50a      	bpl.n	8008564 <__pow5mult+0x74>
 800854e:	4639      	mov	r1, r7
 8008550:	4622      	mov	r2, r4
 8008552:	4630      	mov	r0, r6
 8008554:	f7ff ff37 	bl	80083c6 <__multiply>
 8008558:	4681      	mov	r9, r0
 800855a:	4639      	mov	r1, r7
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff fe4b 	bl	80081f8 <_Bfree>
 8008562:	464f      	mov	r7, r9
 8008564:	106d      	asrs	r5, r5, #1
 8008566:	d00b      	beq.n	8008580 <__pow5mult+0x90>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	b938      	cbnz	r0, 800857c <__pow5mult+0x8c>
 800856c:	4622      	mov	r2, r4
 800856e:	4621      	mov	r1, r4
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff ff28 	bl	80083c6 <__multiply>
 8008576:	6020      	str	r0, [r4, #0]
 8008578:	f8c0 8000 	str.w	r8, [r0]
 800857c:	4604      	mov	r4, r0
 800857e:	e7e4      	b.n	800854a <__pow5mult+0x5a>
 8008580:	4638      	mov	r0, r7
 8008582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008586:	bf00      	nop
 8008588:	08009240 	.word	0x08009240

0800858c <__lshift>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	4607      	mov	r7, r0
 8008594:	4616      	mov	r6, r2
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800859c:	eb0a 0903 	add.w	r9, sl, r3
 80085a0:	6849      	ldr	r1, [r1, #4]
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	f109 0501 	add.w	r5, r9, #1
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	db32      	blt.n	8008612 <__lshift+0x86>
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff fdef 	bl	8008190 <_Balloc>
 80085b2:	2300      	movs	r3, #0
 80085b4:	4680      	mov	r8, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	f100 0114 	add.w	r1, r0, #20
 80085bc:	4553      	cmp	r3, sl
 80085be:	db2b      	blt.n	8008618 <__lshift+0x8c>
 80085c0:	6920      	ldr	r0, [r4, #16]
 80085c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085c6:	f104 0314 	add.w	r3, r4, #20
 80085ca:	f016 021f 	ands.w	r2, r6, #31
 80085ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085d6:	d025      	beq.n	8008624 <__lshift+0x98>
 80085d8:	2000      	movs	r0, #0
 80085da:	f1c2 0e20 	rsb	lr, r2, #32
 80085de:	468a      	mov	sl, r1
 80085e0:	681e      	ldr	r6, [r3, #0]
 80085e2:	4096      	lsls	r6, r2
 80085e4:	4330      	orrs	r0, r6
 80085e6:	f84a 0b04 	str.w	r0, [sl], #4
 80085ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80085ee:	459c      	cmp	ip, r3
 80085f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80085f4:	d814      	bhi.n	8008620 <__lshift+0x94>
 80085f6:	6048      	str	r0, [r1, #4]
 80085f8:	b108      	cbz	r0, 80085fe <__lshift+0x72>
 80085fa:	f109 0502 	add.w	r5, r9, #2
 80085fe:	3d01      	subs	r5, #1
 8008600:	4638      	mov	r0, r7
 8008602:	f8c8 5010 	str.w	r5, [r8, #16]
 8008606:	4621      	mov	r1, r4
 8008608:	f7ff fdf6 	bl	80081f8 <_Bfree>
 800860c:	4640      	mov	r0, r8
 800860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008612:	3101      	adds	r1, #1
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	e7c7      	b.n	80085a8 <__lshift+0x1c>
 8008618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800861c:	3301      	adds	r3, #1
 800861e:	e7cd      	b.n	80085bc <__lshift+0x30>
 8008620:	4651      	mov	r1, sl
 8008622:	e7dc      	b.n	80085de <__lshift+0x52>
 8008624:	3904      	subs	r1, #4
 8008626:	f853 2b04 	ldr.w	r2, [r3], #4
 800862a:	459c      	cmp	ip, r3
 800862c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008630:	d8f9      	bhi.n	8008626 <__lshift+0x9a>
 8008632:	e7e4      	b.n	80085fe <__lshift+0x72>

08008634 <__mcmp>:
 8008634:	6903      	ldr	r3, [r0, #16]
 8008636:	690a      	ldr	r2, [r1, #16]
 8008638:	b530      	push	{r4, r5, lr}
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	d10c      	bne.n	8008658 <__mcmp+0x24>
 800863e:	0092      	lsls	r2, r2, #2
 8008640:	3014      	adds	r0, #20
 8008642:	3114      	adds	r1, #20
 8008644:	1884      	adds	r4, r0, r2
 8008646:	4411      	add	r1, r2
 8008648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800864c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008650:	4295      	cmp	r5, r2
 8008652:	d003      	beq.n	800865c <__mcmp+0x28>
 8008654:	d305      	bcc.n	8008662 <__mcmp+0x2e>
 8008656:	2301      	movs	r3, #1
 8008658:	4618      	mov	r0, r3
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	42a0      	cmp	r0, r4
 800865e:	d3f3      	bcc.n	8008648 <__mcmp+0x14>
 8008660:	e7fa      	b.n	8008658 <__mcmp+0x24>
 8008662:	f04f 33ff 	mov.w	r3, #4294967295
 8008666:	e7f7      	b.n	8008658 <__mcmp+0x24>

08008668 <__mdiff>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	460d      	mov	r5, r1
 800866e:	4607      	mov	r7, r0
 8008670:	4611      	mov	r1, r2
 8008672:	4628      	mov	r0, r5
 8008674:	4614      	mov	r4, r2
 8008676:	f7ff ffdd 	bl	8008634 <__mcmp>
 800867a:	1e06      	subs	r6, r0, #0
 800867c:	d108      	bne.n	8008690 <__mdiff+0x28>
 800867e:	4631      	mov	r1, r6
 8008680:	4638      	mov	r0, r7
 8008682:	f7ff fd85 	bl	8008190 <_Balloc>
 8008686:	2301      	movs	r3, #1
 8008688:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800868c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008690:	bfa4      	itt	ge
 8008692:	4623      	movge	r3, r4
 8008694:	462c      	movge	r4, r5
 8008696:	4638      	mov	r0, r7
 8008698:	6861      	ldr	r1, [r4, #4]
 800869a:	bfa6      	itte	ge
 800869c:	461d      	movge	r5, r3
 800869e:	2600      	movge	r6, #0
 80086a0:	2601      	movlt	r6, #1
 80086a2:	f7ff fd75 	bl	8008190 <_Balloc>
 80086a6:	f04f 0e00 	mov.w	lr, #0
 80086aa:	60c6      	str	r6, [r0, #12]
 80086ac:	692b      	ldr	r3, [r5, #16]
 80086ae:	6926      	ldr	r6, [r4, #16]
 80086b0:	f104 0214 	add.w	r2, r4, #20
 80086b4:	f105 0914 	add.w	r9, r5, #20
 80086b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80086bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80086c0:	f100 0114 	add.w	r1, r0, #20
 80086c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80086c8:	f859 5b04 	ldr.w	r5, [r9], #4
 80086cc:	fa1f f38a 	uxth.w	r3, sl
 80086d0:	4473      	add	r3, lr
 80086d2:	b2ac      	uxth	r4, r5
 80086d4:	1b1b      	subs	r3, r3, r4
 80086d6:	0c2c      	lsrs	r4, r5, #16
 80086d8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80086dc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80086e6:	45c8      	cmp	r8, r9
 80086e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80086ec:	4694      	mov	ip, r2
 80086ee:	f841 4b04 	str.w	r4, [r1], #4
 80086f2:	d8e7      	bhi.n	80086c4 <__mdiff+0x5c>
 80086f4:	45bc      	cmp	ip, r7
 80086f6:	d304      	bcc.n	8008702 <__mdiff+0x9a>
 80086f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80086fc:	b183      	cbz	r3, 8008720 <__mdiff+0xb8>
 80086fe:	6106      	str	r6, [r0, #16]
 8008700:	e7c4      	b.n	800868c <__mdiff+0x24>
 8008702:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008706:	b2a2      	uxth	r2, r4
 8008708:	4472      	add	r2, lr
 800870a:	1413      	asrs	r3, r2, #16
 800870c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008710:	b292      	uxth	r2, r2
 8008712:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008716:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800871a:	f841 2b04 	str.w	r2, [r1], #4
 800871e:	e7e9      	b.n	80086f4 <__mdiff+0x8c>
 8008720:	3e01      	subs	r6, #1
 8008722:	e7e9      	b.n	80086f8 <__mdiff+0x90>

08008724 <__ulp>:
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <__ulp+0x44>)
 8008726:	400b      	ands	r3, r1
 8008728:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800872c:	2b00      	cmp	r3, #0
 800872e:	dd02      	ble.n	8008736 <__ulp+0x12>
 8008730:	2000      	movs	r0, #0
 8008732:	4619      	mov	r1, r3
 8008734:	4770      	bx	lr
 8008736:	425b      	negs	r3, r3
 8008738:	151b      	asrs	r3, r3, #20
 800873a:	2b13      	cmp	r3, #19
 800873c:	f04f 0000 	mov.w	r0, #0
 8008740:	f04f 0100 	mov.w	r1, #0
 8008744:	dc04      	bgt.n	8008750 <__ulp+0x2c>
 8008746:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800874a:	fa42 f103 	asr.w	r1, r2, r3
 800874e:	4770      	bx	lr
 8008750:	2201      	movs	r2, #1
 8008752:	3b14      	subs	r3, #20
 8008754:	2b1e      	cmp	r3, #30
 8008756:	bfce      	itee	gt
 8008758:	4613      	movgt	r3, r2
 800875a:	f1c3 031f 	rsble	r3, r3, #31
 800875e:	fa02 f303 	lslle.w	r3, r2, r3
 8008762:	4618      	mov	r0, r3
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	7ff00000 	.word	0x7ff00000

0800876c <__b2d>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	6907      	ldr	r7, [r0, #16]
 8008772:	f100 0914 	add.w	r9, r0, #20
 8008776:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800877a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800877e:	f1a7 0804 	sub.w	r8, r7, #4
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff fdc8 	bl	8008318 <__hi0bits>
 8008788:	f1c0 0320 	rsb	r3, r0, #32
 800878c:	280a      	cmp	r0, #10
 800878e:	600b      	str	r3, [r1, #0]
 8008790:	491e      	ldr	r1, [pc, #120]	; (800880c <__b2d+0xa0>)
 8008792:	dc17      	bgt.n	80087c4 <__b2d+0x58>
 8008794:	45c1      	cmp	r9, r8
 8008796:	bf28      	it	cs
 8008798:	2200      	movcs	r2, #0
 800879a:	f1c0 0c0b 	rsb	ip, r0, #11
 800879e:	fa26 f30c 	lsr.w	r3, r6, ip
 80087a2:	bf38      	it	cc
 80087a4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80087a8:	ea43 0501 	orr.w	r5, r3, r1
 80087ac:	f100 0315 	add.w	r3, r0, #21
 80087b0:	fa06 f303 	lsl.w	r3, r6, r3
 80087b4:	fa22 f20c 	lsr.w	r2, r2, ip
 80087b8:	ea43 0402 	orr.w	r4, r3, r2
 80087bc:	4620      	mov	r0, r4
 80087be:	4629      	mov	r1, r5
 80087c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087c4:	45c1      	cmp	r9, r8
 80087c6:	bf3a      	itte	cc
 80087c8:	f1a7 0808 	subcc.w	r8, r7, #8
 80087cc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80087d0:	2200      	movcs	r2, #0
 80087d2:	f1b0 030b 	subs.w	r3, r0, #11
 80087d6:	d015      	beq.n	8008804 <__b2d+0x98>
 80087d8:	409e      	lsls	r6, r3
 80087da:	f1c3 0720 	rsb	r7, r3, #32
 80087de:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80087e2:	fa22 f107 	lsr.w	r1, r2, r7
 80087e6:	45c8      	cmp	r8, r9
 80087e8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80087ec:	ea46 0501 	orr.w	r5, r6, r1
 80087f0:	bf94      	ite	ls
 80087f2:	2100      	movls	r1, #0
 80087f4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80087f8:	fa02 f003 	lsl.w	r0, r2, r3
 80087fc:	40f9      	lsrs	r1, r7
 80087fe:	ea40 0401 	orr.w	r4, r0, r1
 8008802:	e7db      	b.n	80087bc <__b2d+0x50>
 8008804:	ea46 0501 	orr.w	r5, r6, r1
 8008808:	4614      	mov	r4, r2
 800880a:	e7d7      	b.n	80087bc <__b2d+0x50>
 800880c:	3ff00000 	.word	0x3ff00000

08008810 <__d2b>:
 8008810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008814:	461c      	mov	r4, r3
 8008816:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800881a:	2101      	movs	r1, #1
 800881c:	4690      	mov	r8, r2
 800881e:	f7ff fcb7 	bl	8008190 <_Balloc>
 8008822:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008826:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800882a:	4607      	mov	r7, r0
 800882c:	bb34      	cbnz	r4, 800887c <__d2b+0x6c>
 800882e:	9201      	str	r2, [sp, #4]
 8008830:	f1b8 0200 	subs.w	r2, r8, #0
 8008834:	d027      	beq.n	8008886 <__d2b+0x76>
 8008836:	a802      	add	r0, sp, #8
 8008838:	f840 2d08 	str.w	r2, [r0, #-8]!
 800883c:	f7ff fd8b 	bl	8008356 <__lo0bits>
 8008840:	9900      	ldr	r1, [sp, #0]
 8008842:	b1f0      	cbz	r0, 8008882 <__d2b+0x72>
 8008844:	9a01      	ldr	r2, [sp, #4]
 8008846:	f1c0 0320 	rsb	r3, r0, #32
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	430b      	orrs	r3, r1
 8008850:	40c2      	lsrs	r2, r0
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	9201      	str	r2, [sp, #4]
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf14      	ite	ne
 800885c:	2102      	movne	r1, #2
 800885e:	2101      	moveq	r1, #1
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	6139      	str	r1, [r7, #16]
 8008864:	b1c4      	cbz	r4, 8008898 <__d2b+0x88>
 8008866:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800886a:	4404      	add	r4, r0
 800886c:	6034      	str	r4, [r6, #0]
 800886e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008872:	6028      	str	r0, [r5, #0]
 8008874:	4638      	mov	r0, r7
 8008876:	b002      	add	sp, #8
 8008878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008880:	e7d5      	b.n	800882e <__d2b+0x1e>
 8008882:	6179      	str	r1, [r7, #20]
 8008884:	e7e7      	b.n	8008856 <__d2b+0x46>
 8008886:	a801      	add	r0, sp, #4
 8008888:	f7ff fd65 	bl	8008356 <__lo0bits>
 800888c:	2101      	movs	r1, #1
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	6139      	str	r1, [r7, #16]
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	3020      	adds	r0, #32
 8008896:	e7e5      	b.n	8008864 <__d2b+0x54>
 8008898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800889c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80088a0:	6030      	str	r0, [r6, #0]
 80088a2:	6918      	ldr	r0, [r3, #16]
 80088a4:	f7ff fd38 	bl	8008318 <__hi0bits>
 80088a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088ac:	e7e1      	b.n	8008872 <__d2b+0x62>

080088ae <__ratio>:
 80088ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b2:	4688      	mov	r8, r1
 80088b4:	4669      	mov	r1, sp
 80088b6:	4681      	mov	r9, r0
 80088b8:	f7ff ff58 	bl	800876c <__b2d>
 80088bc:	468b      	mov	fp, r1
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	4640      	mov	r0, r8
 80088c4:	a901      	add	r1, sp, #4
 80088c6:	f7ff ff51 	bl	800876c <__b2d>
 80088ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088d2:	460d      	mov	r5, r1
 80088d4:	eba3 0c02 	sub.w	ip, r3, r2
 80088d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bfd5      	itete	le
 80088e6:	460a      	movle	r2, r1
 80088e8:	463a      	movgt	r2, r7
 80088ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80088f2:	bfd8      	it	le
 80088f4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80088f8:	462b      	mov	r3, r5
 80088fa:	4602      	mov	r2, r0
 80088fc:	4659      	mov	r1, fp
 80088fe:	4630      	mov	r0, r6
 8008900:	f7f7 ff2c 	bl	800075c <__aeabi_ddiv>
 8008904:	b003      	add	sp, #12
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800890a <__copybits>:
 800890a:	3901      	subs	r1, #1
 800890c:	b510      	push	{r4, lr}
 800890e:	1149      	asrs	r1, r1, #5
 8008910:	6914      	ldr	r4, [r2, #16]
 8008912:	3101      	adds	r1, #1
 8008914:	f102 0314 	add.w	r3, r2, #20
 8008918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800891c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008920:	42a3      	cmp	r3, r4
 8008922:	4602      	mov	r2, r0
 8008924:	d303      	bcc.n	800892e <__copybits+0x24>
 8008926:	2300      	movs	r3, #0
 8008928:	428a      	cmp	r2, r1
 800892a:	d305      	bcc.n	8008938 <__copybits+0x2e>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008932:	f840 2b04 	str.w	r2, [r0], #4
 8008936:	e7f3      	b.n	8008920 <__copybits+0x16>
 8008938:	f842 3b04 	str.w	r3, [r2], #4
 800893c:	e7f4      	b.n	8008928 <__copybits+0x1e>

0800893e <__any_on>:
 800893e:	f100 0214 	add.w	r2, r0, #20
 8008942:	6900      	ldr	r0, [r0, #16]
 8008944:	114b      	asrs	r3, r1, #5
 8008946:	4298      	cmp	r0, r3
 8008948:	b510      	push	{r4, lr}
 800894a:	db11      	blt.n	8008970 <__any_on+0x32>
 800894c:	dd0a      	ble.n	8008964 <__any_on+0x26>
 800894e:	f011 011f 	ands.w	r1, r1, #31
 8008952:	d007      	beq.n	8008964 <__any_on+0x26>
 8008954:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008958:	fa24 f001 	lsr.w	r0, r4, r1
 800895c:	fa00 f101 	lsl.w	r1, r0, r1
 8008960:	428c      	cmp	r4, r1
 8008962:	d10b      	bne.n	800897c <__any_on+0x3e>
 8008964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008968:	4293      	cmp	r3, r2
 800896a:	d803      	bhi.n	8008974 <__any_on+0x36>
 800896c:	2000      	movs	r0, #0
 800896e:	bd10      	pop	{r4, pc}
 8008970:	4603      	mov	r3, r0
 8008972:	e7f7      	b.n	8008964 <__any_on+0x26>
 8008974:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008978:	2900      	cmp	r1, #0
 800897a:	d0f5      	beq.n	8008968 <__any_on+0x2a>
 800897c:	2001      	movs	r0, #1
 800897e:	e7f6      	b.n	800896e <__any_on+0x30>

08008980 <_calloc_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	fb02 f401 	mul.w	r4, r2, r1
 8008986:	4621      	mov	r1, r4
 8008988:	f000 f854 	bl	8008a34 <_malloc_r>
 800898c:	4605      	mov	r5, r0
 800898e:	b118      	cbz	r0, 8008998 <_calloc_r+0x18>
 8008990:	4622      	mov	r2, r4
 8008992:	2100      	movs	r1, #0
 8008994:	f7fc fef7 	bl	8005786 <memset>
 8008998:	4628      	mov	r0, r5
 800899a:	bd38      	pop	{r3, r4, r5, pc}

0800899c <_free_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4605      	mov	r5, r0
 80089a0:	2900      	cmp	r1, #0
 80089a2:	d043      	beq.n	8008a2c <_free_r+0x90>
 80089a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a8:	1f0c      	subs	r4, r1, #4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bfb8      	it	lt
 80089ae:	18e4      	addlt	r4, r4, r3
 80089b0:	f000 fa26 	bl	8008e00 <__malloc_lock>
 80089b4:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <_free_r+0x94>)
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	4610      	mov	r0, r2
 80089ba:	b933      	cbnz	r3, 80089ca <_free_r+0x2e>
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	6014      	str	r4, [r2, #0]
 80089c0:	4628      	mov	r0, r5
 80089c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c6:	f000 ba1c 	b.w	8008e02 <__malloc_unlock>
 80089ca:	42a3      	cmp	r3, r4
 80089cc:	d90b      	bls.n	80089e6 <_free_r+0x4a>
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	1862      	adds	r2, r4, r1
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bf01      	itttt	eq
 80089d6:	681a      	ldreq	r2, [r3, #0]
 80089d8:	685b      	ldreq	r3, [r3, #4]
 80089da:	1852      	addeq	r2, r2, r1
 80089dc:	6022      	streq	r2, [r4, #0]
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	6004      	str	r4, [r0, #0]
 80089e2:	e7ed      	b.n	80089c0 <_free_r+0x24>
 80089e4:	4613      	mov	r3, r2
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	b10a      	cbz	r2, 80089ee <_free_r+0x52>
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	d9fa      	bls.n	80089e4 <_free_r+0x48>
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	1858      	adds	r0, r3, r1
 80089f2:	42a0      	cmp	r0, r4
 80089f4:	d10b      	bne.n	8008a0e <_free_r+0x72>
 80089f6:	6820      	ldr	r0, [r4, #0]
 80089f8:	4401      	add	r1, r0
 80089fa:	1858      	adds	r0, r3, r1
 80089fc:	4282      	cmp	r2, r0
 80089fe:	6019      	str	r1, [r3, #0]
 8008a00:	d1de      	bne.n	80089c0 <_free_r+0x24>
 8008a02:	6810      	ldr	r0, [r2, #0]
 8008a04:	6852      	ldr	r2, [r2, #4]
 8008a06:	4401      	add	r1, r0
 8008a08:	6019      	str	r1, [r3, #0]
 8008a0a:	605a      	str	r2, [r3, #4]
 8008a0c:	e7d8      	b.n	80089c0 <_free_r+0x24>
 8008a0e:	d902      	bls.n	8008a16 <_free_r+0x7a>
 8008a10:	230c      	movs	r3, #12
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	e7d4      	b.n	80089c0 <_free_r+0x24>
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	1821      	adds	r1, r4, r0
 8008a1a:	428a      	cmp	r2, r1
 8008a1c:	bf01      	itttt	eq
 8008a1e:	6811      	ldreq	r1, [r2, #0]
 8008a20:	6852      	ldreq	r2, [r2, #4]
 8008a22:	1809      	addeq	r1, r1, r0
 8008a24:	6021      	streq	r1, [r4, #0]
 8008a26:	6062      	str	r2, [r4, #4]
 8008a28:	605c      	str	r4, [r3, #4]
 8008a2a:	e7c9      	b.n	80089c0 <_free_r+0x24>
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	bf00      	nop
 8008a30:	200002bc 	.word	0x200002bc

08008a34 <_malloc_r>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	1ccd      	adds	r5, r1, #3
 8008a38:	f025 0503 	bic.w	r5, r5, #3
 8008a3c:	3508      	adds	r5, #8
 8008a3e:	2d0c      	cmp	r5, #12
 8008a40:	bf38      	it	cc
 8008a42:	250c      	movcc	r5, #12
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	4606      	mov	r6, r0
 8008a48:	db01      	blt.n	8008a4e <_malloc_r+0x1a>
 8008a4a:	42a9      	cmp	r1, r5
 8008a4c:	d903      	bls.n	8008a56 <_malloc_r+0x22>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	6033      	str	r3, [r6, #0]
 8008a52:	2000      	movs	r0, #0
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	f000 f9d3 	bl	8008e00 <__malloc_lock>
 8008a5a:	4a21      	ldr	r2, [pc, #132]	; (8008ae0 <_malloc_r+0xac>)
 8008a5c:	6814      	ldr	r4, [r2, #0]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	b991      	cbnz	r1, 8008a88 <_malloc_r+0x54>
 8008a62:	4c20      	ldr	r4, [pc, #128]	; (8008ae4 <_malloc_r+0xb0>)
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	b91b      	cbnz	r3, 8008a70 <_malloc_r+0x3c>
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f98f 	bl	8008d8c <_sbrk_r>
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	4629      	mov	r1, r5
 8008a72:	4630      	mov	r0, r6
 8008a74:	f000 f98a 	bl	8008d8c <_sbrk_r>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d124      	bne.n	8008ac6 <_malloc_r+0x92>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	4630      	mov	r0, r6
 8008a80:	6033      	str	r3, [r6, #0]
 8008a82:	f000 f9be 	bl	8008e02 <__malloc_unlock>
 8008a86:	e7e4      	b.n	8008a52 <_malloc_r+0x1e>
 8008a88:	680b      	ldr	r3, [r1, #0]
 8008a8a:	1b5b      	subs	r3, r3, r5
 8008a8c:	d418      	bmi.n	8008ac0 <_malloc_r+0x8c>
 8008a8e:	2b0b      	cmp	r3, #11
 8008a90:	d90f      	bls.n	8008ab2 <_malloc_r+0x7e>
 8008a92:	600b      	str	r3, [r1, #0]
 8008a94:	18cc      	adds	r4, r1, r3
 8008a96:	50cd      	str	r5, [r1, r3]
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 f9b2 	bl	8008e02 <__malloc_unlock>
 8008a9e:	f104 000b 	add.w	r0, r4, #11
 8008aa2:	1d23      	adds	r3, r4, #4
 8008aa4:	f020 0007 	bic.w	r0, r0, #7
 8008aa8:	1ac3      	subs	r3, r0, r3
 8008aaa:	d0d3      	beq.n	8008a54 <_malloc_r+0x20>
 8008aac:	425a      	negs	r2, r3
 8008aae:	50e2      	str	r2, [r4, r3]
 8008ab0:	e7d0      	b.n	8008a54 <_malloc_r+0x20>
 8008ab2:	684b      	ldr	r3, [r1, #4]
 8008ab4:	428c      	cmp	r4, r1
 8008ab6:	bf16      	itet	ne
 8008ab8:	6063      	strne	r3, [r4, #4]
 8008aba:	6013      	streq	r3, [r2, #0]
 8008abc:	460c      	movne	r4, r1
 8008abe:	e7eb      	b.n	8008a98 <_malloc_r+0x64>
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6849      	ldr	r1, [r1, #4]
 8008ac4:	e7cc      	b.n	8008a60 <_malloc_r+0x2c>
 8008ac6:	1cc4      	adds	r4, r0, #3
 8008ac8:	f024 0403 	bic.w	r4, r4, #3
 8008acc:	42a0      	cmp	r0, r4
 8008ace:	d005      	beq.n	8008adc <_malloc_r+0xa8>
 8008ad0:	1a21      	subs	r1, r4, r0
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f000 f95a 	bl	8008d8c <_sbrk_r>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d0cf      	beq.n	8008a7c <_malloc_r+0x48>
 8008adc:	6025      	str	r5, [r4, #0]
 8008ade:	e7db      	b.n	8008a98 <_malloc_r+0x64>
 8008ae0:	200002bc 	.word	0x200002bc
 8008ae4:	200002c0 	.word	0x200002c0

08008ae8 <__ssputs_r>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	688e      	ldr	r6, [r1, #8]
 8008aee:	4682      	mov	sl, r0
 8008af0:	429e      	cmp	r6, r3
 8008af2:	460c      	mov	r4, r1
 8008af4:	4690      	mov	r8, r2
 8008af6:	4699      	mov	r9, r3
 8008af8:	d837      	bhi.n	8008b6a <__ssputs_r+0x82>
 8008afa:	898a      	ldrh	r2, [r1, #12]
 8008afc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b00:	d031      	beq.n	8008b66 <__ssputs_r+0x7e>
 8008b02:	2302      	movs	r3, #2
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	6909      	ldr	r1, [r1, #16]
 8008b08:	1a6f      	subs	r7, r5, r1
 8008b0a:	6965      	ldr	r5, [r4, #20]
 8008b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b10:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b14:	f109 0301 	add.w	r3, r9, #1
 8008b18:	443b      	add	r3, r7
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	bf38      	it	cc
 8008b1e:	461d      	movcc	r5, r3
 8008b20:	0553      	lsls	r3, r2, #21
 8008b22:	d530      	bpl.n	8008b86 <__ssputs_r+0x9e>
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7ff ff85 	bl	8008a34 <_malloc_r>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b950      	cbnz	r0, 8008b44 <__ssputs_r+0x5c>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	f8ca 3000 	str.w	r3, [sl]
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b44:	463a      	mov	r2, r7
 8008b46:	6921      	ldr	r1, [r4, #16]
 8008b48:	f7fc fe12 	bl	8005770 <memcpy>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	6126      	str	r6, [r4, #16]
 8008b5a:	443e      	add	r6, r7
 8008b5c:	6026      	str	r6, [r4, #0]
 8008b5e:	464e      	mov	r6, r9
 8008b60:	6165      	str	r5, [r4, #20]
 8008b62:	1bed      	subs	r5, r5, r7
 8008b64:	60a5      	str	r5, [r4, #8]
 8008b66:	454e      	cmp	r6, r9
 8008b68:	d900      	bls.n	8008b6c <__ssputs_r+0x84>
 8008b6a:	464e      	mov	r6, r9
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	4641      	mov	r1, r8
 8008b70:	6820      	ldr	r0, [r4, #0]
 8008b72:	f000 f92c 	bl	8008dce <memmove>
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	1b9b      	subs	r3, r3, r6
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	441e      	add	r6, r3
 8008b82:	6026      	str	r6, [r4, #0]
 8008b84:	e7dc      	b.n	8008b40 <__ssputs_r+0x58>
 8008b86:	462a      	mov	r2, r5
 8008b88:	f000 f93c 	bl	8008e04 <_realloc_r>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d1e2      	bne.n	8008b58 <__ssputs_r+0x70>
 8008b92:	6921      	ldr	r1, [r4, #16]
 8008b94:	4650      	mov	r0, sl
 8008b96:	f7ff ff01 	bl	800899c <_free_r>
 8008b9a:	e7c8      	b.n	8008b2e <__ssputs_r+0x46>

08008b9c <_svfiprintf_r>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	461d      	mov	r5, r3
 8008ba2:	898b      	ldrh	r3, [r1, #12]
 8008ba4:	b09d      	sub	sp, #116	; 0x74
 8008ba6:	061f      	lsls	r7, r3, #24
 8008ba8:	4680      	mov	r8, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	4616      	mov	r6, r2
 8008bae:	d50f      	bpl.n	8008bd0 <_svfiprintf_r+0x34>
 8008bb0:	690b      	ldr	r3, [r1, #16]
 8008bb2:	b96b      	cbnz	r3, 8008bd0 <_svfiprintf_r+0x34>
 8008bb4:	2140      	movs	r1, #64	; 0x40
 8008bb6:	f7ff ff3d 	bl	8008a34 <_malloc_r>
 8008bba:	6020      	str	r0, [r4, #0]
 8008bbc:	6120      	str	r0, [r4, #16]
 8008bbe:	b928      	cbnz	r0, 8008bcc <_svfiprintf_r+0x30>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	f8c8 3000 	str.w	r3, [r8]
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	e0c8      	b.n	8008d5e <_svfiprintf_r+0x1c2>
 8008bcc:	2340      	movs	r3, #64	; 0x40
 8008bce:	6163      	str	r3, [r4, #20]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bda:	2330      	movs	r3, #48	; 0x30
 8008bdc:	f04f 0b01 	mov.w	fp, #1
 8008be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be4:	9503      	str	r5, [sp, #12]
 8008be6:	4637      	mov	r7, r6
 8008be8:	463d      	mov	r5, r7
 8008bea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bee:	b10b      	cbz	r3, 8008bf4 <_svfiprintf_r+0x58>
 8008bf0:	2b25      	cmp	r3, #37	; 0x25
 8008bf2:	d13e      	bne.n	8008c72 <_svfiprintf_r+0xd6>
 8008bf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008bf8:	d00b      	beq.n	8008c12 <_svfiprintf_r+0x76>
 8008bfa:	4653      	mov	r3, sl
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4640      	mov	r0, r8
 8008c02:	f7ff ff71 	bl	8008ae8 <__ssputs_r>
 8008c06:	3001      	adds	r0, #1
 8008c08:	f000 80a4 	beq.w	8008d54 <_svfiprintf_r+0x1b8>
 8008c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0e:	4453      	add	r3, sl
 8008c10:	9309      	str	r3, [sp, #36]	; 0x24
 8008c12:	783b      	ldrb	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 809d 	beq.w	8008d54 <_svfiprintf_r+0x1b8>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c2e:	462f      	mov	r7, r5
 8008c30:	2205      	movs	r2, #5
 8008c32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c36:	4850      	ldr	r0, [pc, #320]	; (8008d78 <_svfiprintf_r+0x1dc>)
 8008c38:	f7ff fa9c 	bl	8008174 <memchr>
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	b9d0      	cbnz	r0, 8008c76 <_svfiprintf_r+0xda>
 8008c40:	06d9      	lsls	r1, r3, #27
 8008c42:	bf44      	itt	mi
 8008c44:	2220      	movmi	r2, #32
 8008c46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c4a:	071a      	lsls	r2, r3, #28
 8008c4c:	bf44      	itt	mi
 8008c4e:	222b      	movmi	r2, #43	; 0x2b
 8008c50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c54:	782a      	ldrb	r2, [r5, #0]
 8008c56:	2a2a      	cmp	r2, #42	; 0x2a
 8008c58:	d015      	beq.n	8008c86 <_svfiprintf_r+0xea>
 8008c5a:	462f      	mov	r7, r5
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	250a      	movs	r5, #10
 8008c60:	9a07      	ldr	r2, [sp, #28]
 8008c62:	4639      	mov	r1, r7
 8008c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c68:	3b30      	subs	r3, #48	; 0x30
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	d94d      	bls.n	8008d0a <_svfiprintf_r+0x16e>
 8008c6e:	b1b8      	cbz	r0, 8008ca0 <_svfiprintf_r+0x104>
 8008c70:	e00f      	b.n	8008c92 <_svfiprintf_r+0xf6>
 8008c72:	462f      	mov	r7, r5
 8008c74:	e7b8      	b.n	8008be8 <_svfiprintf_r+0x4c>
 8008c76:	4a40      	ldr	r2, [pc, #256]	; (8008d78 <_svfiprintf_r+0x1dc>)
 8008c78:	463d      	mov	r5, r7
 8008c7a:	1a80      	subs	r0, r0, r2
 8008c7c:	fa0b f000 	lsl.w	r0, fp, r0
 8008c80:	4318      	orrs	r0, r3
 8008c82:	9004      	str	r0, [sp, #16]
 8008c84:	e7d3      	b.n	8008c2e <_svfiprintf_r+0x92>
 8008c86:	9a03      	ldr	r2, [sp, #12]
 8008c88:	1d11      	adds	r1, r2, #4
 8008c8a:	6812      	ldr	r2, [r2, #0]
 8008c8c:	9103      	str	r1, [sp, #12]
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	db01      	blt.n	8008c96 <_svfiprintf_r+0xfa>
 8008c92:	9207      	str	r2, [sp, #28]
 8008c94:	e004      	b.n	8008ca0 <_svfiprintf_r+0x104>
 8008c96:	4252      	negs	r2, r2
 8008c98:	f043 0302 	orr.w	r3, r3, #2
 8008c9c:	9207      	str	r2, [sp, #28]
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	783b      	ldrb	r3, [r7, #0]
 8008ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca4:	d10c      	bne.n	8008cc0 <_svfiprintf_r+0x124>
 8008ca6:	787b      	ldrb	r3, [r7, #1]
 8008ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8008caa:	d133      	bne.n	8008d14 <_svfiprintf_r+0x178>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	3702      	adds	r7, #2
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	9203      	str	r2, [sp, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfb8      	it	lt
 8008cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cbe:	9305      	str	r3, [sp, #20]
 8008cc0:	4d2e      	ldr	r5, [pc, #184]	; (8008d7c <_svfiprintf_r+0x1e0>)
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	7839      	ldrb	r1, [r7, #0]
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f7ff fa54 	bl	8008174 <memchr>
 8008ccc:	b138      	cbz	r0, 8008cde <_svfiprintf_r+0x142>
 8008cce:	2340      	movs	r3, #64	; 0x40
 8008cd0:	1b40      	subs	r0, r0, r5
 8008cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	3701      	adds	r7, #1
 8008cda:	4303      	orrs	r3, r0
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	7839      	ldrb	r1, [r7, #0]
 8008ce0:	2206      	movs	r2, #6
 8008ce2:	4827      	ldr	r0, [pc, #156]	; (8008d80 <_svfiprintf_r+0x1e4>)
 8008ce4:	1c7e      	adds	r6, r7, #1
 8008ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cea:	f7ff fa43 	bl	8008174 <memchr>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d038      	beq.n	8008d64 <_svfiprintf_r+0x1c8>
 8008cf2:	4b24      	ldr	r3, [pc, #144]	; (8008d84 <_svfiprintf_r+0x1e8>)
 8008cf4:	bb13      	cbnz	r3, 8008d3c <_svfiprintf_r+0x1a0>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	3307      	adds	r3, #7
 8008cfa:	f023 0307 	bic.w	r3, r3, #7
 8008cfe:	3308      	adds	r3, #8
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d04:	444b      	add	r3, r9
 8008d06:	9309      	str	r3, [sp, #36]	; 0x24
 8008d08:	e76d      	b.n	8008be6 <_svfiprintf_r+0x4a>
 8008d0a:	fb05 3202 	mla	r2, r5, r2, r3
 8008d0e:	2001      	movs	r0, #1
 8008d10:	460f      	mov	r7, r1
 8008d12:	e7a6      	b.n	8008c62 <_svfiprintf_r+0xc6>
 8008d14:	2300      	movs	r3, #0
 8008d16:	250a      	movs	r5, #10
 8008d18:	4619      	mov	r1, r3
 8008d1a:	3701      	adds	r7, #1
 8008d1c:	9305      	str	r3, [sp, #20]
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d24:	3a30      	subs	r2, #48	; 0x30
 8008d26:	2a09      	cmp	r2, #9
 8008d28:	d903      	bls.n	8008d32 <_svfiprintf_r+0x196>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c8      	beq.n	8008cc0 <_svfiprintf_r+0x124>
 8008d2e:	9105      	str	r1, [sp, #20]
 8008d30:	e7c6      	b.n	8008cc0 <_svfiprintf_r+0x124>
 8008d32:	fb05 2101 	mla	r1, r5, r1, r2
 8008d36:	2301      	movs	r3, #1
 8008d38:	4607      	mov	r7, r0
 8008d3a:	e7f0      	b.n	8008d1e <_svfiprintf_r+0x182>
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	4622      	mov	r2, r4
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <_svfiprintf_r+0x1ec>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4640      	mov	r0, r8
 8008d48:	f7fc fdb6 	bl	80058b8 <_printf_float>
 8008d4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d50:	4681      	mov	r9, r0
 8008d52:	d1d6      	bne.n	8008d02 <_svfiprintf_r+0x166>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	065b      	lsls	r3, r3, #25
 8008d58:	f53f af35 	bmi.w	8008bc6 <_svfiprintf_r+0x2a>
 8008d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d5e:	b01d      	add	sp, #116	; 0x74
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	ab03      	add	r3, sp, #12
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <_svfiprintf_r+0x1ec>)
 8008d6c:	a904      	add	r1, sp, #16
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7fd f84e 	bl	8005e10 <_printf_i>
 8008d74:	e7ea      	b.n	8008d4c <_svfiprintf_r+0x1b0>
 8008d76:	bf00      	nop
 8008d78:	0800924c 	.word	0x0800924c
 8008d7c:	08009252 	.word	0x08009252
 8008d80:	08009256 	.word	0x08009256
 8008d84:	080058b9 	.word	0x080058b9
 8008d88:	08008ae9 	.word	0x08008ae9

08008d8c <_sbrk_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4c05      	ldr	r4, [pc, #20]	; (8008da8 <_sbrk_r+0x1c>)
 8008d92:	4605      	mov	r5, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	f7f8 fe0c 	bl	80019b4 <_sbrk>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_sbrk_r+0x1a>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_sbrk_r+0x1a>
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000570 	.word	0x20000570

08008dac <nanf>:
 8008dac:	4800      	ldr	r0, [pc, #0]	; (8008db0 <nanf+0x4>)
 8008dae:	4770      	bx	lr
 8008db0:	7fc00000 	.word	0x7fc00000

08008db4 <__ascii_wctomb>:
 8008db4:	b149      	cbz	r1, 8008dca <__ascii_wctomb+0x16>
 8008db6:	2aff      	cmp	r2, #255	; 0xff
 8008db8:	bf8b      	itete	hi
 8008dba:	238a      	movhi	r3, #138	; 0x8a
 8008dbc:	700a      	strbls	r2, [r1, #0]
 8008dbe:	6003      	strhi	r3, [r0, #0]
 8008dc0:	2001      	movls	r0, #1
 8008dc2:	bf88      	it	hi
 8008dc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008dc8:	4770      	bx	lr
 8008dca:	4608      	mov	r0, r1
 8008dcc:	4770      	bx	lr

08008dce <memmove>:
 8008dce:	4288      	cmp	r0, r1
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	eb01 0302 	add.w	r3, r1, r2
 8008dd6:	d807      	bhi.n	8008de8 <memmove+0x1a>
 8008dd8:	1e42      	subs	r2, r0, #1
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d00a      	beq.n	8008df4 <memmove+0x26>
 8008dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008de2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008de6:	e7f8      	b.n	8008dda <memmove+0xc>
 8008de8:	4283      	cmp	r3, r0
 8008dea:	d9f5      	bls.n	8008dd8 <memmove+0xa>
 8008dec:	1881      	adds	r1, r0, r2
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	42d3      	cmn	r3, r2
 8008df2:	d100      	bne.n	8008df6 <memmove+0x28>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008dfe:	e7f7      	b.n	8008df0 <memmove+0x22>

08008e00 <__malloc_lock>:
 8008e00:	4770      	bx	lr

08008e02 <__malloc_unlock>:
 8008e02:	4770      	bx	lr

08008e04 <_realloc_r>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4607      	mov	r7, r0
 8008e08:	4614      	mov	r4, r2
 8008e0a:	460e      	mov	r6, r1
 8008e0c:	b921      	cbnz	r1, 8008e18 <_realloc_r+0x14>
 8008e0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e12:	4611      	mov	r1, r2
 8008e14:	f7ff be0e 	b.w	8008a34 <_malloc_r>
 8008e18:	b922      	cbnz	r2, 8008e24 <_realloc_r+0x20>
 8008e1a:	f7ff fdbf 	bl	800899c <_free_r>
 8008e1e:	4625      	mov	r5, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	f000 f814 	bl	8008e50 <_malloc_usable_size_r>
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d20f      	bcs.n	8008e4c <_realloc_r+0x48>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f7ff fe00 	bl	8008a34 <_malloc_r>
 8008e34:	4605      	mov	r5, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0f2      	beq.n	8008e20 <_realloc_r+0x1c>
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	f7fc fc97 	bl	8005770 <memcpy>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4638      	mov	r0, r7
 8008e46:	f7ff fda9 	bl	800899c <_free_r>
 8008e4a:	e7e9      	b.n	8008e20 <_realloc_r+0x1c>
 8008e4c:	4635      	mov	r5, r6
 8008e4e:	e7e7      	b.n	8008e20 <_realloc_r+0x1c>

08008e50 <_malloc_usable_size_r>:
 8008e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e54:	1f18      	subs	r0, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfbc      	itt	lt
 8008e5a:	580b      	ldrlt	r3, [r1, r0]
 8008e5c:	18c0      	addlt	r0, r0, r3
 8008e5e:	4770      	bx	lr

08008e60 <trunc>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008e66:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8008e6a:	2a13      	cmp	r2, #19
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	dc10      	bgt.n	8008e94 <trunc+0x34>
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	bfb3      	iteet	lt
 8008e76:	2000      	movlt	r0, #0
 8008e78:	2000      	movge	r0, #0
 8008e7a:	4b10      	ldrge	r3, [pc, #64]	; (8008ebc <trunc+0x5c>)
 8008e7c:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8008e80:	bfa4      	itt	ge
 8008e82:	fa43 f202 	asrge.w	r2, r3, r2
 8008e86:	ea24 0102 	bicge.w	r1, r4, r2
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	4618      	mov	r0, r3
 8008e90:	4621      	mov	r1, r4
 8008e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e94:	2a33      	cmp	r2, #51	; 0x33
 8008e96:	dd07      	ble.n	8008ea8 <trunc+0x48>
 8008e98:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008e9c:	d1f7      	bne.n	8008e8e <trunc+0x2e>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	f7f7 f97b 	bl	800019c <__adddf3>
 8008ea6:	e7f0      	b.n	8008e8a <trunc+0x2a>
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8008eb0:	fa22 f505 	lsr.w	r5, r2, r5
 8008eb4:	ea20 0005 	bic.w	r0, r0, r5
 8008eb8:	e7e7      	b.n	8008e8a <trunc+0x2a>
 8008eba:	bf00      	nop
 8008ebc:	000fffff 	.word	0x000fffff

08008ec0 <_init>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	bf00      	nop
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr

08008ecc <_fini>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr
